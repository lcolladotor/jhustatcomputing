<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Statistical Computing (BSPH 140.776)</title>
<link>https://lcolladotor.github.io/jhustatcomputing2023/lectures.html</link>
<atom:link href="https://lcolladotor.github.io/jhustatcomputing2023/lectures.xml" rel="self" type="application/rss+xml"/>
<description>Course website for Statistical Computing (BSPH 140.776) in Fall 2023</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Thu, 20 Oct 2022 04:00:00 GMT</lastBuildDate>
<item>
  <title>Python for R Users</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-20-python-for-r-users/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://rstudio.github.io/reticulate" class="uri">https://rstudio.github.io/reticulate</a></li>
<li><a href="https://py-pkgs.org/02-setup" class="uri">https://py-pkgs.org/02-setup</a></li>
<li><a href="https://docs.python.org/3/tutorial">The Python Tutorial</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rstudio.github.io/reticulate" class="uri">https://rstudio.github.io/reticulate</a></li>
<li><a href="https://github.com/bcaffo/ds4ph-bme/blob/master/python.md" class="uri">https://github.com/bcaffo/ds4ph-bme/blob/master/python.md</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ol type="1">
<li>Install the <code>reticulate</code> R package on your machine (I’m assuming you have python installed already)</li>
<li>Learn about <code>reticulate</code> to work interoperability between Python and R</li>
<li>Be able to translate between R and Python objects</li>
</ol>
</div>
</div>
</section>
<section id="python-for-r-users" class="level1">
<h1>Python for R Users</h1>
<p>As the number of computational and statistical methods for the analysis data continue to increase, you will find many will be implemented in other languages.</p>
<p>Often <strong>Python is the language of choice</strong>.</p>
<p>Python is incredibly powerful and I increasingly interact with it on very frequent basis these days. To be able to leverage software tools implemented in Python, today I am giving an overview of using Python from the perspective of an R user.</p>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>For this lecture, we will be using the <a href="https://rstudio.github.io/reticulate"><code>reticulate</code> R package</a>, which provides a set of tools for interoperability between Python and R. The package includes facilities for:</p>
<ul>
<li><strong>Calling Python from R</strong> in a variety of ways including (i) R Markdown, (ii) sourcing Python scripts, (iii) importing Python modules, and (iv) using Python interactively within an R session.</li>
<li><strong>Translation between R and Python objects</strong> (for example, between R and Pandas data frames, or between R matrices and NumPy arrays).</li>
</ul>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-20-python-for-r-users/https:/rstudio.github.io/reticulate/images/reticulated_python.png" class="img-fluid" data-preview="TRUE"></p>
<p>[<strong>Source</strong>: <a href="https://rstudio.github.io/reticulate/index.html">Rstudio</a>]</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip for installing python
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Installing python</strong>: If you would like recommendations on installing python, I like these resources:</p>
<ul>
<li>Py Pkgs: <a href="https://py-pkgs.org/02-setup#installing-python" class="uri">https://py-pkgs.org/02-setup#installing-python</a></li>
<li>my fav: Using conda environments with mini-forge: <a href="https://github.com/conda-forge/miniforge" class="uri">https://github.com/conda-forge/miniforge</a></li>
<li>from <code>reticulate</code>: <a href="https://rstudio.github.io/reticulate/articles/python_packages.html" class="uri">https://rstudio.github.io/reticulate/articles/python_packages.html</a></li>
</ul>
<p><strong>What’s happening under the hood?</strong>: <code>reticulate</code> embeds a Python session within your R session, enabling seamless, high-performance interoperability.</p>
<p>If you are an R developer that uses Python for some of your work or a member of data science team that uses both languages, <code>reticulate</code> can make your life better!</p>
</div>
</div>
</section>
<section id="install-reticulate" class="level2">
<h2 class="anchored" data-anchor-id="install-reticulate">Install <code>reticulate</code></h2>
<p>Let’s try it out. Before we get started, you will need to install the packages:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reticulate"</span>)</span></code></pre></div>
</div>
<p>We will also load the <code>here</code> and <code>tidyverse</code> packages for our lesson:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(reticulate)</span></code></pre></div>
</div>
</section>
<section id="python-path" class="level2">
<h2 class="anchored" data-anchor-id="python-path">python path</h2>
<p>If python is not installed on your computer, you can use the <code>install_python()</code> function from <code>reticulate</code> to install it.</p>
<ul>
<li><a href="https://rstudio.github.io/reticulate/reference/install_python" class="uri">https://rstudio.github.io/reticulate/reference/install_python</a></li>
</ul>
<p>If python is already installed, by default, <code>reticulate</code> uses the version of Python found on your <code>PATH</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.which</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python3"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           python3 
"/usr/bin/python3" </code></pre>
</div>
</div>
<p>The <code>use_python()</code> function enables you to specify an alternate version, for example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_python</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/usr/&lt;new&gt;/&lt;path&gt;/local/bin/python"</span>)</span></code></pre></div>
</div>
<p>For example, I can define the path explicitly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_python</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/opt/homebrew/Caskroom/miniforge/base/bin/python"</span>)</span></code></pre></div>
</div>
<p>You can confirm that <code>reticulate</code> is using the correct version of python that you requested using the <code>py_discover_config</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">py_discover_config</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>python:         /opt/homebrew/Caskroom/miniforge/base/bin/python
libpython:      /opt/homebrew/Caskroom/miniforge/base/lib/libpython3.9.dylib
pythonhome:     /opt/homebrew/Caskroom/miniforge/base:/opt/homebrew/Caskroom/miniforge/base
version:        3.9.10 | packaged by conda-forge | (main, Feb  1 2022, 21:27:43)  [Clang 11.1.0 ]
numpy:          /opt/homebrew/Caskroom/miniforge/base/lib/python3.9/site-packages/numpy
numpy_version:  1.23.0

NOTE: Python version was forced by RETICULATE_PYTHON</code></pre>
</div>
</div>
</section>
<section id="calling-python-in-r" class="level2">
<h2 class="anchored" data-anchor-id="calling-python-in-r">Calling Python in R</h2>
<p>There are a variety of ways to integrate Python code into your R projects:</p>
<ol type="1">
<li><p><strong>Python in R Markdown</strong> — A new Python language engine for R Markdown that supports bi-directional communication between R and Python (R chunks can access Python objects and vice-versa).</p></li>
<li><p><strong>Importing Python modules</strong> — The <code>import()</code> function enables you to import any Python module and call its functions directly from R.</p></li>
<li><p><strong>Sourcing Python scripts</strong> — The <code>source_python()</code> function enables you to source a Python script the same way you would <code>source()</code> an R script (Python functions and objects defined within the script become directly available to the R session).</p></li>
<li><p><strong>Python REPL</strong> — The <code>repl_python()</code> function creates an interactive Python console within R. Objects you create within Python are available to your R session (and vice-versa).</p></li>
</ol>
<p>Below I will focus on introducing the first and last one. However, before we do that, let’s introduce a bit about python basics.</p>
</section>
</section>
<section id="python-basics" class="level1">
<h1>Python basics</h1>
<p>Python is a <strong>high-level</strong>, <strong>object-oriented programming</strong> language useful to know for anyone analyzing data.</p>
<p>The most important thing to know before learning Python, is that in Python, <strong>everything is an object</strong>.</p>
<ul>
<li>There is no compiling and no need to define the type of variables before using them.</li>
<li>No need to allocate memory for variables.</li>
<li>The code is very easy to learn and easy to read (syntax).</li>
</ul>
<p>There is a large scientific community contributing to Python. Some of the most widely used libraries in Python are <code>numpy</code>, <code>scipy</code>, <code>pandas</code>, and <code>matplotlib</code>.</p>
<section id="start-python" class="level2">
<h2 class="anchored" data-anchor-id="start-python">start python</h2>
<p>There are two modes you can write Python code in: <strong>interactive mode</strong> or <strong>script mode</strong>. If you open up a UNIX command window and have a command-line interface, you can simply type <code>python</code> (or <code>python3</code>) in the shell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span></span></code></pre></div>
</div>
<p>and the <strong>interactive mode</strong> will open up. You can write code in the interactive mode and Python will <em>interpret</em> the code using the <strong>python interpreter</strong>.</p>
<p>Another way to pass code to Python is to store code in a file ending in <code>.py</code>, and execute the file in the <strong>script mode</strong> using</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> myscript.py</span></code></pre></div>
</div>
<p>To check what version of Python you are using, type the following in the shell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span></code></pre></div>
</div>
</section>
<section id="r-or-python-via-terminal" class="level2">
<h2 class="anchored" data-anchor-id="r-or-python-via-terminal">R or python via terminal</h2>
<p>(Demo in class)</p>
</section>
<section id="objects-in-python" class="level2">
<h2 class="anchored" data-anchor-id="objects-in-python">objects in python</h2>
<p>Everything in Python is an object. Think of an object as a data structure that contains both data as well as functions. These objects can be variables, functions, and modules which are all objects. We can operate on this objects with what are called <strong>operators</strong> (e.g.&nbsp;addition, subtraction, concatenation or other operations), define/apply functions, test/apply for conditionals statements, (e.g.&nbsp;<code>if</code>, <code>else</code> statements) or iterate over the objects.</p>
<p>Not all objects are required to have <strong>attributes</strong> and <strong>methods</strong> to operate on the objects in Python, but <strong>everything is an object</strong> (i.e.&nbsp;all objects can be assigned to a variable or passed as an argument to a function). A user can work with built-in defined classes of objects or can create new classes of objects. Using these objects, a user can perform operations on the objects by modifying / interacting with them.</p>
</section>
<section id="variables" class="level2">
<h2 class="anchored" data-anchor-id="variables">variables</h2>
<p>Variable names are case sensitive, can contain numbers and letters, can contain underscores, cannot begin with a number, cannot contain illegal characters and cannot be one of the 31 keywords in Python:</p>
<blockquote class="blockquote">
<p>“and, as, assert, break, class, continue, def, del, elif, else, except, exec, finally, for, from, global, if, import, in, is, lambda, not, or, pass, print, raise, return, try, while, with, yield”</p>
</blockquote>
</section>
<section id="operators" class="level2">
<h2 class="anchored" data-anchor-id="operators">operators</h2>
<ul>
<li>Numeric operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>**</code> (exponent), <code>%</code> (modulus if applied to integers)</li>
<li>String and list operators: <code>+</code> and <code>*</code> .</li>
<li>Assignment operator: <code>=</code></li>
<li>The augmented assignment operator <code>+=</code> (or <code>-=</code>) can be used like <code>n += x</code> which is equal to <code>n = n + x</code></li>
<li>Boolean relational operators: <code>==</code> (equal), <code>!=</code> (not equal), <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> (greater than or equal to), <code>&lt;=</code> (less than or equal to)</li>
<li>Boolean expressions will produce True or False</li>
<li>Logical operators: <code>and</code>, <code>or</code>, and <code>not</code>. e.g.&nbsp;<code>x &gt; 1 and x &lt;= 5</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>8</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> </span>
<span id="cb14-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>True</code></pre>
</div>
</div>
<p>And in R, the execution changes from Python to R seamlessly</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 8</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb18-2">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</section>
<section id="format-operators" class="level2">
<h2 class="anchored" data-anchor-id="format-operators">format operators</h2>
<p>If <code>%</code> is applied to strings, this operator is the <strong>format operator</strong>. It tells Python how to format a list of values in a string. For example,</p>
<ul>
<li><code>%d</code> says to format the value as an integer</li>
<li><code>%g</code> says to format the value as an float</li>
<li><code>%s</code> says to format the value as an string</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'In </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> days, I have eaten </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%g</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cupcakes'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>In 5 days, I have eaten 3.5 cupcakes.</code></pre>
</div>
</div>
</section>
<section id="functions" class="level2">
<h2 class="anchored" data-anchor-id="functions">functions</h2>
<p>Python contains a small list of very useful <strong>built-in functions</strong>.</p>
<p>All other functions need defined by the user or need to be imported from modules.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>For a more detailed list on the built-in functions in Python, see <a href="https://docs.python.org/2/library/functions.html">Built-in Python Functions</a>.</p>
</div>
</div>
<p>The first function we will discuss, <code>type()</code>, reports the type of any object, which is very useful when handling multiple data types (remember, everything in Python is an object). Here are some the mains types you will encounter:</p>
<ul>
<li>integer (<code>int</code>)</li>
<li>floating-point (<code>float</code>)</li>
<li>string (<code>str</code>)</li>
<li>list (<code>list</code>)</li>
<li>dictionary (<code>dict</code>)</li>
<li>tuple (<code>tuple</code>)</li>
<li>function (<code>function</code>)</li>
<li>module (<code>module</code>)</li>
<li>boolean (<code>bool</code>): e.g.&nbsp;True, False</li>
<li>enumerate (<code>enumerate</code>)</li>
</ul>
<p>If we asked for the type of a string “Let’s go Ravens!”</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Let's go Ravens!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'str'&gt;</code></pre>
</div>
</div>
<p>This would return the <code>str</code> type.</p>
<p>You have also seen how to use the <code>print()</code> function. The function print will accept an argument and print the argument to the screen. Print can be used in two ways:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Let's go Ravens!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Let's go Ravens!"</code></pre>
</div>
</div>
</section>
<section id="new-functions" class="level2">
<h2 class="anchored" data-anchor-id="new-functions">new functions</h2>
<p>New functions can be defined using one of the 31 keywords in Python def.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> new_world(): </span>
<span id="cb26-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello world!'</span></span>
<span id="cb26-3">    </span>
<span id="cb26-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(new_world())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello world!</code></pre>
</div>
</div>
<p>The first line of the function (the header) must start with <code>def</code>, the name of the function (which can contain underscores), parentheses (with any arguments inside of it) and a colon. The arguments can be specified in any order.</p>
<p>The rest of the function (the body) always has an indentation of four spaces. If you define a function in the interactive mode, the interpreter will print ellipses (…) to let you know the function is not complete. To complete the function, enter an empty line (not necessary in a script).</p>
<p>To return a value from a function, use return. The function will immediately terminate and not run any code written past this point.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> squared(x):</span>
<span id="cb28-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Return the square of a  </span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        value """</span></span>
<span id="cb28-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb28-5"></span>
<span id="cb28-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(squared(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>16</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>python has its version of <code>...</code> (also from docs.python.org)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> concat(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>):</span>
<span id="cb30-2"> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sep.join(args)  </span>
<span id="cb30-3"></span>
<span id="cb30-4">concat(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'a/b/c'</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="iteration" class="level2">
<h2 class="anchored" data-anchor-id="iteration">iteration</h2>
<p><strong>Iterative loops</strong> can be written with the <code>for</code>, <code>while</code> and <code>break</code> statements.</p>
<p>Defining a <strong><code>for</code> loop</strong> is similar to defining a new function.</p>
<ul>
<li>The header ends with a colon and the body is indented.</li>
<li>The function <code>range(n)</code> takes in an integer <code>n</code> and creates a set of values from <code>0</code> to <code>n - 1</code>.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb32-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Baby shark, doo doo doo doo doo doo!'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Baby shark, doo doo doo doo doo doo!
Baby shark, doo doo doo doo doo doo!
Baby shark, doo doo doo doo doo doo!</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Baby shark!'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Baby shark!</code></pre>
</div>
</div>
<p><code>for</code> loops are not just for counters, but they can iterate through many types of objects such as strings, lists and dictionaries.</p>
<p>The <strong>function <code>len()</code></strong> can be used to:</p>
<ul>
<li>Calculate the length of a string</li>
<li>Calculate the number of elements in a list</li>
<li>Calculate the number of items (key-value pairs) in a dictionary</li>
<li>Calculate the number elements in the tuple</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Baby shark!'</span></span>
<span id="cb36-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>11</code></pre>
</div>
</div>
</section>
<section id="methods-for-each-type-of-object-dot-notation" class="level2">
<h2 class="anchored" data-anchor-id="methods-for-each-type-of-object-dot-notation">methods for each type of object (dot notation)</h2>
<p>For strings, lists and dictionaries, there are set of methods you can use to manipulate the objects. In general, the notation for methods is the <strong>dot notation</strong>.</p>
<p>The syntax is the <strong>name of the object</strong> followed by a <strong>dot</strong> (or period) followed by the <strong>name of the method</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello Baltimore!"</span></span>
<span id="cb38-2">x.split()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['Hello', 'Baltimore!']</code></pre>
</div>
</div>
</section>
<section id="data-structures" class="level2">
<h2 class="anchored" data-anchor-id="data-structures">Data structures</h2>
<p>We have already seen lists. Python has other <strong>data structures</strong> built in.</p>
<ul>
<li>Sets <code>{"a", "a", "a", "b"}</code> (unique elements)</li>
<li>Tuples <code>(1, 2, 3)</code> (a lot like lists but not mutable, i.e.&nbsp;need to create a new to modify)</li>
<li>Dictionaries</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>}</span>
<span id="cb40-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2</code></pre>
</div>
</div>
<p>More about data structures can be founds <a href="https://docs.python.org/3/tutorial/datastructures.html">at the python docs</a></p>
</section>
</section>
<section id="reticulate" class="level1">
<h1><code>reticulate</code></h1>
<section id="python-engine-within-r-markdown" class="level2">
<h2 class="anchored" data-anchor-id="python-engine-within-r-markdown">Python engine within R Markdown</h2>
<p>The <code>reticulate</code> package includes a Python engine for R Markdown with the following features:</p>
<ol type="1">
<li><p>Run <strong>Python chunks in a single Python session embedded within your R session</strong> (shared variables/state between Python chunks)</p></li>
<li><p><strong>Printing of Python output</strong>, including graphical output from <code>matplotlib</code>.</p></li>
<li><p><strong>Access to objects created within Python chunks from R</strong> using the <code>py</code> object (e.g.&nbsp;<code>py$x</code> would access an <code>x</code> variable created within Python from R).</p></li>
<li><p><strong>Access to objects created within R chunks from Python</strong> using the <code>r</code> object (e.g.&nbsp;<code>r.x</code> would access to <code>x</code> variable created within R from Python)</p></li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Conversions
</div>
</div>
<div class="callout-body-container callout-body">
<p>Built in conversion for many Python object types is provided, including <a href="https://numpy.org">NumPy</a> arrays and <a href="https://pandas.pydata.org">Pandas</a> data frames.</p>
</div>
</div>
</section>
<section id="from-python-to-r" class="level2">
<h2 class="anchored" data-anchor-id="from-python-to-r">From Python to R</h2>
<p>As an example, you can use Pandas to read and manipulate data then easily plot the Pandas data frame using <code>ggplot2</code>:</p>
<p>Let’s first create a <code>flights.csv</code> dataset in R and save it using <code>write_csv</code> from <code>readr</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checks to see if a folder called "data" exists; if not, it installs it</span></span>
<span id="cb44-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>))){</span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>))</span>
<span id="cb44-4">}</span>
<span id="cb44-5"></span>
<span id="cb44-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checks to see if a file called "flights.csv" exists; if not, it saves it to the data folder</span></span>
<span id="cb44-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flights.csv"</span>))){</span>
<span id="cb44-8">  readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_csv</span>(nycflights13<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>flights, </span>
<span id="cb44-9">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flights.csv"</span>))</span>
<span id="cb44-10">}</span>
<span id="cb44-11"></span>
<span id="cb44-12">nycflights13<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>flights <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb44-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 19
   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier
  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;       &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;  
1  2013     1     1      517         515       2     830     819      11 UA     
2  2013     1     1      533         529       4     850     830      20 UA     
3  2013     1     1      542         540       2     923     850      33 AA     
4  2013     1     1      544         545      -1    1004    1022     -18 B6     
5  2013     1     1      554         600      -6     812     837     -25 DL     
6  2013     1     1      554         558      -4     740     728      12 UA     
# … with 9 more variables: flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;,
#   dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;,
#   time_hour &lt;dttm&gt;, and abbreviated variable names ¹​sched_dep_time,
#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay</code></pre>
</div>
</div>
<p>Next, we <strong>use Python to read in the file</strong> and do some data wrangling</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas</span>
<span id="cb46-2">flights_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/stephaniehicks/Documents/github/teaching/jhustatcomputing2022/data/flights.csv"</span></span>
<span id="cb46-3">flights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pandas.read_csv(flights_path)</span>
<span id="cb46-4">flights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flights[flights[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dest'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORD"</span>]</span>
<span id="cb46-5">flights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flights[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'carrier'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dep_delay'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'arr_delay'</span>]]</span>
<span id="cb46-6">flights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flights.dropna()</span>
<span id="cb46-7">flights</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       carrier  dep_delay  arr_delay
5           UA       -4.0       12.0
9           AA       -2.0        8.0
25          MQ        8.0       32.0
38          AA       -1.0       14.0
57          AA       -4.0        4.0
...        ...        ...        ...
336645      AA      -12.0      -37.0
336669      UA       -7.0      -13.0
336675      MQ       -7.0      -11.0
336696      B6       -5.0      -23.0
336709      AA      -13.0      -38.0

[16566 rows x 3 columns]</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>flights)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   carrier dep_delay arr_delay
5       UA        -4        12
9       AA        -2         8
25      MQ         8        32
38      AA        -1        14
57      AA        -4         4
70      UA         9        20</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>flights_path </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/Users/stephaniehicks/Documents/github/teaching/jhustatcomputing2022/data/flights.csv"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>flights)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data.frame"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>flights_path)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
</div>
<p>Next, we can use R to <strong>visualize the Pandas</strong> <code>DataFrame</code>.</p>
<p>The data frame is <strong>loaded in as an R object now</strong> stored in the variable <code>py</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>flights, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> carrier, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> arr_delay)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb56-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb56-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-20-python-for-r-users/index_files/figure-html/unnamed-chunk-26-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>reticulate</code> Python engine is enabled by default within R Markdown whenever <code>reticulate</code> is installed.</p>
</div>
</div>
<section id="from-r-to-python" class="level3">
<h3 class="anchored" data-anchor-id="from-r-to-python">From R to Python</h3>
<p>Use R to read and manipulate data</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb57-2">flights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flights.csv"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb57-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(dest <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORD"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb57-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(carrier, dep_delay, arr_delay) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb57-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 336776 Columns: 19
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr   (4): carrier, tailnum, origin, dest
dbl  (14): year, month, day, dep_time, sched_dep_time, dep_delay, arr_time, ...
dttm  (1): time_hour

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">flights</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 16,566 × 3
   carrier dep_delay arr_delay
   &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;
 1 UA             -4        12
 2 AA             -2         8
 3 MQ              8        32
 4 AA             -1        14
 5 AA             -4         4
 6 UA              9        20
 7 UA              2        21
 8 AA             -6       -12
 9 MQ             39        49
10 B6             -2        15
# … with 16,556 more rows</code></pre>
</div>
</div>
</section>
<section id="use-python-to-print-r-dataframe" class="level3">
<h3 class="anchored" data-anchor-id="use-python-to-print-r-dataframe">Use Python to print R dataframe</h3>
<p>If you recall, we can <strong>access objects created within R chunks from Python</strong> using the <code>r</code> object (e.g.&nbsp;<code>r.x</code> would access to <code>x</code> variable created within R from Python).</p>
<p>We can then ask for the first ten rows using the <code>head()</code> function in python.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">r.flights.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  carrier  dep_delay  arr_delay
0      UA       -4.0       12.0
1      AA       -2.0        8.0
2      MQ        8.0       32.0
3      AA       -1.0       14.0
4      AA       -4.0        4.0
5      UA        9.0       20.0
6      UA        2.0       21.0
7      AA       -6.0      -12.0
8      MQ       39.0       49.0
9      B6       -2.0       15.0</code></pre>
</div>
</div>
</section>
</section>
<section id="import-python-modules" class="level2">
<h2 class="anchored" data-anchor-id="import-python-modules">import python modules</h2>
<p>You can use the <code>import()</code> function to import any Python module and call it from R. For example, this code imports the Python <code>os</code> module in python and calls the <code>listdir()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">os <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">import</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"os"</span>)</span>
<span id="cb63-2">os<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">listdir</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] ".Rhistory"       "index.qmd"       "index_files"     "index.rmarkdown"</code></pre>
</div>
</div>
<p>Functions and other data within Python modules and classes can be accessed via the <code>$</code> operator (analogous to the way you would interact with an R list, environment, or reference class).</p>
<p>Imported Python modules support code completion and inline help:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-20-python-for-r-users/https:/rstudio.github.io/reticulate/images/reticulate_completion.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Using reticulate tab completion</figcaption>
</figure>
</div>
</div>
</div>
<p>[<strong>Source</strong>: <a href="https://rstudio.github.io/reticulate">Rstudio</a>]</p>
<p>Similarly, we can import the pandas library:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">pd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">import</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pandas'</span>)</span>
<span id="cb65-2">test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flights.csv"</span>))</span>
<span id="cb65-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(test)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time
1 2013     1   1      517            515         2      830            819
2 2013     1   1      533            529         4      850            830
3 2013     1   1      542            540         2      923            850
4 2013     1   1      544            545        -1     1004           1022
5 2013     1   1      554            600        -6      812            837
6 2013     1   1      554            558        -4      740            728
  arr_delay carrier flight tailnum origin dest air_time distance hour minute
1        11      UA   1545  N14228    EWR  IAH      227     1400    5     15
2        20      UA   1714  N24211    LGA  IAH      227     1416    5     29
3        33      AA   1141  N619AA    JFK  MIA      160     1089    5     40
4       -18      B6    725  N804JB    JFK  BQN      183     1576    5     45
5       -25      DL    461  N668DN    LGA  ATL      116      762    6      0
6        12      UA   1696  N39463    EWR  ORD      150      719    5     58
             time_hour
1 2013-01-01T10:00:00Z
2 2013-01-01T10:00:00Z
3 2013-01-01T10:00:00Z
4 2013-01-01T10:00:00Z
5 2013-01-01T11:00:00Z
6 2013-01-01T10:00:00Z</code></pre>
</div>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(test)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data.frame"</code></pre>
</div>
</div>
<p>or the scikit-learn python library:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">skl_lr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">import</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sklearn.linear_model"</span>)</span>
<span id="cb69-2">skl_lr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Module(sklearn.linear_model)</code></pre>
</div>
</div>
</section>
<section id="calling-python-scripts" class="level2">
<h2 class="anchored" data-anchor-id="calling-python-scripts">Calling python scripts</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source_python</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secret_functions.py"</span>)</span>
<span id="cb71-2">subject_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_subject</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secret_data.csv"</span>)</span></code></pre></div>
</div>
</section>
<section id="calling-the-python-repl" class="level2">
<h2 class="anchored" data-anchor-id="calling-the-python-repl">Calling the python repl</h2>
<p>If you want to work with Python interactively you can call the <code>repl_python()</code> function, which provides a Python REPL embedded within your R session.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repl_python</span>()</span></code></pre></div>
</div>
<p>Objects created within the Python REPL can be accessed from R using the <code>py</code> object exported from <code>reticulate</code>. For example:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-20-python-for-r-users/https:/rstudio.github.io/reticulate/images/python_repl.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Using the repl_python() function</figcaption>
</figure>
</div>
</div>
</div>
<p>[<strong>Source</strong>: <a href="https://rstudio.github.io/reticulate">Rstudio</a>]</p>
<p>i.e.&nbsp;objects do have permenancy in R after exiting the python repl.</p>
<p>So typing <code>x = 4</code> in the repl will put <code>py$x</code> as 4 in R after you exit the repl.</p>
<p>Enter exit within the Python REPL to return to the R prompt.</p>
</section>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Try to use tab completion for a function.</li>
<li>Try to install and load a different python module in R using <code>import()</code>.</li>
</ol>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>week 8</category>
  <category>module 6</category>
  <category>python</category>
  <category>R</category>
  <category>programming</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-20-python-for-r-users/index.html</guid>
  <pubDate>Thu, 20 Oct 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Best practices for data analyses</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index.html</link>
  <description><![CDATA[ 




<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://teachdatascience.com/philosophy" class="uri">https://teachdatascience.com/philosophy</a></li>
<li><a href="https://teachdatascience.com/closing2020" class="uri">https://teachdatascience.com/closing2020</a></li>
<li><a href="https://febs.onlinelibrary.wiley.com/doi/10.1002/1873-3468.14067">Sharing biological data: why, when, and how</a></li>
<li><a href="https://github.com/genomicsclass/labs/blob/master/eda/plots_to_avoid.Rmd">https://github.com/genomicsclass/labs/blob/master/eda/plots_to_avoid.Rmd</a></li>
<li><a href="http://jtleek.com/advdatasci/09-expository-graphs.html">http://jtleek.com/advdatasci/09-expository-graphs.html</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<p>Be able to state best practices for:</p>
<ul>
<li>Considerations around building ethical data analyses</li>
<li>Sharing data</li>
<li>Creating data visualizations</li>
</ul>
</div>
</div>
</section>
<section id="best-practices-for-data-ethics" class="level1">
<h1>Best practices for data ethics</h1>
<p>In philosophy departments, classes and modules centered around <strong>data ethics</strong> are widely discussed.</p>
<p>The ethical challenges around working with data are not fundamentally different from the ethical challenges philosophers have always faced.</p>
<p>However, putting an ethical framework around building data analyses in practice is indeed new for most data scientists, and for many of us, we are woefully under-prepared to teach so far outside our comfort zone.</p>
<p>That being said, we can provide some thoughts on how to approach a data science problem using a philosophical lens.</p>
<section id="defining-ethics" class="level2">
<h2 class="anchored" data-anchor-id="defining-ethics">Defining ethics</h2>
<p>We start with a grounding in the definition of Ethics:</p>
<p><strong>Ethics</strong>, also called moral philosophy, has three main branches:</p>
<ol type="1">
<li><a href="https://www.oxfordbibliographies.com/view/document/obo-9780195396577/obo-9780195396577-0006.xml">Applied ethics</a> “is a branch of ethics devoted to the treatment of moral problems, practices, and policies in personal life, professions, technology, and government.”</li>
<li><a href="https://academic.oup.com/edited-volume/35492/chapter-abstract/304418208?redirectedFrom=fulltext&amp;login=false">Ethical theory</a> “is concerned with the articulation and the justification of the fundamental principles that govern the issues of how we should live and what we morally ought to do. Its most general concerns are providing an account of moral evaluation and, possibly, articulating a decision procedure to guide moral action.”</li>
<li><a href="https://plato.stanford.edu/entries/metaethics/">Metaethics</a> “is the attempt to understand the metaphysical, epistemological, semantic, and psychological, presuppositions and commitments of moral thought, talk, and practice.”</li>
</ol>
<p>While, unfortunately, there are myriad examples of <strong>ethical data science problems</strong> (see, for example, blog posts <a href="https://teachdatascience.com/bookclub/">bookclub</a> and <a href="https://teachdatascience.com/datafem/">data feminism</a>), here I aim to connect some of the broader data science ethics issues with the existing philosophical literature.</p>
<p>Note, I am only scratching the surface and a deeper dive might involve education in related philosophical fields (epistemology, metaphysics, or philosophy of science), philosophical methodologies, and ethical schools of thought, but you can peruse all of these through, for example, a course or readings introducing the discipline of philosophy.</p>
<p>Below we provide some thoughts on how to approach a data science problem using a philosophical lens.</p>
</section>
<section id="case-study" class="level2">
<h2 class="anchored" data-anchor-id="case-study">Case Study</h2>
<p>We begin by considering a case study around ethical data analyses.</p>
<p>Many <strong>ethics case studies</strong> provided in a classroom setting <strong>describe algorithms built on data which are meant to predict outcomes</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Large scale algorithmic decision making presents particular ethical predicaments because of both the scale of impact and the “black-box” sense of how the algorithm is generating predictions.</p>
</div>
</div>
<p>Consider the well-known issue of using <a href="https://en.wikipedia.org/wiki/Facial_recognition_system">facial recognition software</a> in policing.</p>
<p>There are many questions surrounding the policing issue:</p>
<ul>
<li>What are the action options with respect to the outcome of the algorithm?</li>
<li>What are the good and bad aspects of each action and how are these to be weighed against each other?</li>
</ul>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/https:/teachdatascience.com/philosophy/LAPD.png" class="img-fluid"></p>
<p>[Source: <a href="https://www.cnn.com/2019/09/12/tech/california-body-cam-facial-recognition-ban/index.html">CNN</a>]</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important questions
</div>
</div>
<div class="callout-body-container callout-body">
<p>The two main ethical concerns surrounding facial recognition software break down into</p>
<ul>
<li>How the algorithms were developed?</li>
<li>How the algorithm is used?</li>
</ul>
</div>
</div>
<p>When thinking about the questions below, reflect on the good aspects and the bad aspects and how one might weight the good versus the bad.</p>
<section id="creating-the-algorithm" class="level3">
<h3 class="anchored" data-anchor-id="creating-the-algorithm">Creating the algorithm</h3>
<ul>
<li>What data should be used to train the algorithm?
<ul>
<li>If the accuracy rates of the algorithm differ based on the demographics of the subgroups within the data, is more data and testing required?</li>
</ul></li>
<li>Who and what criteria should be used to tune the algorithm?
<ul>
<li>Who should be involved in decisions on the tuning parameters of the algorithm?</li>
<li>Which optimization criteria should be used (e.g., accuracy? false positive rate? false negative rate?)</li>
</ul></li>
<li>Issues of access:
<ul>
<li>Who should own or have control of the facial image data?
<ul>
<li>Do individuals have a right to keep their facial image private from being in databases?</li>
<li>Do individuals have a right to be notified that their facial image is in the data base? For example, if I ring someone’s doorbell and my face is captured in a database, do I need to be told? [While traditional human subjects and IRB requirements necessitate consent to be included in any research project, in most cases it is legal to photograph a person without their consent.]</li>
</ul></li>
<li>Should the data be accessible to researchers working to make the field more equitable? What if allowing accessibility thereby makes the data accessible to bad actors?</li>
</ul></li>
</ul>
</section>
<section id="using-the-algorithm" class="level3">
<h3 class="anchored" data-anchor-id="using-the-algorithm">Using the algorithm</h3>
<ul>
<li>Issues of personal impact:
<ul>
<li>The software might make it easier to accurately associate an individual with a crime, but it might also make it easier to mistakenly associate an individual with a crime. How should the pro vs con be weighed against each other?</li>
<li>Do individuals have a right to know, correct, or delete personal information included in a database?</li>
</ul></li>
<li>Issues of societal impact:
<ul>
<li>Is it permissible to use a facial recognition software which has been trained primarily on Caucasian faces, given that this results in false positive and false negative rates that are not equally dispersed across racial lines?</li>
<li>While the software might make it easier to protect against criminal activity, it also makes it easier to undermine specific communities when their members are mistakenly identified with criminal activity. How should the pro vs con of different communities be weighed against each other?</li>
</ul></li>
<li>Issues of money:
<ul>
<li>Is it permissible for a software company to profit from an algorithm while having no financial responsibility for its misuse or negative impacts?</li>
<li>Who should pay the court fees and missed work hours of those who were mistakenly accused of crimes?</li>
</ul></li>
</ul>
<p>To settle the questions above, we need to study various ethical theories, and it turns out that the different theories may lead us to different conclusions. As non-philosophers, we recognize that the suggested readings and ideas may come across as overwhelming. If you are overwhelmed, we suggest that you choose one ethical theory, think carefully about how it informs decision making, and help your students to connect the ethical framework to a data science case study.</p>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final thoughts</h2>
<p>This is a challenging topic, but as you analyze data, ask yourself the following broad questions to help you with ethical considerations around the data analysis.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions to ask yourself when analyzing data?
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Why are we producing this knowledge?</li>
<li>For whom are we producing this knowledge?</li>
<li>What communities do they serve?</li>
<li>Which stakeholders need to be involved in making decisions in and around the data analysis?</li>
</ol>
</div>
</div>
</section>
</section>
<section id="best-practices-for-sharing-data" class="level1">
<h1>Best practices for sharing data</h1>
<p>Data sharing is an essential element of the scientific method, imperative to ensure transparency and reproducibility.</p>
<p>Different areas of research collect fundamentally different types of data, such as tabular data, time series data, image data, or genomic data. These types of data differ greatly in size and require different approaches for sharing.</p>
<p>In this section, I outline broad best practices to make your data publicly accessible and usable, generally and for several specific kinds of data.</p>
<section id="fair-principles" class="level2">
<h2 class="anchored" data-anchor-id="fair-principles">FAIR principles</h2>
<p>Sharing data proves more useful when others can easily find and access, interpret, and reuse the data. To maximize the benefit of sharing your data, follow the <a href="https://www.go-fair.org/fair-principles/">findable, accessible, interoperable, and reusable (FAIR)</a> guiding principles of data sharing, which optimize reuse of generated data.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
FAIR data sharing principles
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><strong>Findable</strong>. The first step in (re)using data is to find them. Metadata and data should be easy to find for both humans and computers. Machine-readable metadata are essential for automatic discovery of datasets and services, so this is an essential component of the FAIRification process.</li>
<li><strong>Accessible</strong>. Once the user finds the required data, she/he needs to know how can they be accessed, possibly including authentication and authorization.</li>
<li><strong>Interoperable</strong>. The data usually need to be integrated with other data. In addition, the data need to interoperate with applications or workflows for analysis, storage, and processing.</li>
<li><strong>Reusable</strong>. The ultimate goal of FAIR is to optimize the reuse of data. To achieve this, metadata and data should be well-described so that they can be replicated and/or combined in different settings.</li>
</ol>
</div>
</div>
</section>
<section id="why-share" class="level2">
<h2 class="anchored" data-anchor-id="why-share">Why share?</h2>
<ol type="1">
<li><strong>Benefits of sharing data to science and society</strong>. Sharing data allows for transparency in scientific studies and allows one to fully understand what occurred in an analysis and reproduce the results. Without complete data, metadata, and information about resources used to generate the data, reproducing a study proves impossible.</li>
<li><strong>Benefits of sharing data to individual researchers</strong>. Sharing data increases the impact of a researcher’s work and reputation for sound science. Awards for those with an excellent record of <a href="https://researchsymbionts.org/">data sharing</a> or <a href="https://researchparasite.com/">data reuse</a> can exemplify this reputation.</li>
</ol>
<section id="addressing-common-concerns-about-data-sharing" class="level3">
<h3 class="anchored" data-anchor-id="addressing-common-concerns-about-data-sharing">Addressing common concerns about data sharing</h3>
<p>Despite the clear benefits of sharing data, some researchers still have concerns about doing so.</p>
<ul>
<li><strong>Novelty</strong>. Some worry that sharing data may decrease the novelty of their work and their chance to publish in prominent journals. You can address this concern by sharing your data only after publication. You can also choose to preprint your manuscript when you decide to share your data. Furthermore, you only need to share the data and metadata required to reproduce your published study.</li>
<li><strong>Time spent on sharing data</strong>. Some have concerns about the time it takes to organize and share data publicly. Many add ‘data available upon request’ to manuscripts instead of depositing the data in a public repository in hopes of getting the work out sooner. It does take time to organize data in preparation for sharing, but sharing data publicly may save you time. Sharing data in a public repository that guarantees archival persistence means that you will not have to worry about storing and backing up the data yourself.</li>
<li><strong>Human subject data</strong>. Sharing of data on human subjects requires special ethical, legal, and privacy considerations. Existing recommendations largely aim to balance the privacy of human participants with the benefits of data sharing by de-identifying human participants and obtaining consent for sharing. Sharing human data poses a variety of challenges for analysis, transparency, reproducibility, interoperability, and access.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Human data
</div>
</div>
<div class="callout-body-container callout-body">
<p>Sometimes you cannot publicly post all human data, even after de-identification. We suggest three strategies for making these data maximally accessible.</p>
<ol type="1">
<li>Deposit raw data files in a controlled-access repository. Controlled-access repositories allow only qualified researchers who apply to access the data.</li>
<li>Even if you cannot make individual-level raw data available, you can make as much processed data available as possible. This may take the form of summary statistics such as means and standard deviations, rather than individual-level data.</li>
<li>You may want to generate simulated data distinct from the original data but statistically similar to it. Simulated data would allow others to reproduce your analysis without disclosing the original data or requiring the security controls needed for controlled access.</li>
</ol>
</div>
</div>
</section>
</section>
<section id="what-data-to-share" class="level2">
<h2 class="anchored" data-anchor-id="what-data-to-share">What data to share?</h2>
<p>Depending on the data type, you might be able to share the data itself, or a summarized version of it. Boradly thought, you want to share the following:</p>
<ol type="1">
<li>The <strong>data</strong> itself, or a summarized version, or a simulated data similar to the original.</li>
<li>Any <strong>metadata</strong> to describe the primary data and the resources used to generate it. Most disciplines have specific metadata standards to follow (e.g.&nbsp;<a href="http://fged.org/projects/minseqe/">microarrays</a>).</li>
<li><strong>Data dictionary</strong>. These have crucial role in organizing your data, especially explaining the variables and their representation. Data dictionaries should provide short names for each variable, a longer text label for the variable, a definition for each variable, data type (such as floating-point number, integer, or string), measurement units, and expected minimum and maximum values. Data dictionaries can make explicit what future users would otherwise have to guess about the representation of data.</li>
<li><strong>Source code</strong>. Ideally, readers should have all materials needed to completely reproduce the study described in a publication, not just data. These materials include source code, preprocessing, and analysis scripts. Guidelines for organization of computational project can help you arrange your data and scripts in a way that will make it easier for you and other to access and reuse them.</li>
<li><strong>Licensing</strong>. Clear licensing information attached to your data avoids any questions of whether others may reuse it. Many data resources turn out not to be as reusable as the providers intended, due to lack of clarity in licensing or restrictive licensing choices.</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
How should you document your data?
</div>
</div>
<div class="callout-body-container callout-body">
<p>Document your data in three ways:</p>
<ol type="1">
<li><strong>With your manuscript</strong>.</li>
<li><strong>With description fields</strong> in the metadata collected by repositories</li>
<li><strong>With README files</strong>. README files provide abbreviated information about a collection of files (e.g.&nbsp;explain organization, file locations, observations and variables present in each file, details on the experimental design, etc).</li>
</ol>
</div>
</div>
</section>
</section>
<section id="best-practices-for-data-visualizations" class="level1">
<h1>Best practices for data visualizations</h1>
<section id="motiviation" class="level2">
<h2 class="anchored" data-anchor-id="motiviation">Motiviation</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Quote from a hero of mine
</div>
</div>
<div class="callout-body-container callout-body">
<p><em>“The greatest value of a picture is when it forces us to notice what we never expected to see.”</em> -John W. Tukey</p>
<div class="cell fig-cap-location-top" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/http:/upload.wikimedia.org/wikipedia/en/e/e9/John_Tukey.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>Mistakes, biases, systematic errors and unexpected variability are commonly found in data regardless of applications. Failure to discover these problems often leads to <strong>flawed analyses and false discoveries</strong>.</p>
<p>As an example, consider that measurement devices sometimes fail and not all summarization procedures, such as the <code>mean()</code> function in R, are designed to detect these. Yet, these functions will still give you an answer.</p>
<p>Furthermore, it may be hard or impossible to notice an error was made just from the reported summaries.</p>
<p><strong>Data visualization is a powerful approach to detecting these problems</strong>. We refer to this particular task as exploratory data analysis (EDA), coined by John Tukey.</p>
<p>On a more positive note, data visualization can also lead to discoveries which would otherwise be missed if we simply subject the data to a battery of statistical summaries or procedures.</p>
<p>When analyzing data, we often <strong>make use of exploratory plots to motivate the analyses</strong> we choose.</p>
<p>In this section, we will discuss some types of plots to avoid, better ways to visualize data, some principles to create good plots, and ways to use <code>ggplot2</code> to create <strong>expository</strong> (intended to explain or describe something) graphs.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>The following figure is from <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1665439/">Lippmann et al.&nbsp;2006</a>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/images/lippman.png" class="img-fluid figure-img" style="width:70.0%"></p>
<figcaption class="figure-caption">Nickel concentration and PM10 health effects (Blue points represent average county-level concentrations from 2000–2005 for 72 U.S. counties representing 69 communities).</figcaption>
</figure>
</div>
<p>The following figure is from <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2137127/">Dominici et al.&nbsp;2007</a>, in response to the work by Lippmann et al.&nbsp;above.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/images/dominici_ehp.png" class="img-fluid figure-img" style="width:70.0%"></p>
<figcaption class="figure-caption">Nickel concentration and PM10 health effects (with and without New York).</figcaption>
</figure>
</div>
<p>Elevated levels of Ni and V PM2.5 chemical components in New York are likely attributed to oil-fired power plants and emissions from ships burning oil, as noted by Lippmann et al.&nbsp;(2006).</p>
</div>
</div>
<section id="generating-data-visualizations" class="level3">
<h3 class="anchored" data-anchor-id="generating-data-visualizations">Generating data visualizations</h3>
<p>In order to determine the effectiveness or quality of a visualization, we need to first understand three things:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions to ask yourself when building data visualizations
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>What is the question we are trying to answer?</li>
<li>Why are we building this visualization?</li>
<li>For whom are we producing this data visualization for? Who is the intended audience to consume this visualization?</li>
</ol>
</div>
</div>
<p>No plot (or any statistical tool, really) can be judged without knowing the answers to those questions. No plot or graphic exists in a vacuum. There is always context and other surrounding factors that play a role in determining a plot’s effectiveness.</p>
<p>Conversely, <strong>high-quality, well-made visualizations</strong> usually allow one to properly deduce what question is being asked and who the audience is meant to be. A good visualization <strong>tells a complete story in a single frame</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Broad steps for creating data visualizations
</div>
</div>
<div class="callout-body-container callout-body">
<p>The act of visualizing data typically proceeds in two broad steps:</p>
<ol type="1">
<li>Given the question and the audience, <strong>what type of plot should I make?</strong></li>
<li>Given the plot I intend to make, <strong>how can I optimize it for clarity and effectiveness?</strong></li>
</ol>
</div>
</div>
</section>
</section>
<section id="data-viz-principles" class="level2">
<h2 class="anchored" data-anchor-id="data-viz-principles">Data viz principles</h2>
<section id="developing-plots" class="level3">
<h3 class="anchored" data-anchor-id="developing-plots">Developing plots</h3>
<p>Initially, one must decide what information should be presented. The following principles for developing analytic graphics come from Edward Tufte’s book <a href="https://www.edwardtufte.com/tufte/books_be"><em>Beautiful Evidence</em></a>.</p>
<ol type="1">
<li>Show comparisons</li>
<li>Show causality, mechanism, explanation</li>
<li>Show multivariate data</li>
<li>Integrate multiple modes of evidence</li>
<li>Describe and document the evidence</li>
<li>Content is king - good plots start with good questions</li>
</ol>
</section>
<section id="optimizing-plots" class="level3">
<h3 class="anchored" data-anchor-id="optimizing-plots">Optimizing plots</h3>
<ol type="1">
<li>Maximize the data/ink ratio – if “ink” can be removed without reducing the information being communicated, then it should be removed.</li>
<li>Maximize the range of perceptual conditions – your audience’s perceptual abilities may not be fully known, so it’s best to allow for a wide range, to the extent possible (or knowable).</li>
<li>Show variation in the <strong>data</strong>, not variation in the <strong>design</strong>.</li>
</ol>
<p>What’s sub-optimal about this plot?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> airquality <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Summer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(Month <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(d, {</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(Temp, Ozone, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(Summer), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frame.plot =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">legend</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topleft"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bty =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>,</span>
<span id="cb1-6">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Summer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Non-Summer"</span>))</span>
<span id="cb1-7">})</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>What’s sub-optimal about this plot?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">airquality <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Summer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(Month <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>), </span>
<span id="cb2-3">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Summer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Non-Summer"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(Temp, Ozone)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> Summer), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Some of these principles are taken from Edward Tufte’s <em>Visual Display of Quantitative Information</em>:</p>
</section>
</section>
<section id="plots-to-avoid" class="level2">
<h2 class="anchored" data-anchor-id="plots-to-avoid">Plots to Avoid</h2>
<p>This section is based on a talk by <a href="http://kbroman.org/">Karl W. Broman</a> titled “How to Display Data Badly,” in which he described how the default plots offered by Microsoft Excel “obscure your data and annoy your readers” (<a href="https://kbroman.org/talks.html">here</a> is a link to a collection of Karl Broman’s talks).</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
FYI
</div>
</div>
<div class="callout-body-container callout-body">
<p>Karl’s lecture was inspired by the 1984 paper by H. Wainer: How to display data badly. American Statistician 38(2): 137–147.</p>
<p>Dr.&nbsp;Wainer was the first to elucidate the principles of the bad display of data.</p>
<p>However, according to Karl Broman, “The now widespread use of Microsoft Excel has resulted in remarkable advances in the field.”</p>
<p>Here we show examples of “bad plots” and how to improve them in R.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Some general principles of <em>bad</em> plots
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Display as little information as possible.</li>
<li>Obscure what you do show (with chart junk).</li>
<li>Use pseudo-3D and color gratuitously.</li>
<li>Make a pie chart (preferably in color and 3D).</li>
<li>Use a poorly chosen scale.</li>
<li>Ignore significant figures.</li>
</ul>
</div>
</div>
</section>
<section id="examples" class="level2">
<h2 class="anchored" data-anchor-id="examples">Examples</h2>
<p>Here are some examples of bad plots and suggestions on how to improve</p>
<section id="pie-charts" class="level3">
<h3 class="anchored" data-anchor-id="pie-charts">Pie charts</h3>
<p>Let’s say we are interested in the most commonly used browsers. Wikipedia has a <a href="https://en.wikipedia.org/wiki/Usage_share_of_web_browsers">table</a> with the “usage share of web browsers” or the proportion of visitors to a group of web sites that use a particular web browser from July 2017.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">browsers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Chrome=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Safari=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UCBrowser=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,</span>
<span id="cb3-2">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Firefox=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Opera=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">IE=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Noinfo=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb3-3">browsers.df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gather</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(browsers)), </span>
<span id="cb3-4">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"browser"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"proportion"</span>) </span></code></pre></div>
</div>
<p>Let’s say we want to report the results of the usage. The standard way of displaying these is with a pie chart:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pie</span>(browsers,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Browser Usage (July 2022)"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>If we look at the help file for <code>pie()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">?pie</span></code></pre></div>
</div>
<p>It states:</p>
<blockquote class="blockquote">
<p>“Pie charts are a very bad way of displaying information. The eye is good at judging linear measures and bad at judging relative areas. A bar chart or dot chart is a preferable way of displaying this type of data.”</p>
</blockquote>
<p>To see this, look at the figure above and try to determine the percentages just from looking at the plot. Unless the percentages are close to 25%, 50% or 75%, this is not so easy. Simply showing the numbers is not only clear, but also saves on printing costs.</p>
<section id="instead-of-pie-charts-try-bar-plots" class="level4">
<h4 class="anchored" data-anchor-id="instead-of-pie-charts-try-bar-plots">Instead of pie charts, try bar plots</h4>
<p>If you do want to plot them, then a barplot is appropriate. Here we use the <code>geom_bar()</code> function in <code>ggplot2</code>. Note, there are also horizontal lines at every multiple of 10, which helps the eye quickly make comparisons across:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> browsers.df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb6-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reorder</span>(browser, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>proportion), </span>
<span id="cb6-3">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y=</span>proportion)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identity"</span>)</span>
<span id="cb6-5">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice that we can now pretty easily determine the percentages by following a horizontal line to the x-axis.</p>
</section>
<section id="polish-your-plots" class="level4">
<h4 class="anchored" data-anchor-id="polish-your-plots">Polish your plots</h4>
<p>While this figure is already a big improvement over a pie chart, we can do even better. When you create figures, you want your figures to be self-sufficient, meaning someone looking at the plot can understand everything about it.</p>
<p>Some possible critiques are:</p>
<ol type="1">
<li>make the axes bigger</li>
<li>make the labels bigger</li>
<li>make the labels be full names (e.g.&nbsp;“Browser” and “Proportion of users”, ideally with units when appropriate)</li>
<li>add a title</li>
</ol>
<p>Let’s explore how to do these things to make an even better figure.</p>
<p>To start, go to the help file for <code>theme()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">?ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>theme</span></code></pre></div>
</div>
<p>We see there are arguments with text that control all the text sizes in the plot. If you scroll down, you see the text argument in the theme command requires class <code>element_text</code>. Let’s try it out.</p>
<p>To change the x-axis and y-axis labels to be full names, use <code>xlab()</code> and <code>ylab()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Browser"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Proportion of Users"</span>)</span>
<span id="cb8-3">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Maybe a title</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Browser Usage (July 2022)"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Next, we can also use the <code>theme()</code> function in <code>ggplot2</code> to control the justifications and sizes of the axes, labels and titles.</p>
<p>To center the title</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Browser Usage (July 2022)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>To create bigger text/labels/titles:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Browser Usage (July 2022)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb11-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span>
<span id="cb11-4">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="i-dont-like-that-theme" class="level4">
<h4 class="anchored" data-anchor-id="i-dont-like-that-theme">“I don’t like that theme”</h4>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_classic</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># axis lines!</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_base</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="d-barplots" class="level3">
<h3 class="anchored" data-anchor-id="d-barplots">3D barplots</h3>
<p>Please, avoid a 3D version because it obfuscates the plot, making it more difficult to find the percentages by eye.</p>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/https:/raw.githubusercontent.com/kbroman/Talk_Graphs/master/Figs/fig2b.png" class="img-fluid"></p>
</section>
<section id="donut-plots" class="level3">
<h3 class="anchored" data-anchor-id="donut-plots">Donut plots</h3>
<p>Even worse than pie charts are donut plots.</p>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/http:/upload.wikimedia.org/wikipedia/commons/thumb/1/11/Donut-Chart.svg/360px-Donut-Chart.svg.png" class="img-fluid"></p>
<p>The reason is that by removing the center, we remove one of the visual cues for determining the different areas: the angles. <strong>There is no reason to ever use a donut plot to display data</strong>.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why are pie/donut charts <a href="https://blog.usejournal.com/why-humans-love-pie-charts-9cd346000bdc">so common</a>?</p>
<p><a href="https://blog.usejournal.com/why-humans-love-pie-charts-9cd346000bdc" class="uri">https://blog.usejournal.com/why-humans-love-pie-charts-9cd346000bdc</a></p>
</div>
</div>
</section>
<section id="barplots-as-data-summaries" class="level3">
<h3 class="anchored" data-anchor-id="barplots-as-data-summaries">Barplots as data summaries</h3>
<p>While barplots are useful for showing percentages, they are incorrectly used to display data from two groups being compared. Specifically, barplots are created with height equal to the group means; an antenna is added at the top to represent standard errors. This plot is simply showing two numbers per group and the plot adds nothing:</p>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/https:/raw.githubusercontent.com/kbroman/Talk_Graphs/master/Figs/fig1c.png" class="img-fluid"></p>
<section id="instead-of-bar-plots-for-summaries-try-box-plots" class="level4">
<h4 class="anchored" data-anchor-id="instead-of-bar-plots-for-summaries-try-box-plots">Instead of bar plots for summaries, try box plots</h4>
<p>If the number of points is small enough, we might as well add them to the plot. When the number of points is too large for us to see them, just showing a boxplot is preferable.</p>
<p>Let’s recreate these barplots as boxplots and overlay the points. We will simulate similar data to demonstrate one way to improve the graphic above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb16-2">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Treatment"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), </span>
<span id="cb16-3">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Control"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb16-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gather</span>(dat, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(type, response)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jitter'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Response to drug treatment"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice how much more we see here: the center, spread, range, and the points themselves. In the barplot, we only see the mean and the standard error (SE), and the SE has more to do with sample size than with the spread of the data.</p>
<p>This problem is magnified when our data has outliers or very large tails. For example, in the plot below, there appears to be very large and consistent differences between the two groups:</p>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/https:/raw.githubusercontent.com/kbroman/Talk_Graphs/master/Figs/fig3c.png" class="img-fluid"></p>
<p>However, a quick look at the data demonstrates that this difference is mostly driven by just two points.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb17-2">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Treatment"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgamma</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb17-3">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Control"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgamma</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>))</span>
<span id="cb17-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gather</span>(dat, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb17-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(type, response)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jitter'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="use-log-scale-if-data-includes-outliers" class="level4">
<h4 class="anchored" data-anchor-id="use-log-scale-if-data-includes-outliers">Use log scale if data includes outliers</h4>
<p>A version showing the data in the log-scale is much more informative.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gather</span>(dat, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(type, response)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb18-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jitter'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb18-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_log10</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="barplots-for-paired-data" class="level3">
<h3 class="anchored" data-anchor-id="barplots-for-paired-data">Barplots for paired data</h3>
<p>A common task in data analysis is the comparison of two groups. When the dataset is small and data are paired, such as the outcomes before and after a treatment, two-color barplots are unfortunately often used to display the results.</p>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/https:/raw.githubusercontent.com/kbroman/Talk_Graphs/master/Figs/fig6r_e.png" class="img-fluid"></p>
<section id="instead-of-paired-bar-plots-try-scatter-plots" class="level4">
<h4 class="anchored" data-anchor-id="instead-of-paired-bar-plots-try-scatter-plots">Instead of paired bar plots, try scatter plots</h4>
<p>There are better ways of showing these data to illustrate that there is an increase after treatment. One is to simply make a scatter plot, which shows that most points are above the identity line. Another alternative is to plot the differences against the before values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb19-2">before <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb19-3">after <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, before<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb19-4">li <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(before, after))</span>
<span id="cb19-5">ymx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(after<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>before))</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb19-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(before, after, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Before"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After"</span>,</span>
<span id="cb19-9">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim=</span>li, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim=</span>li)</span>
<span id="cb19-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-11"></span>
<span id="cb19-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(before, after<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>before, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Before"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>ymx, ymx),</span>
<span id="cb19-13">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Change (After - Before)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb19-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="or-line-plots" class="level4">
<h4 class="anchored" data-anchor-id="or-line-plots">or line plots</h4>
<p>Line plots are not a bad choice, although they can be harder to follow than the previous two. Boxplots show you the increase, but lose the paired information.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb20-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(z, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(before, after),</span>
<span id="cb20-4">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xaxt=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Response"</span>,</span>
<span id="cb20-5">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>))</span>
<span id="cb20-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">axis</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">side=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Before"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After"</span>))</span>
<span id="cb20-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">segments</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), before, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), after, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)     </span>
<span id="cb20-8"></span>
<span id="cb20-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(before,after,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Before"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After"</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Response"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="gratuitous-3d" class="level3">
<h3 class="anchored" data-anchor-id="gratuitous-3d">Gratuitous 3D</h3>
<p>The figure below shows three curves. Pseudo 3D is used, but it is not clear why. Maybe to separate the three curves? Notice how difficult it is to determine the values of the curves at any given point:</p>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/https:/raw.githubusercontent.com/kbroman/Talk_Graphs/master/Figs/fig8b.png" class="img-fluid"></p>
<p>This plot can be made better by simply using color to distinguish the three lines:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/kbroman/Talk_Graphs/raw/master/R/fig8dat.csv"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.name_repair =</span> make.names)</span>
<span id="cb21-3"></span>
<span id="cb21-4">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gather</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drug"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"proportion"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>log.dose) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>log.dose, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y=</span>proportion,</span>
<span id="cb21-7">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color=</span>drug)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span>
<span id="cb21-9">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This plot demonstrates that using color is more than enough to distinguish the three lines.</p>
<p>We can make this plot better using the functions we learned above</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Survival proportion"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb22-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb22-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<section id="legends" class="level4">
<h4 class="anchored" data-anchor-id="legends">Legends</h4>
<p>We can also move the legend inside the plot</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Survival proportion"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb23-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), </span>
<span id="cb23-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-25-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We can also make the legend transparent</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">transparent_legend <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb24-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transparent"</span>),</span>
<span id="cb24-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.key =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transparent"</span>, </span>
<span id="cb24-4">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transparent"</span>))</span>
<span id="cb24-5"></span>
<span id="cb24-6">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Survival proportion"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb24-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb24-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), </span>
<span id="cb24-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb24-10">  transparent_legend</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-26-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="too-many-significant-digits" class="level3">
<h3 class="anchored" data-anchor-id="too-many-significant-digits">Too many significant digits</h3>
<p>By default, statistical software like R returns many significant digits. This does not mean we should report them. Cutting and pasting directly from R is a bad idea since you might end up showing a table, such as the one below, comparing the heights of basketball players:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">heights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">73</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">73</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb25-2">                 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb25-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(heights)<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SG"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PG"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PF"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SF"</span>)</span>
<span id="cb25-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(heights)<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"team"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb25-5">heights</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             SG       PG        C       PF       SF
team 1 68.88065 73.07480 81.80948 76.60455 82.23521
team 2 70.05272 66.86024 74.64847 72.70140 78.55640
team 3 71.33653 73.63946 81.00483 78.56787 77.86893
team 4 73.36414 81.01021 81.68293 76.90146 77.35226
team 5 72.63738 69.31895 83.66281 81.17280 82.39133
team 6 68.99188 75.50274 79.36564 75.77514 78.68900
team 7 73.51017 74.59772 82.09829 73.95492 78.32287
team 8 73.46524 71.05953 77.88069 76.44808 73.86569</code></pre>
</div>
</div>
<p>We are reporting precision up to 0.00001 inches. Do you know of a tape measure with that much precision? This can be easily remedied:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(heights,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         SG   PG    C   PF   SF
team 1 68.9 73.1 81.8 76.6 82.2
team 2 70.1 66.9 74.6 72.7 78.6
team 3 71.3 73.6 81.0 78.6 77.9
team 4 73.4 81.0 81.7 76.9 77.4
team 5 72.6 69.3 83.7 81.2 82.4
team 6 69.0 75.5 79.4 75.8 78.7
team 7 73.5 74.6 82.1 74.0 78.3
team 8 73.5 71.1 77.9 76.4 73.9</code></pre>
</div>
</div>
</section>
<section id="minimal-figure-captions" class="level3">
<h3 class="anchored" data-anchor-id="minimal-figure-captions">Minimal figure captions</h3>
<p>Recall the plot we had before:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">transparent_legend <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb29-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transparent"</span>),</span>
<span id="cb29-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.key =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transparent"</span>, </span>
<span id="cb29-4">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transparent"</span>))</span>
<span id="cb29-5"></span>
<span id="cb29-6">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Survival proportion"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb29-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), </span>
<span id="cb29-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dose (mg)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-11">  transparent_legend</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index_files/figure-html/unnamed-chunk-29-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>What type of caption would be good here?</p>
<p>When creating figure captions, think about the following:</p>
<ol type="1">
<li>Be specific</li>
</ol>
<blockquote class="blockquote">
<p>A plot of the proportion of patients who survived after three drug treatments.</p>
</blockquote>
<ol start="2" type="1">
<li>Label the caption</li>
</ol>
<blockquote class="blockquote">
<p>Figure 1. A plot of the proportion of patients who survived after three drug treatments.</p>
</blockquote>
<ol start="3" type="1">
<li>Tell a story</li>
</ol>
<blockquote class="blockquote">
<p>Figure 1. Drug treatment survival. A plot of the proportion of patients who survived after three drug treatments.</p>
</blockquote>
<ol start="4" type="1">
<li>Include units</li>
</ol>
<blockquote class="blockquote">
<p>Figure 1. Drug treatment survival. A plot of the proportion of patients who survived after three drug treatments (milligram).</p>
</blockquote>
<ol start="5" type="1">
<li>Explain aesthetics</li>
</ol>
<blockquote class="blockquote">
<p>Figure 1. Drug treatment survival. A plot of the proportion of patients who survived after three drug treatments (milligram). Three colors represent three drug treatments. Drug A results in largest survival proportion for the larger drug doses.</p>
</blockquote>
</section>
</section>
<section id="final-thoughts-data-viz" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts-data-viz">Final thoughts data viz</h2>
<p>In general, you should follow these principles:</p>
<ul>
<li><p>Create expository graphs to tell a story (figure and caption should be self-sufficient; it’s the first thing people look at)</p>
<ul>
<li>Be accurate and clear</li>
<li>Let the data speak</li>
<li>Make axes, labels and titles big</li>
<li>Make labels full names (ideally with units when appropriate)</li>
<li>Add informative legends; use space effectively</li>
</ul></li>
<li><p>Show as much information as possible, taking care not to obscure the message</p></li>
<li><p>Science not sales: avoid unnecessary frills (especially gratuitous 3D)</p></li>
<li><p>In tables, every digit should be meaningful</p></li>
</ul>
<section id="some-further-reading" class="level3">
<h3 class="anchored" data-anchor-id="some-further-reading">Some further reading</h3>
<ul>
<li>N Cross (2011). Design Thinking: Understanding How Designers Think and Work. Bloomsbury Publishing.</li>
<li>J Tukey (1977). Exploratory Data Analysis.</li>
<li>ER Tufte (1983) The visual display of quantitative information. Graphics Press.</li>
<li>ER Tufte (1990) Envisioning information. Graphics Press.</li>
<li>ER Tufte (1997) Visual explanations. Graphics Press.</li>
<li>ER Tufte (2006) Beautiful Evidence. Graphics Press.</li>
<li>WS Cleveland (1993) Visualizing data. Hobart Press.</li>
<li>WS Cleveland (1994) The elements of graphing data. CRC Press.</li>
<li>A Gelman, C Pasarica, R Dodhia (2002) Let’s practice what we preach: Turning tables into graphs. The American Statistician 56:121-130.</li>
<li>NB Robbins (2004) Creating more effective graphs. Wiley.</li>
<li><a href="http://bang.clearscience.info/?p=546">Nature Methods columns</a></li>
</ul>


</section>
</section>
</section>

 ]]></description>
  <category>module 6</category>
  <category>week 8</category>
  <category>best practices</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-18-best-practices-data-analyses/index.html</guid>
  <pubDate>Tue, 18 Oct 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Tidytext and sentiment analysis</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-13-working-with-text-sentiment-analysis/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://www.tidytextmining.com/">Text mining with R: A Tidy Approach</a> from Julia Silge and David Robinson which uses the <a href="https://github.com/juliasilge/tidytext"><code>tidytext</code></a> R package</li>
<li><a href="https://smltar.com/preface.html">Supervised Machine Learning for Text Analsyis in R</a> from Emil Hvitfeldt, Julia Sigle</li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Learn about what is is meant by “tidy text” data</li>
<li>Know the fundamentals of the <code>tidytext</code> R package to create tidy text data</li>
<li>Know the fundamentals of sentiment analysis</li>
</ul>
</div>
</div>
</section>
<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>Analyzing text data such as Twitter content, books or news articles is commonly performed in data science.</p>
<p>In this lecture, we will be asking the following questions:</p>
<ol type="1">
<li>Which are the <strong>most commonly used words</strong> from Jane Austen’s novels?</li>
<li>Which are the <strong>most positive</strong> or <strong>negative words</strong>?</li>
<li>How does the <strong>sentiment</strong> (e.g.&nbsp;positive vs negative) of the text change across each novel?</li>
</ol>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-13-working-with-text-sentiment-analysis/https:/images-na.ssl-images-amazon.com/images/I/A1YUH7-W5AL.jpg" class="img-fluid" data-preview="TRUE"></p>
<p>[<a href="https://images-na.ssl-images-amazon.com/images/I/A1YUH7-W5AL.jpg">image source</a>]</p>
<p>To answer these questions, we will need to learn about a few things. Specifically,</p>
<ol type="1">
<li>How to <strong>convert words in documents</strong> to a <strong>tidy text</strong> format using the <code>tidytext</code> R package.</li>
<li>A little bit about <a href="https://www.tidytextmining.com/sentiment.html">sentiment analysis</a>.</li>
</ol>
</section>
<section id="tidy-text" class="level1">
<h1>Tidy text</h1>
<p>In previous lectures, you have learned about the <strong>tidy data principles</strong> and the <code>tidyverse</code> R packages as a way to make handling data easier and more effective.</p>
<p>These packages depend on <strong>data being formatted in a particular way</strong>.</p>
<p>The idea with tidy text is to <strong>treat text as data frames of individual words</strong> and <strong>apply the same tidy data principles</strong> to make text mining tasks easier and consistent with already developed tools.</p>
<p>First let’s recall what a <strong>tidy</strong> data format means.</p>
<section id="what-is-a-tidy-format" class="level3">
<h3 class="anchored" data-anchor-id="what-is-a-tidy-format">What is a <strong>tidy</strong> format?</h3>
<p>First, the <a href="https://www.tidyverse.org">tidyverse</a> is</p>
<blockquote class="blockquote">
<p>“an opinionated collection of R packages designed for data science. All packages share an underlying philosophy and common APIs.”</p>
</blockquote>
<p>Another way of putting it is that it is a <strong>set of packages</strong> that are useful specifically for data manipulation, exploration and visualization <strong>with a common philosophy</strong>.</p>
</section>
<section id="what-is-this-common-philosphy" class="level3">
<h3 class="anchored" data-anchor-id="what-is-this-common-philosphy">What is this common philosphy?</h3>
<p>The common philosophy is called <strong>“tidy” data</strong>.</p>
<p>It is a standard way of mapping the meaning of a dataset to its structure.</p>
<p>In <strong>tidy</strong> data:</p>
<ul>
<li>Each variable forms a column.</li>
<li>Each observation forms a row.</li>
<li>Each type of observational unit forms a table.</li>
</ul>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-13-working-with-text-sentiment-analysis/http:/r4ds.had.co.nz/images/tidy-1.png" class="img-fluid" style="width:95.0%"></p>
</div>
</div>
<p>[<a href="http://r4ds.had.co.nz">img source</a>]</p>
<p>Working with <strong>tidy data is useful</strong> because it creates a structured way of organizing data values within a data set.</p>
<p>This makes the data analysis process more efficient and simplifies the development of data analysis tools that work together.</p>
<p>In this way, you can focus on the problem you are investigating, rather than the uninteresting logistics of data.</p>
</section>
<section id="what-is-a-tidy-text-format" class="level3">
<h3 class="anchored" data-anchor-id="what-is-a-tidy-text-format">What is a <strong>tidy text</strong> format?</h3>
<p>When dealing with <strong>text</strong> data, the <strong>tidy text</strong> format is defined as a table <strong>with one-token-per-row</strong>, where a <strong>token</strong> is a meaningful unit of text (e.g.&nbsp;a word, pair of words, sentence, paragraph, etc).</p>
<p>Using a <strong>given set of token</strong>, we can <strong>tokenize</strong> text, or <strong>split the text into the defined tokens of interest along the rows</strong>.</p>
<p>We will learn more about how to do this using functions in the <a href="https://github.com/juliasilge/tidytext"><code>tidytext</code></a> R package.</p>
<p>In contrast, other data structures that are commonly used to store text data in text mining applications:</p>
<ul>
<li><strong>string</strong>: text can, of course, be stored as strings, i.e., character vectors, within R, and often text data is first read into memory in this form.</li>
<li><strong>corpus</strong>: these types of objects typically contain raw strings annotated with additional metadata and details.</li>
<li><strong>document-term matrix</strong>: This is a sparse matrix describing a collection (i.e., a corpus) of documents with one row for each document and one column for each term. The value in the matrix is typically word count.</li>
</ul>
<p>I won’t describing these other formats in greater detail, but encourage you to read about them if interested in this topic.</p>
</section>
<section id="why-is-this-format-useful" class="level3">
<h3 class="anchored" data-anchor-id="why-is-this-format-useful">Why is this format useful?</h3>
<p>One of the biggest advantages of transforming text data to the tidy text format is that it allows data to transition smoothly between other packages that adhere to the <code>tidyverse</code> framework (e.g.&nbsp;<code>ggplot2</code>, <code>dplyr</code>, etc).</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-13-working-with-text-sentiment-analysis/https:/www.tidytextmining.com/images/tmwr_0101.png" class="img-fluid figure-img" style="width:90.0%"></p>
<figcaption class="figure-caption">A flowchart of a typical text analysis using tidy data principles.</figcaption>
</figure>
</div>
</div>
</div>
<p>[<a href="https://www.tidytextmining.com/images/tmwr_0101.png">image source</a>]</p>
<p>In addition, a user can transition between the tidy text format for e.g data visualization with <code>ggplot2</code>, but then also convert data to other data structures (e.g.&nbsp;document-term matrix) that is commonly used in machine learning applications.</p>
</section>
<section id="how-does-it-work" class="level3">
<h3 class="anchored" data-anchor-id="how-does-it-work">How does it work?</h3>
<p>The main workhorse function in the <code>tidytext</code> R package to tokenize text a data frame is the <code>unnest_tokens(tbl, output, input)</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">?unnest_tokens</span></code></pre></div>
</div>
<p>In addition to the tibble or data frame (<code>tbl</code>), the function needs two basic arguments:</p>
<ol type="1">
<li><code>output</code> or the output column name that will be created (e.g.&nbsp;string) as the text is unnested into it</li>
<li><code>input</code> or input column name that the text comes from and gets split</li>
</ol>
<p>Let’s try out the <code>unnest_tokens()</code> function using the first paragraph in the preface of Roger Peng’s <a href="https://leanpub.com/rprogramming">R Programming for Data Science</a> book.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/images/peng_preface.png" class="img-fluid figure-img" style="width:90.0%"></p>
<figcaption class="figure-caption">Preface from R Programming for Data Science</figcaption>
</figure>
</div>
</div>
</div>
<p>To make this easier, I typed this text into a vector of character strings: one string per sentence.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">peng_preface <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I started using R in 1998 when I was a college undergraduate working on my senior thesis."</span>, </span>
<span id="cb2-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The version was 0.63."</span>,  </span>
<span id="cb2-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I was an applied mathematics major with a statistics concentration and I was working with Dr. Nicolas Hengartner on an analysis of word frequencies in classic texts (Shakespeare, Milton, etc.)."</span>, </span>
<span id="cb2-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The idea was to see if we could identify the authorship of each of the texts based on how frequently they used certain words."</span>, </span>
<span id="cb2-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We downloaded the data from Project Gutenberg and used some basic linear discriminant analysis for the modeling."</span>,</span>
<span id="cb2-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The work was eventually published and was my first ever peer-reviewed publication."</span>, </span>
<span id="cb2-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I guess you could argue it was my first real 'data science' experience."</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10">peng_preface</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "I started using R in 1998 when I was a college undergraduate working on my senior thesis."                                                                                                        
[2] "The version was 0.63."                                                                                                                                                                            
[3] "I was an applied mathematics major with a statistics concentration and I was working with Dr. Nicolas Hengartner on an analysis of word frequencies in classic texts (Shakespeare, Milton, etc.)."
[4] "The idea was to see if we could identify the authorship of each of the texts based on how frequently they used certain words."                                                                    
[5] "We downloaded the data from Project Gutenberg and used some basic linear discriminant analysis for the modeling."                                                                                 
[6] "The work was eventually published and was my first ever peer-reviewed publication."                                                                                                               
[7] "I guess you could argue it was my first real 'data science' experience."                                                                                                                          </code></pre>
</div>
</div>
<p>Turns out Roger performed a similar analysis as an undergraduate student!</p>
<p>He goes to say that back then no one was using R (but a little bit of something called S-PLUS), so I can only imagine how different it was to accomplish a task like the one we are going to do today compared to when he was an undergraduate.</p>
<p>Next, we load a few R packages</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidytext) <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## needs to be installed</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(janeaustenr) <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## needs to be installed</span></span></code></pre></div>
</div>
<p>Then, we use the <code>tibble()</code> function to construct a data frame with two columns: one counting the line number and one from the character strings in <code>peng_preface</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">peng_preface_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">line=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, </span>
<span id="cb5-2">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text=</span>peng_preface)</span>
<span id="cb5-3">peng_preface_df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 2
   line text                                                                    
  &lt;int&gt; &lt;chr&gt;                                                                   
1     1 I started using R in 1998 when I was a college undergraduate working on…
2     2 The version was 0.63.                                                   
3     3 I was an applied mathematics major with a statistics concentration and …
4     4 The idea was to see if we could identify the authorship of each of the …
5     5 We downloaded the data from Project Gutenberg and used some basic linea…
6     6 The work was eventually published and was my first ever peer-reviewed p…
7     7 I guess you could argue it was my first real 'data science' experience. </code></pre>
</div>
</div>
</section>
<section id="text-mining-and-tokens" class="level3">
<h3 class="anchored" data-anchor-id="text-mining-and-tokens">Text Mining and Tokens</h3>
<p>Next, we will use the <code>unnest_tokens()</code> function where we will call the output column to be created <code>word</code> and the input column <code>text</code> from the <code>peng_preface_df</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">peng_token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb7-2">  peng_preface_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> word, </span>
<span id="cb7-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> text, </span>
<span id="cb7-5">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"words"</span>)</span>
<span id="cb7-6"></span>
<span id="cb7-7">peng_token <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
   line word   
  &lt;int&gt; &lt;chr&gt;  
1     1 i      
2     1 started
3     1 using  
4     1 r      
5     1 in     
6     1 1998   </code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">peng_token <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
   line word      
  &lt;int&gt; &lt;chr&gt;     
1     7 my        
2     7 first     
3     7 real      
4     7 data      
5     7 science   
6     7 experience</code></pre>
</div>
</div>
<p>The argument <code>token="words"</code> <strong>defines the unit for tokenization</strong>.</p>
<p>The default is <code>"words"</code>, but there are lots of other options.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>We could tokenize by <code>"characters"</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">peng_preface_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(word, </span>
<span id="cb11-3">                text, </span>
<span id="cb11-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"characters"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
   line word 
  &lt;int&gt; &lt;chr&gt;
1     1 i    
2     1 s    
3     1 t    
4     1 a    
5     1 r    
6     1 t    </code></pre>
</div>
</div>
</div>
</div>
<p>or something called <a href="https://en.wikipedia.org/wiki/N-gram">ngrams</a>, which is defined by Wikipedia as a <em>“contiguous sequence of n items from a given sample of text or speech”</em></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">peng_preface_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(word,</span>
<span id="cb13-3">                text, </span>
<span id="cb13-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ngrams"</span>, </span>
<span id="cb13-5">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
   line word           
  &lt;int&gt; &lt;chr&gt;          
1     1 i started using
2     1 started using r
3     1 using r in     
4     1 r in 1998      
5     1 in 1998 when   
6     1 1998 when i    </code></pre>
</div>
</div>
<p>Another option is to use the <code>character_shingles</code> option, which is similar to tokenizing like <code>ngrams</code>, except the units are characters instead of words.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">peng_preface_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(word, </span>
<span id="cb15-3">                text, </span>
<span id="cb15-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character_shingles"</span>,</span>
<span id="cb15-5">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
   line word 
  &lt;int&gt; &lt;chr&gt;
1     1 ista 
2     1 star 
3     1 tart 
4     1 arte 
5     1 rted 
6     1 tedu </code></pre>
</div>
</div>
<p>You can also <strong>create custom functions</strong> for tokenization.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">peng_preface_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(word, </span>
<span id="cb17-3">                text, </span>
<span id="cb17-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>str_split,</span>
<span id="cb17-5">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
   line word   
  &lt;int&gt; &lt;chr&gt;  
1     1 i      
2     1 started
3     1 using  
4     1 r      
5     1 in     
6     1 1998   </code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s tokenize the first four sentences of <a href="https://www.nytimes.com/2021/01/19/books/amanda-gorman-inauguration-hill-we-climb.html">Amanda Gorman’s <em>The Hill We Climb</em></a> by words.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">gorman_hill_we_climb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"When day comes we ask ourselves, where can we find light in this neverending shade?"</span>,</span>
<span id="cb19-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The loss we carry, a sea we must wade."</span>, </span>
<span id="cb19-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We’ve braved the belly of the beast, we’ve learned that quiet isn’t always peace and the norms and notions of what just is, isn’t always justice."</span>,</span>
<span id="cb19-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"And yet the dawn is ours before we knew it, somehow we do it, somehow we’ve weathered and witnessed a nation that isn’t broken but simply unfinished."</span>)</span>
<span id="cb19-6"></span>
<span id="cb19-7">hill_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">line=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(gorman_hill_we_climb), </span>
<span id="cb19-8">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text=</span>gorman_hill_we_climb)</span>
<span id="cb19-9">hill_df </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
   line text                                                                    
  &lt;int&gt; &lt;chr&gt;                                                                   
1     1 When day comes we ask ourselves, where can we find light in this nevere…
2     2 The loss we carry, a sea we must wade.                                  
3     3 We’ve braved the belly of the beast, we’ve learned that quiet isn’t alw…
4     4 And yet the dawn is ours before we knew it, somehow we do it, somehow w…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">### try it out</span></span></code></pre></div>
</div>
</div>
</div>
</section>
</section>
<section id="example-text-from-works-of-jane-austen" class="level1">
<h1>Example: text from works of Jane Austen</h1>
<p>We will use the text from six published novels from Jane Austen, which are available in the <a href="https://cran.r-project.org/web/packages/janeaustenr/index.html"><code>janeaustenr</code></a> R package. The <a href="https://www.tidytextmining.com/tidytext.html#tidyausten">authors</a> describe the format:</p>
<blockquote class="blockquote">
<p>“The package provides the text in a one-row-per-line format, where a line is this context is analogous to a literal printed line in a physical book.</p>
<p>The package contains:</p>
<ul>
<li><code>sensesensibility</code>: Sense and Sensibility, published in 1811</li>
<li><code>prideprejudice</code>: Pride and Prejudice, published in 1813</li>
<li><code>mansfieldpark</code>: Mansfield Park, published in 1814</li>
<li><code>emma</code>: Emma, published in 1815</li>
<li><code>northangerabbey</code>: Northanger Abbey, published posthumously in 1818</li>
<li><code>persuasion</code>: Persuasion, also published posthumously in 1818</li>
</ul>
<p>There is also a function <code>austen_books()</code> that returns a tidy data frame of all 6 novels.”</p>
</blockquote>
<p>Let’s load in the text from <code>prideprejudice</code> and look at how the data are stored.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(janeaustenr)</span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(prideprejudice, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "PRIDE AND PREJUDICE"                                                        
 [2] ""                                                                           
 [3] "By Jane Austen"                                                             
 [4] ""                                                                           
 [5] ""                                                                           
 [6] ""                                                                           
 [7] "Chapter 1"                                                                  
 [8] ""                                                                           
 [9] ""                                                                           
[10] "It is a truth universally acknowledged, that a single man in possession"    
[11] "of a good fortune, must be in want of a wife."                              
[12] ""                                                                           
[13] "However little known the feelings or views of such a man may be on his"     
[14] "first entering a neighbourhood, this truth is so well fixed in the minds"   
[15] "of the surrounding families, that he is considered the rightful property"   
[16] "of some one or other of their daughters."                                   
[17] ""                                                                           
[18] "\"My dear Mr. Bennet,\" said his lady to him one day, \"have you heard that"
[19] "Netherfield Park is let at last?\""                                         
[20] ""                                                                           </code></pre>
</div>
</div>
<p>We see each line is in a character vector with elements of about 70 characters.</p>
<p>Similar to what we did above with Roger’s preface, we can</p>
<ul>
<li>Turn the text of character strings into a data frame and then</li>
<li>Convert it into a one-row-per-line dataframe using the <code>unnest_tokens()</code> function</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">pp_book_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> prideprejudice) </span>
<span id="cb24-2">  </span>
<span id="cb24-3">pp_book_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> word, </span>
<span id="cb24-5">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> text, </span>
<span id="cb24-6">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"words"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 122,204 × 1
   word     
   &lt;chr&gt;    
 1 pride    
 2 and      
 3 prejudice
 4 by       
 5 jane     
 6 austen   
 7 chapter  
 8 1        
 9 it       
10 is       
# … with 122,194 more rows</code></pre>
</div>
</div>
<p>We can also divide it by paragraphs:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">tmp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pp_book_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> paragraph, </span>
<span id="cb26-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> text, </span>
<span id="cb26-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"paragraphs"</span>) </span>
<span id="cb26-5">tmp</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10,721 × 1
   paragraph                                                                    
   &lt;chr&gt;                                                                        
 1 "pride and prejudice"                                                        
 2 "by jane austen"                                                             
 3 "chapter 1"                                                                  
 4 "it is a truth universally acknowledged, that a single man in possession"    
 5 "of a good fortune, must be in want of a wife."                              
 6 "however little known the feelings or views of such a man may be on his"     
 7 "first entering a neighbourhood, this truth is so well fixed in the minds"   
 8 "of the surrounding families, that he is considered the rightful property"   
 9 "of some one or other of their daughters."                                   
10 "\"my dear mr. bennet,\" said his lady to him one day, \"have you heard that"
# … with 10,711 more rows</code></pre>
</div>
</div>
<p>We can extract a particular element from the tibble</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">tmp[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  paragraph
  &lt;chr&gt;    
1 chapter 1</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>What you name the output column, e.g.&nbsp;<code>paragraph</code> in this case, doesn’t affect it, it’s just good to give it a consistent name.</p>
</div>
</div>
<p>We could also divide it by sentence:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">pp_book_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb30-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> sentence,</span>
<span id="cb30-3">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> text, </span>
<span id="cb30-4">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentences"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 15,545 × 1
   sentence                                                                  
   &lt;chr&gt;                                                                     
 1 "pride and prejudice"                                                     
 2 "by jane austen"                                                          
 3 "chapter 1"                                                               
 4 "it is a truth universally acknowledged, that a single man in possession" 
 5 "of a good fortune, must be in want of a wife."                           
 6 "however little known the feelings or views of such a man may be on his"  
 7 "first entering a neighbourhood, this truth is so well fixed in the minds"
 8 "of the surrounding families, that he is considered the rightful property"
 9 "of some one or other of their daughters."                                
10 "\"my dear mr."                                                           
# … with 15,535 more rows</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is tricked by terms like “Mr.” and “Mrs.”</p>
</div>
</div>
<p>One neat trick is that we can unnest by two layers:</p>
<ol type="1">
<li>paragraph and then</li>
<li>word</li>
</ol>
<p>This lets us keep track of <strong>which paragraph is which</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">paragraphs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb32-2">  pp_book_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> paragraph, </span>
<span id="cb32-4">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> text, </span>
<span id="cb32-5">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"paragraphs"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paragraph_number =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) </span>
<span id="cb32-7"></span>
<span id="cb32-8">paragraphs</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10,721 × 2
   paragraph                                                             parag…¹
   &lt;chr&gt;                                                                   &lt;int&gt;
 1 "pride and prejudice"                                                       1
 2 "by jane austen"                                                            2
 3 "chapter 1"                                                                 3
 4 "it is a truth universally acknowledged, that a single man in posses…       4
 5 "of a good fortune, must be in want of a wife."                             5
 6 "however little known the feelings or views of such a man may be on …       6
 7 "first entering a neighbourhood, this truth is so well fixed in the …       7
 8 "of the surrounding families, that he is considered the rightful pro…       8
 9 "of some one or other of their daughters."                                  9
10 "\"my dear mr. bennet,\" said his lady to him one day, \"have you he…      10
# … with 10,711 more rows, and abbreviated variable name ¹​paragraph_number</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>We use <code>mutate()</code> to annotate a paragraph number quantity to keep track of paragraphs in the original format.</p>
</div>
</div>
<p>After tokenizing by paragraph, we can then tokenzie by word:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">paragraphs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> word, </span>
<span id="cb34-3">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> paragraph)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 122,204 × 2
   paragraph_number word     
              &lt;int&gt; &lt;chr&gt;    
 1                1 pride    
 2                1 and      
 3                1 prejudice
 4                2 by       
 5                2 jane     
 6                2 austen   
 7                3 chapter  
 8                3 1        
 9                4 it       
10                4 is       
# … with 122,194 more rows</code></pre>
</div>
</div>
<p>We notice there are many what are called <strong>stop words</strong> (“the”, “of”, “to”, and so forth in English).</p>
<p>Often in text analysis, we will want to <strong>remove stop words</strong> because stop words are words that are not useful for an analysis.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(stop_words)</span>
<span id="cb36-2"></span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(stop_words<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lexicon)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    onix    SMART snowball 
     404      571      174 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">stop_words <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   word        lexicon
   &lt;chr&gt;       &lt;chr&gt;  
 1 a           SMART  
 2 a's         SMART  
 3 able        SMART  
 4 about       SMART  
 5 above       SMART  
 6 according   SMART  
 7 accordingly SMART  
 8 across      SMART  
 9 actually    SMART  
10 after       SMART  </code></pre>
</div>
</div>
<p>We can remove stop words (kept in the <code>tidytext</code> dataset <code>stop_words</code>) with an <code>anti_join(x,y)</code> (return all rows from <code>x</code> without a match in <code>y</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">words_by_paragraph <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb40-2">  paragraphs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> word, </span>
<span id="cb40-4">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> paragraph) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anti_join</span>(stop_words)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining, by = "word"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">words_by_paragraph </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 37,246 × 2
   paragraph_number word        
              &lt;int&gt; &lt;chr&gt;       
 1                1 pride       
 2                1 prejudice   
 3                2 jane        
 4                2 austen      
 5                3 chapter     
 6                3 1           
 7                4 truth       
 8                4 universally 
 9                4 acknowledged
10                4 single      
# … with 37,236 more rows</code></pre>
</div>
</div>
<p>Because we have stored our data in a tidy dataset, we can use <code>tidyverse</code> packages for exploratory data analysis.</p>
<p>For example, here we use <code>dplyr</code>’s <code>count()</code> function to find the most common words in the book</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">words_by_paragraph <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(word, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  word          n
  &lt;chr&gt;     &lt;int&gt;
1 elizabeth   597
2 darcy       373
3 bennet      294
4 miss        283
5 jane        264
6 bingley     257</code></pre>
</div>
</div>
<p>Then use <code>ggplot2</code> to plot the most commonly used words from the book.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">words_by_paragraph <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(word, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb46-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb46-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">word =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_reorder</span>(word, n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb46-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(word, n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_flip</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-13-working-with-text-sentiment-analysis/index_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We can also do this for all of her books using the <code>austen_books()</code> object</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">austen_books</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb47-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  text                    book               
  &lt;chr&gt;                   &lt;fct&gt;              
1 "SENSE AND SENSIBILITY" Sense &amp; Sensibility
2 ""                      Sense &amp; Sensibility
3 "by Jane Austen"        Sense &amp; Sensibility
4 ""                      Sense &amp; Sensibility
5 "(1811)"                Sense &amp; Sensibility
6 ""                      Sense &amp; Sensibility</code></pre>
</div>
</div>
<p>We can do some data wrangling that keep tracks of the line number and chapter (using a regex) to find where all the chapters are.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">original_books <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">austen_books</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(book) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linenumber =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(),</span>
<span id="cb49-5">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chapter =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(</span>
<span id="cb49-6">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(text, </span>
<span id="cb49-7">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regex</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^chapter [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">divxlc]"</span>,</span>
<span id="cb49-8">                                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore_case =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb49-9">                              )</span>
<span id="cb49-10">                          ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb49-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb49-12"></span>
<span id="cb49-13">original_books</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 73,422 × 4
   text                    book                linenumber chapter
   &lt;chr&gt;                   &lt;fct&gt;                    &lt;int&gt;   &lt;int&gt;
 1 "SENSE AND SENSIBILITY" Sense &amp; Sensibility          1       0
 2 ""                      Sense &amp; Sensibility          2       0
 3 "by Jane Austen"        Sense &amp; Sensibility          3       0
 4 ""                      Sense &amp; Sensibility          4       0
 5 "(1811)"                Sense &amp; Sensibility          5       0
 6 ""                      Sense &amp; Sensibility          6       0
 7 ""                      Sense &amp; Sensibility          7       0
 8 ""                      Sense &amp; Sensibility          8       0
 9 ""                      Sense &amp; Sensibility          9       0
10 "CHAPTER 1"             Sense &amp; Sensibility         10       1
# … with 73,412 more rows</code></pre>
</div>
</div>
<p>Finally, we can restructure it to a one-token-per-row format using the <code>unnest_tokens()</code> function and remove stop words using the <code>anti_join()</code> function in <code>dplyr</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">tidy_books <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> original_books <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(word, text) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb51-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anti_join</span>(stop_words)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining, by = "word"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">tidy_books</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 217,609 × 4
   book                linenumber chapter word       
   &lt;fct&gt;                    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;      
 1 Sense &amp; Sensibility          1       0 sense      
 2 Sense &amp; Sensibility          1       0 sensibility
 3 Sense &amp; Sensibility          3       0 jane       
 4 Sense &amp; Sensibility          3       0 austen     
 5 Sense &amp; Sensibility          5       0 1811       
 6 Sense &amp; Sensibility         10       1 chapter    
 7 Sense &amp; Sensibility         10       1 1          
 8 Sense &amp; Sensibility         13       1 family     
 9 Sense &amp; Sensibility         13       1 dashwood   
10 Sense &amp; Sensibility         13       1 settled    
# … with 217,599 more rows</code></pre>
</div>
</div>
<p>Here are the most commonly used words across all of Jane Austen’s books.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">tidy_books <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb55-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(word, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb55-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb55-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">word =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_reorder</span>(word, n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb55-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(word, n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_flip</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-13-working-with-text-sentiment-analysis/index_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="sentiment-analysis" class="level1">
<h1>Sentiment Analysis</h1>
<p>In the previous section, we explored the <strong>tidy text</strong> format and showed how we can calculate things such as word frequency.</p>
<p>Next, we are going to look at something called <strong>opinion mining</strong> or <strong>sentiment analysis</strong>. The <a href="https://www.tidytextmining.com/sentiment.html">tidytext authors</a> write:</p>
<blockquote class="blockquote">
<p><em>“When human readers approach a text, we use our understanding of the emotional intent of words to infer whether a section of text is positive or negative, or perhaps characterized by some other more nuanced emotion like surprise or disgust. We can use the tools of text mining to approach the emotional content of text programmatically, as shown in the figure below”</em></p>
</blockquote>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-13-working-with-text-sentiment-analysis/https:/www.tidytextmining.com/images/tmwr_0201.png" class="img-fluid figure-img" style="width:90.0%"></p>
<figcaption class="figure-caption">A flowchart of a typical text analysis that uses tidytext for sentiment analysis.</figcaption>
</figure>
</div>
</div>
</div>
<p>[<a href="https://www.tidytextmining.com/images/tmwr_0201.png">image source</a>]</p>
<blockquote class="blockquote">
<p><em>“One way to analyze the sentiment of a text is to consider the text as a combination of its individual words and the sentiment content of the whole text as the sum of the sentiment content of the individual words. This isn’t the only way to approach sentiment analysis, but it is an often-used approach, and an approach that naturally takes advantage of the tidy tool ecosystem.”</em></p>
</blockquote>
<p>Let’s try using sentiment analysis on the Jane Austen books.</p>
<section id="the-sentiments-dataset" class="level2">
<h2 class="anchored" data-anchor-id="the-sentiments-dataset">The <code>sentiments</code> dataset</h2>
<p>Inside the <code>tidytext</code> package are several <strong>sentiment lexicons</strong>. A few things to note:</p>
<ul>
<li>The lexicons are based on unigrams (single words)</li>
<li>The lexicons contain many English words and the words are assigned scores for positive/negative sentiment, and also possibly emotions like joy, anger, sadness, and so forth</li>
</ul>
<p>You can use the <code>get_sentiments()</code> function to extract a specific lexicon.</p>
<p>The <code>nrc</code> lexicon <strong>categorizes words into multiple categories</strong> of positive, negative, anger, anticipation, disgust, fear, joy, sadness, surprise, and trust</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sentiments</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nrc"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 13,872 × 2
   word        sentiment
   &lt;chr&gt;       &lt;chr&gt;    
 1 abacus      trust    
 2 abandon     fear     
 3 abandon     negative 
 4 abandon     sadness  
 5 abandoned   anger    
 6 abandoned   fear     
 7 abandoned   negative 
 8 abandoned   sadness  
 9 abandonment anger    
10 abandonment fear     
# … with 13,862 more rows</code></pre>
</div>
</div>
<p>The <code>bing</code> lexicon <strong>categorizes words in a binary fashion</strong> into positive and negative categories</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sentiments</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bing"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6,786 × 2
   word        sentiment
   &lt;chr&gt;       &lt;chr&gt;    
 1 2-faces     negative 
 2 abnormal    negative 
 3 abolish     negative 
 4 abominable  negative 
 5 abominably  negative 
 6 abominate   negative 
 7 abomination negative 
 8 abort       negative 
 9 aborted     negative 
10 aborts      negative 
# … with 6,776 more rows</code></pre>
</div>
</div>
<p>The <code>AFINN</code> lexicon <strong>assigns words with a score that runs between -5 and 5</strong>, with negative scores indicating negative sentiment and positive scores indicating positive sentiment</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sentiments</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"afinn"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2,477 × 2
   word       value
   &lt;chr&gt;      &lt;dbl&gt;
 1 abandon       -2
 2 abandoned     -2
 3 abandons      -2
 4 abducted      -2
 5 abduction     -2
 6 abductions    -2
 7 abhor         -3
 8 abhorred      -3
 9 abhorrent     -3
10 abhors        -3
# … with 2,467 more rows</code></pre>
</div>
</div>
<p>The authors of the <code>tidytext</code> package note:</p>
<blockquote class="blockquote">
<p><em>“How were these sentiment lexicons put together and validated? They were constructed via either crowdsourcing (using, for example, Amazon Mechanical Turk) or by the labor of one of the authors, and were validated using some combination of crowdsourcing again, restaurant or movie reviews, or Twitter data. Given this information, we may hesitate to apply these sentiment lexicons to styles of text dramatically different from what they were validated on, such as narrative fiction from 200 years ago. While it is true that using these sentiment lexicons with, for example, Jane Austen’s novels may give us less accurate results than with tweets sent by a contemporary writer, we still can measure the sentiment content for words that are shared across the lexicon and the text.”</em></p>
</blockquote>
<p>Two other caveats:</p>
<blockquote class="blockquote">
<p><em>“Not every English word is in the lexicons because many English words are pretty neutral. It is important to keep in mind that these methods do not take into account qualifiers before a word, such as in”no good” or “not true”; a lexicon-based method like this is based on unigrams only. For many kinds of text (like the narrative examples below), there are not sustained sections of sarcasm or negated text, so this is not an important effect.”</em></p>
</blockquote>
<p>and</p>
<blockquote class="blockquote">
<p><em>“One last caveat is that the size of the chunk of text that we use to add up unigram sentiment scores can have an effect on an analysis. A text the size of many paragraphs can often have positive and negative sentiment averaged out to about zero, while sentence-sized or paragraph-sized text often works better.”</em></p>
</blockquote>
<section id="joining-together-tidy-text-data-with-lexicons" class="level3">
<h3 class="anchored" data-anchor-id="joining-together-tidy-text-data-with-lexicons">Joining together tidy text data with lexicons</h3>
<p>Now that we have our data in a tidy text format AND we have learned about different types of lexicons in application for sentiment analysis, we can <strong>join the words together</strong> using a join function.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>What are the most common joy words in the book <em>Emma</em>?</p>
<p>Here, we use the <code>nrc</code> lexicon and join the <code>tidy_books</code> dataset with the <code>nrc_joy</code> lexicon using the <code>inner_join()</code> function in <code>dplyr</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">nrc_joy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sentiments</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nrc"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb62-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(sentiment <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"joy"</span>)</span>
<span id="cb62-3"></span>
<span id="cb62-4">tidy_books <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb62-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(book <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Emma"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb62-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(nrc_joy) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb62-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(word, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining, by = "word"</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 297 × 2
   word          n
   &lt;chr&gt;     &lt;int&gt;
 1 friend      166
 2 hope        143
 3 happy       125
 4 love        117
 5 deal         92
 6 found        92
 7 happiness    76
 8 pretty       68
 9 true         66
10 comfort      65
# … with 287 more rows</code></pre>
</div>
</div>
</div>
</div>
<p>We can do things like investigate how the sentiment of the text changes throughout each of Jane’s novels.</p>
<p>Here, we use the <code>bing</code> lexicon, find a sentiment score for each word, and then use <code>inner_join()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">tidy_books <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb65-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sentiments</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bing"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining, by = "word"</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 44,171 × 5
   book                linenumber chapter word        sentiment
   &lt;fct&gt;                    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;    
 1 Sense &amp; Sensibility         16       1 respectable positive 
 2 Sense &amp; Sensibility         18       1 advanced    positive 
 3 Sense &amp; Sensibility         20       1 death       negative 
 4 Sense &amp; Sensibility         21       1 loss        negative 
 5 Sense &amp; Sensibility         25       1 comfortably positive 
 6 Sense &amp; Sensibility         28       1 goodness    positive 
 7 Sense &amp; Sensibility         28       1 solid       positive 
 8 Sense &amp; Sensibility         29       1 comfort     positive 
 9 Sense &amp; Sensibility         30       1 relish      positive 
10 Sense &amp; Sensibility         33       1 steady      positive 
# … with 44,161 more rows</code></pre>
</div>
</div>
<p>Then, we can <strong>count how many positive and negative words</strong> there are in each section of the books.</p>
<p>We create an index to help us keep track of where we are in the narrative, which uses integer division, and counts up sections of 80 lines of text.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1">tidy_books <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb68-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sentiments</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bing"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb68-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(book, </span>
<span id="cb68-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">index =</span> linenumber <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%/%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, </span>
<span id="cb68-5">        sentiment) </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining, by = "word"</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,840 × 4
   book                index sentiment     n
   &lt;fct&gt;               &lt;dbl&gt; &lt;chr&gt;     &lt;int&gt;
 1 Sense &amp; Sensibility     0 negative     16
 2 Sense &amp; Sensibility     0 positive     26
 3 Sense &amp; Sensibility     1 negative     19
 4 Sense &amp; Sensibility     1 positive     44
 5 Sense &amp; Sensibility     2 negative     12
 6 Sense &amp; Sensibility     2 positive     23
 7 Sense &amp; Sensibility     3 negative     15
 8 Sense &amp; Sensibility     3 positive     22
 9 Sense &amp; Sensibility     4 negative     16
10 Sense &amp; Sensibility     4 positive     29
# … with 1,830 more rows</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>%/%</code> operator does <strong>integer division</strong> (<code>x %/% y</code> is equivalent to <code>floor(x/y)</code>) so the index keeps track of which 80-line section of text we are counting up negative and positive sentiment in.</p>
</div>
</div>
<p>Finally, we use <code>pivot_wider()</code> to have positive and negative counts in different columns, and then use <code>mutate()</code> to calculate a net sentiment (positive - negative).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">jane_austen_sentiment <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb71-2">  tidy_books <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sentiments</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bing"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(book, </span>
<span id="cb71-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">index =</span> linenumber <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%/%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, </span>
<span id="cb71-6">        sentiment) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> sentiment, </span>
<span id="cb71-8">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> n, </span>
<span id="cb71-9">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_fill =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sentiment =</span> positive <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> negative)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining, by = "word"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">jane_austen_sentiment</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 920 × 5
   book                index negative positive sentiment
   &lt;fct&gt;               &lt;dbl&gt;    &lt;int&gt;    &lt;int&gt;     &lt;int&gt;
 1 Sense &amp; Sensibility     0       16       26        10
 2 Sense &amp; Sensibility     1       19       44        25
 3 Sense &amp; Sensibility     2       12       23        11
 4 Sense &amp; Sensibility     3       15       22         7
 5 Sense &amp; Sensibility     4       16       29        13
 6 Sense &amp; Sensibility     5       16       39        23
 7 Sense &amp; Sensibility     6       24       37        13
 8 Sense &amp; Sensibility     7       22       39        17
 9 Sense &amp; Sensibility     8       30       35         5
10 Sense &amp; Sensibility     9       14       18         4
# … with 910 more rows</code></pre>
</div>
</div>
<p>Then we can plot the sentiment scores across the sections of each novel:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">jane_austen_sentiment <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb75-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> index, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> sentiment, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> book)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb75-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb75-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> book, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_x"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-13-working-with-text-sentiment-analysis/index_files/figure-html/unnamed-chunk-37-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We can see how the sentiment trajectory of the novel changes over time.</p>
</section>
<section id="word-clouds" class="level3">
<h3 class="anchored" data-anchor-id="word-clouds">Word clouds</h3>
<p>You can also do things like create word clouds using the <code>wordcloud</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(wordcloud)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: RColorBrewer</code></pre>
</div>
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1">tidy_books <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb78-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anti_join</span>(stop_words) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb78-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(word) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb78-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wordcloud</span>(word, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.words =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining, by = "word"</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-13-working-with-text-sentiment-analysis/index_files/figure-html/unnamed-chunk-38-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
</section>
<section id="converting-to-and-from-tidy-and-non-tidy-formats" class="level1">
<h1>Converting to and from tidy and non-tidy formats</h1>
<p>In this section, we want to <strong>convert our tidy text data</strong> constructed with the <code>unnest_tokens()</code> function (useable by packages in the tidyverse) into a different format that can be <strong>used by packages for natural language processing</strong> or other types of machine learning algorithms in non-tidy formats.</p>
<p>In the figure below, we see how an analysis might switch between tidy and non-tidy data structures and tools.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-13-working-with-text-sentiment-analysis/https:/www.tidytextmining.com/images/tmwr_0501.png" class="img-fluid figure-img" style="width:90.0%"></p>
<figcaption class="figure-caption">A flowchart of a typical text analysis that combines tidytext with other tools and data formats, particularly the <code>tm</code> or <code>quanteda</code> packages. Here, we show how to convert back and forth between document-term matrices and tidy data frames, as well as converting from a Corpus object to a text data frame.</figcaption>
</figure>
</div>
</div>
</div>
<p>[<a href="https://www.tidytextmining.com/images/tmwr_0501.png">image source</a>]</p>
<details>
<summary>
Click here for how to convert to and from tidy and non-tidy formats to build machine learning algorithms.
</summary>
<p>To introduce some of these tools, we first need to introduce <strong>document-term matrices</strong>, as well as <strong>casting</strong> a tidy data frame into a sparse matrix.</p>
<section id="document-term-matrix" class="level3">
<h3 class="anchored" data-anchor-id="document-term-matrix">Document-term matrix</h3>
<p>One of the most common structures that text mining packages work with is the <strong>document-term matrix</strong> (or DTM). This is a matrix where:</p>
<ul>
<li>each row represents one document (such as a book or article),</li>
<li>each column represents one term, and</li>
<li>each value (typically) contains the number of appearances of that term in that document.</li>
</ul>
<p>Since most pairings of document and term do not occur (they have the value zero), DTMs are usually implemented as sparse matrices.</p>
<p>These objects can be treated as though they were matrices (for example, accessing particular rows and columns), but are stored in a more efficient format.</p>
<p>DTM objects <strong>cannot be used directly with tidy tools</strong>, just as tidy data frames cannot be used as input for most text mining packages. Thus, the <code>tidytext</code> package provides two verbs that convert between the two formats.</p>
<ul>
<li><code>tidy()</code> turns a document-term matrix into a tidy data frame. This verb comes from the <code>broom</code> package, which provides similar tidying functions for many statistical models and objects.</li>
<li><code>cast()</code> turns a tidy one-term-per-row data frame into a matrix. <code>tidytext</code> provides three variations of this verb, each converting to a different type of matrix: <code>cast_sparse()</code> (converting to a sparse matrix from the <code>Matrix</code> package), <code>cast_dtm()</code> (converting to a <code>DocumentTermMatrix</code> object from <code>tm</code>), and <code>cast_dfm()</code> (converting to a <code>dfm</code> object from <code>quanteda</code>).</li>
</ul>
<p>A DTM is typically comparable to a tidy data frame after a count or a group_by/summarize that contains counts or another statistic for each combination of a term and document.</p>
</section>
<section id="creating-documenttermmatrix-objects" class="level3">
<h3 class="anchored" data-anchor-id="creating-documenttermmatrix-objects">Creating DocumentTermMatrix objects</h3>
<p>Perhaps the most widely used implementation of DTMs in R is the <code>DocumentTermMatrix</code> class in the <code>tm</code> package. Many available text mining datasets are provided in this format.</p>
<p>Let’s create a sparse with <code>cast_sparse()</code> function and then a <code>dtm</code> with the <code>cast_dtm()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">tidy_austen <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb80-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">austen_books</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb80-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">line =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb80-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(word, text) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb80-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anti_join</span>(stop_words)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining, by = "word"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1">tidy_austen</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 217,609 × 3
   book                 line word       
   &lt;fct&gt;               &lt;int&gt; &lt;chr&gt;      
 1 Sense &amp; Sensibility     1 sense      
 2 Sense &amp; Sensibility     1 sensibility
 3 Sense &amp; Sensibility     3 jane       
 4 Sense &amp; Sensibility     3 austen     
 5 Sense &amp; Sensibility     5 1811       
 6 Sense &amp; Sensibility    10 chapter    
 7 Sense &amp; Sensibility    10 1          
 8 Sense &amp; Sensibility    13 family     
 9 Sense &amp; Sensibility    13 dashwood   
10 Sense &amp; Sensibility    13 settled    
# … with 217,599 more rows</code></pre>
</div>
</div>
<p>First, we’ll make a sparse matrix with <code>cast_sparse(data, row, column, value)</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">austen_sparse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidy_austen <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb84-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(line, word) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb84-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast_sparse</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row =</span> line, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">column =</span> word, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> n)</span>
<span id="cb84-4"></span>
<span id="cb84-5">austen_sparse[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>10 x 10 sparse Matrix of class "dgCMatrix"</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>   [[ suppressing 10 column names 'sense', 'sensibility', 'austen' ... ]]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>                      
1  1 1 . . . . . . . .
3  . . 1 1 . . . . . .
5  . . . . 1 . . . . .
10 . . . . . 1 1 . . .
13 . . . . . . . 1 1 1
14 . . . . . . . . . .
15 . . . . . . . . . .
16 . . . . . . . . . .
17 . . . . . . . . 1 .
18 . . . . . . . . . .</code></pre>
</div>
</div>
<p>Next, we’ll make a <code>dtm</code> object with <code>cast_dtm(data, document, matrix)</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1">austen_dtm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidy_austen <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb88-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(line, word) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb88-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast_dtm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">document =</span> line, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">term =</span> word, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> n)</span>
<span id="cb88-4"></span>
<span id="cb88-5">austen_dtm</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;&lt;DocumentTermMatrix (documents: 61010, terms: 13914)&gt;&gt;
Non-/sparse entries: 216128/848677012
Sparsity           : 100%
Maximal term length: 19
Weighting          : term frequency (tf)</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(austen_dtm)  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "DocumentTermMatrix"    "simple_triplet_matrix"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb92-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(austen_dtm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 61010 13914</code></pre>
</div>
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb94-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(austen_dtm[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    Terms
Docs sense sensibility austen jane 1811 1 chapter dashwood estate family
  1      1           1      0    0    0 0       0        0      0      0
  3      0           0      1    1    0 0       0        0      0      0
  5      0           0      0    0    1 0       0        0      0      0
  10     0           0      0    0    0 1       1        0      0      0
  13     0           0      0    0    0 0       0        1      1      1
  14     0           0      0    0    0 0       0        0      0      0
  15     0           0      0    0    0 0       0        0      0      0
  16     0           0      0    0    0 0       0        0      0      0
  17     0           0      0    0    0 0       0        0      1      0
  18     0           0      0    0    0 0       0        0      0      0
  19     0           0      0    0    0 0       0        0      0      0
  20     0           0      0    0    0 0       0        0      0      0
  21     0           0      0    0    0 0       0        0      0      0
  22     0           0      0    0    0 0       0        1      0      1
  23     0           0      0    0    0 0       0        0      1      0
  24     0           0      0    0    0 0       0        0      0      0
  25     0           0      0    0    0 0       0        0      0      0
  26     0           0      0    0    0 0       0        0      0      0
  27     0           0      0    0    0 0       0        1      0      0
  28     0           0      0    0    0 0       0        0      0      0</code></pre>
</div>
</div>
<p>Now we have 61010 observations and 13914 features.</p>
<p>With these matricies, you can start to leverage the NLP methods and software. For example, in text mining, we often have collections of documents, such as blog posts or news articles, that we’d like to divide into natural groups so that we can understand them separately.</p>
<p><strong>Topic modeling</strong> is a method for <strong>unsupervised classification</strong> of such documents, similar to clustering on numeric data, which finds natural groups of items even when we’re not sure what we are looking for.</p>
<p>Latent Dirichlet allocation (LDA) is a particularly popular method for fitting a topic model. It treats each document as a mixture of topics, and each topic as a mixture of words. This allows documents to “overlap” each other in terms of content, rather than being separated into discrete groups, in a way that mirrors typical use of natural language.</p>
<p>We can also perform <strong>supervised analyses</strong> to build a classifier to classify lines of text from our <code>austen_sparse</code> or <code>austen_dtm</code> objects.</p>
</section></details>


</section>


 ]]></description>
  <category>module 5</category>
  <category>week 7</category>
  <category>tidyverse</category>
  <category>tidytext</category>
  <category>sentiment analysis</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-13-working-with-text-sentiment-analysis/index.html</guid>
  <pubDate>Thu, 13 Oct 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Factors</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-11-working-with-factors/index.html</link>
  <description><![CDATA[ 




<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://peerj.com/preprints/3163">Wrangling Categorical Data in R</a> by Amelia McNamara, Nicholas J Horton</li>
<li><a href="https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors" class="uri">https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors</a></li>
<li><a href="https://forcats.tidyverse.org" class="uri">https://forcats.tidyverse.org</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://peerj.com/preprints/3163">Wrangling Categorical Data in R</a> by Amelia McNamara, Nicholas J Horton</li>
<li><a href="https://r4ds.had.co.nz/factors" class="uri">https://r4ds.had.co.nz/factors</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>How to create factors and some challenges working with them in base R</li>
<li>An introduction to the <code>forcats</code> package in the <code>tidyverse</code> to work with <strong>cat</strong>egorical variables in R</li>
</ul>
</div>
</div>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p><strong>Factors</strong> are used for working with <strong>categorical variables</strong>, or variables that have a fixed and known set of possible values (income bracket, U.S. state, political affiliation).</p>
<p>Factors are <strong>useful when</strong>:</p>
<ul>
<li>You want to <strong>include categorical variables in regression models</strong></li>
<li>You want to <strong>plot categorical data</strong> (e.g.&nbsp;want to map categorical variables to aesthetic attributes)</li>
<li>You want to <strong>display character vectors in a non-alphabetical order</strong></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Imagine that you have a variable that records month:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dec"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jan"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mar"</span>)</span></code></pre></div>
</div>
<p>Using a string to record this variable has two problems:</p>
<ol type="1">
<li>There are only twelve possible months, and there’s nothing saving you from typos:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">x_typo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dec"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jam"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mar"</span>)</span></code></pre></div>
</div>
<ol start="2" type="1">
<li>It doesn’t sort in a useful way:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Apr" "Dec" "Jan" "Mar"</code></pre>
</div>
</div>
</div>
</div>
<section id="factor-basics" class="level2">
<h2 class="anchored" data-anchor-id="factor-basics">Factor basics</h2>
<p>You can fix both of these problems with a <strong>factor</strong>.</p>
<p>To create a factor you must start by creating a list of the valid <strong>levels</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">month_levels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb5-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jan"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mar"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"May"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jun"</span>, </span>
<span id="cb5-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jul"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Aug"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sep"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Oct"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nov"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dec"</span></span>
<span id="cb5-4">)</span></code></pre></div>
</div>
<p>Now we can create a factor with the <code>factor()</code> function defining the <code>levels</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> month_levels)</span>
<span id="cb6-2">y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] Dec Apr Jan Mar
Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec</code></pre>
</div>
</div>
<p>We can see what happens if we try to <strong>sort the factor</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] Jan Mar Apr Dec
Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec</code></pre>
</div>
</div>
<p>We can also check the <strong>attributes of the factor</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$levels
 [1] "Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"

$class
[1] "factor"</code></pre>
</div>
</div>
<p>If you want to access the set of levels directly, you can do so with <code>levels()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">levels</span>(y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Any values not in the level will be silently converted to NA:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">y_typo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(x_typo, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> month_levels)</span>
<span id="cb14-2">y_typo</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] Dec  Apr  &lt;NA&gt; Mar 
Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="challenges-working-with-categorical-data" class="level2">
<h2 class="anchored" data-anchor-id="challenges-working-with-categorical-data">Challenges working with categorical data</h2>
<p>Working with categorical data can really helpful in many situations, but it also be challenging.</p>
<p>For example,</p>
<ol type="1">
<li>What if the <strong>original data source</strong> for where the categorical data is getting ingested <strong>changes</strong>?
<ul>
<li>If a domain expert is providing spreadsheet data at regular intervals, code that worked on the initial data may not generate an error message, but could silently produce incorrect results.</li>
</ul></li>
<li>What if a <strong>new level</strong> of a categorical data is added in an updated dataset?</li>
<li>When categorical data are coded with numerical values, it can be easy to <strong>break the relationship between category numbers and category labels</strong> without realizing it, thus losing the information encoded in a variable.
<ul>
<li>Let’s consider an example of this below.</li>
</ul></li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Consider a set of decades,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb16-2"></span>
<span id="cb16-3">x1_original <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb16-4">x1_factor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(x1_original)</span>
<span id="cb16-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(x1_factor)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$levels
[1] "10" "20" "40" "50" "60"

$class
[1] "factor"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(x1_original, x1_factor) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1_numeric =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(x1_factor))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 8 × 3
  x1_original x1_factor x1_numeric
        &lt;dbl&gt; &lt;fct&gt;          &lt;dbl&gt;
1          10 10                 1
2          10 10                 1
3          10 10                 1
4          50 50                 4
5          60 60                 5
6          20 20                 2
7          20 20                 2
8          40 40                 3</code></pre>
</div>
</div>
<p>Instead of creating a new variable with a numeric version of the value of the factor variable <code>x1_factor</code>, the <strong>variable loses the original numerical categories</strong> and <strong>creates a factor number</strong> (i.e., 10 is mapped to 1, 20 is mapped to 2, and 40 is mapped to 3, etc).</p>
</div>
</div>
<p>This <strong>result is unexpected</strong> because <code>base::as.numeric()</code> is intended to recover numeric information by coercing a character variable.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Compare the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: NAs introduced by coercion</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<p>In the first example, R does not how to convert the character string to a numeric, so it returns a <code>NA</code>.</p>
<p>In the second example, it creates factor numbers and orders them according to an alphabetical order. Here is another example of this behavior:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"goodbye"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2 1</code></pre>
</div>
</div>
</div>
</div>
<p>This behavior of the <code>factor()</code> function feels unexpected at best.</p>
<p>Another example of <strong>unexpected behavior</strong> is how the function will <strong>silently make a missing value</strong> because the values in the data and the levels do not match.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] &lt;NA&gt;
Levels: c</code></pre>
</div>
</div>
<p>The <strong>unfortunate behavior of factors in R</strong> has led to an online movement against the default behavior of many data import functions to make factors out of any variable composed as strings.</p>
<p>The tidyverse is part of this movement, with functions from the <code>readr</code> package defaulting to leaving strings as-is. (Others have chosen to add <code>options(stringAsFactors=FALSE)</code> into their start up commands.)</p>
</section>
<section id="factors-when-modeling-data" class="level2">
<h2 class="anchored" data-anchor-id="factors-when-modeling-data">Factors when modeling data</h2>
<p>So if factors are so troublesome, what’s the point of them in the first place?</p>
<p>Factors are <strong>still necessary for some data analytic tasks</strong>. The most salient case is in <strong>statistical modeling</strong>.</p>
<p>When you pass a factor variable into <code>lm()</code> or <code>glm()</code>, R automatically creates indicator (or more colloquially ‘dummy’) variables for each of the levels and picks one as a reference group.</p>
<p>For simple cases, this behavior can also be <strong>achieved with a character vector</strong>.</p>
<p>However, to choose <strong>which level to use as a reference level</strong> or to order classes, factors must be used.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Consider a vector of character strings with three income levels:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">income_level <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), </span>
<span id="cb29-2">                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), </span>
<span id="cb29-3">                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb29-4">income_level</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "low"    "low"    "low"    "low"    "low"    "low"    "low"    "low"   
 [9] "low"    "low"    "medium" "medium" "medium" "medium" "medium" "medium"
[17] "medium" "medium" "medium" "medium" "high"   "high"   "high"   "high"  
[25] "high"   "high"   "high"   "high"   "high"   "high"  </code></pre>
</div>
</div>
<p>Here, it <strong>might make sense to use the lowest income level (low) as the reference</strong> class so that all the other coefficients can be interpreted in comparison to it.</p>
<p>However, R would use <strong>high as the reference</strong> by default because ‘h’ comes before ‘l’ in the alphabet.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(income_level)</span>
<span id="cb31-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] low    low    low    low    low    low    low    low    low    low   
[11] medium medium medium medium medium medium medium medium medium medium
[21] high   high   high   high   high   high   high   high   high   high  
Levels: high low medium</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate some random obs from a normal dist</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = y ~ x)

Coefficients:
(Intercept)         xlow      xmedium  
     0.3642      -0.4855      -0.4795  </code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="memory-req-for-factors-and-character-strings" class="level2">
<h2 class="anchored" data-anchor-id="memory-req-for-factors-and-character-strings">Memory req for factors and character strings</h2>
<p>Consider a large character string such as <code>income_level</code> corresponding to a categorical variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">income_level <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>), </span>
<span id="cb35-2">                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>), </span>
<span id="cb35-3">                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>))</span></code></pre></div>
</div>
<p>In early versions of R, storing categorical data as a factor variable was considerably more efficient than storing the same data as strings, because factor variables only store the factor labels once.</p>
<p>However, R now uses a global string pool, so each unique string is only stored once, which means storage is now less of an issue.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">object.size</span>(income_level), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kb"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of the character string</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "234.6 Kb"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">object.size</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(income_level)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kb"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of the factor</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "117.8 Kb"</code></pre>
</div>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>Factors can be really useful in many data analytic tasks, but the base R functions to work with factors can lead to some unexpected behavior that can catch new R users.</p>
<p>Let’s introduce a package to make wrangling factors easier.</p>
</section>
</section>
<section id="forcats" class="level1">
<h1><code>forcats</code></h1>
<p>Next, we will introduce the <code>forcats</code> package, which is part of the core <code>tidyverse</code>, but can also be loaded directly</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(forcats)</span></code></pre></div>
</div>
<p>It provides tools for dealing with <strong>cat</strong>egorical variables (and it’s an anagram of factors!) using a wide range of helpers for working with factors.</p>
<section id="general-social-survey" class="level2">
<h2 class="anchored" data-anchor-id="general-social-survey">General Social Survey</h2>
<p>For the rest of this lecture, we are going to use the <code>gss_cat</code> dataset that is installed when you load <code>forcats</code>.</p>
<p>It’s a sample of data from the <a href="https://gss.norc.org">General Social Survey</a>, a long-running US survey conducted by the independent research organization NORC at the University of Chicago.</p>
<p>The <strong>survey has thousands of questions</strong>, so in <code>gss_cat</code>.</p>
<p>I have selected a handful that will illustrate some common challenges you will encounter when working with factors.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">gss_cat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 21,483 × 9
    year marital         age race  rincome        partyid    relig denom tvhours
   &lt;int&gt; &lt;fct&gt;         &lt;int&gt; &lt;fct&gt; &lt;fct&gt;          &lt;fct&gt;      &lt;fct&gt; &lt;fct&gt;   &lt;int&gt;
 1  2000 Never married    26 White $8000 to 9999  Ind,near … Prot… Sout…      12
 2  2000 Divorced         48 White $8000 to 9999  Not str r… Prot… Bapt…      NA
 3  2000 Widowed          67 White Not applicable Independe… Prot… No d…       2
 4  2000 Never married    39 White Not applicable Ind,near … Orth… Not …       4
 5  2000 Divorced         25 White Not applicable Not str d… None  Not …       1
 6  2000 Married          25 White $20000 - 24999 Strong de… Prot… Sout…      NA
 7  2000 Never married    36 White $25000 or more Not str r… Chri… Not …       3
 8  2000 Divorced         44 White $7000 to 7999  Ind,near … Prot… Luth…      NA
 9  2000 Married          44 White $25000 or more Not str d… Prot… Other       0
10  2000 Married          47 White $25000 or more Strong re… Prot… Sout…       3
# … with 21,473 more rows</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Since this dataset is provided by a package, you can get more information about the variables with <code>?gss_cat</code>.</p>
</div>
</div>
<p>When factors are stored in a <code>tibble</code>, you cannot see their levels so easily. One way to view them is with <code>count()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(race)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  race      n
  &lt;fct&gt; &lt;int&gt;
1 Other  1959
2 Black  3129
3 White 16395</code></pre>
</div>
</div>
<p>Or with a bar chart using the <code>geom_bar()</code> geom:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb45-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>race)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-11-working-with-factors/index_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid" alt="A bar chart showing the distribution of race. There are ~2000 records with race &quot;Other&quot;, 3000 with race &quot;Black&quot;, and other 15,000 with race &quot;White&quot;." width="672"></p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>When <strong>working with factors</strong>, the <strong>two most common operations</strong> are</p>
<ol type="1">
<li>Changing the <strong>order</strong> of the levels</li>
<li>Changing the <strong>values</strong> of the levels</li>
</ol>
</div>
</div>
<p>Those operations are described in the sections below.</p>
</section>
<section id="modifying-factor-order" class="level2">
<h2 class="anchored" data-anchor-id="modifying-factor-order">Modifying factor order</h2>
<p>It’s often useful to <strong>change the order of the factor levels</strong> in a visualization.</p>
<p>Let’s explore the <code>relig</code> (religion) factor:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(relig)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 15 × 2
   relig                       n
   &lt;fct&gt;                   &lt;int&gt;
 1 No answer                  93
 2 Don't know                 15
 3 Inter-nondenominational   109
 4 Native american            23
 5 Christian                 689
 6 Orthodox-christian         95
 7 Moslem/islam              104
 8 Other eastern              32
 9 Hinduism                   71
10 Buddhism                  147
11 Other                     224
12 None                     3523
13 Jewish                    388
14 Catholic                 5124
15 Protestant              10846</code></pre>
</div>
</div>
<p>We see there are 15 categories in the <code>gss_cat</code> dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(gss_cat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>relig)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$levels
 [1] "No answer"               "Don't know"             
 [3] "Inter-nondenominational" "Native american"        
 [5] "Christian"               "Orthodox-christian"     
 [7] "Moslem/islam"            "Other eastern"          
 [9] "Hinduism"                "Buddhism"               
[11] "Other"                   "None"                   
[13] "Jewish"                  "Catholic"               
[15] "Protestant"              "Not applicable"         

$class
[1] "factor"</code></pre>
</div>
</div>
<p>The first level is “No answer” followed by “Don’t know”, and so on.</p>
<p>Imagine you want to explore the average number of hours spent watching TV (<code>tvhours</code>) per day across religions (<code>relig</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">relig_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(relig) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb50-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tvhours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(tvhours, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb50-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>())</span>
<span id="cb50-5"></span>
<span id="cb50-6">relig_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb50-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> tvhours, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> relig)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb50-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-11-working-with-factors/index_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid" alt="A scatterplot of with tvhours on the x-axis and religion on the y-axis. The y-axis is ordered seemingly aribtrarily making it hard to get any sense of overall pattern." width="672"></p>
</div>
</div>
<p>The y-axis lists the levels of the <code>relig</code> factor in the order of the levels.</p>
<p>However, it is <strong>hard to read this plot</strong> because <strong>there’s no overall pattern</strong>.</p>
<section id="fct_reorder" class="level3">
<h3 class="anchored" data-anchor-id="fct_reorder"><code>fct_reorder</code></h3>
<p>We can improve it by <strong>reordering the levels</strong> of <code>relig</code> using <code>fct_reorder()</code>. <code>fct_reorder(.f, .x, .fun)</code> takes three arguments:</p>
<ul>
<li><code>.f</code>, the factor whose levels you want to modify.</li>
<li><code>.x</code>, a numeric vector that you want to use to reorder the levels.</li>
<li>Optionally, <code>.fun</code>, a function that’s used if there are multiple values of <code>x</code> for each value of <code>f</code>. The default value is <code>median</code>.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">relig_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> tvhours, </span>
<span id="cb51-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_reorder</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> relig, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> tvhours))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-11-working-with-factors/index_files/figure-html/unnamed-chunk-25-1.png" class="img-fluid" alt="The same scatterplot as above, but now the religion is displayed in increasing order of tvhours. &quot;Other eastern&quot; has the fewest tvhours under 2, and &quot;Don't know&quot; has the highest (over 5)." width="672"></p>
</div>
</div>
<p><strong>Reordering</strong> religion makes it <strong>much easier to see</strong> that people in the “Don’t know” category watch much more TV, and Hinduism &amp; Other Eastern religions watch much less.</p>
<p>As you start making more complicated transformations, I recommend moving them out of <code>aes()</code> and into a separate <code>mutate()</code> step.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>You could rewrite the plot above as:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">relig_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">relig =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_reorder</span>(relig, tvhours)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb52-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> tvhours, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> relig)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb52-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-11-working-with-factors/index_files/figure-html/unnamed-chunk-26-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Another example
</div>
</div>
<div class="callout-body-container callout-body">
<p>What if we create a similar plot looking at how average age varies across reported income level?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">rincome_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb53-2">  gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(rincome) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb53-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(age, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb53-5">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>())</span>
<span id="cb53-6"></span>
<span id="cb53-7">rincome_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb53-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> age, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_reorder</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> rincome, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> age))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb53-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-11-working-with-factors/index_files/figure-html/unnamed-chunk-27-1.png" class="img-fluid" alt="A scatterplot with age on the x-axis and income on the y-axis. Income has been reordered in order of average age which doesn't make much sense. One section of the y-axis goes from $6000-6999, then <$1000, then $8000-9999." width="672"></p>
</div>
</div>
<p>Here, arbitrarily reordering the levels isn’t a good idea! That’s because <code>rincome</code> already has a principled order that we shouldn’t mess with.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Reserve <code>fct_reorder()</code> for factors whose levels are arbitrarily ordered.</p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s practice <code>fct_reorder()</code>. Using the <code>palmerpenguins</code> dataset,</p>
<ol type="1">
<li>Calculate the average <code>bill_length_mm</code> for each species</li>
<li>Create a scatter plot showing the average for each species.<br>
</li>
<li>Go back and reorder the factor <code>species</code> based on the average bill length from largest to smallest.</li>
<li>Now order it from smallest to largest</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb54-2">penguins </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;      &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007
 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007
 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007
 4 Adelie  Torgersen           NA            NA           NA      NA &lt;NA&gt;   2007
 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007
 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007
 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007
 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007
 9 Adelie  Torgersen           34.1          18.1        193    3475 &lt;NA&gt;   2007
10 Adelie  Torgersen           42            20.2        190    4250 &lt;NA&gt;   2007
# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,
#   ²​body_mass_g</code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Try it out</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="fct_relevel" class="level3">
<h3 class="anchored" data-anchor-id="fct_relevel"><code>fct_relevel</code></h3>
<p>However, it does make sense to pull “Not applicable” to the front with the other special levels.</p>
<p>You can use <code>fct_relevel()</code>.</p>
<p>It takes a factor, <code>f</code>, and then any number of levels that you want to move to the front of the line.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">rincome_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb57-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(age, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_relevel</span>(rincome, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not applicable"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-11-working-with-factors/index_files/figure-html/unnamed-chunk-29-1.png" class="img-fluid" alt="The same scatterplot but now &quot;Not Applicable&quot; is displayed at the bottom of the y-axis. Generally there is a positive association between income and age, and the income band with the highest average age is &quot;Not applicable&quot;." width="672"></p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Any levels not mentioned in <code>fct_relevel</code> will be left in their existing order.</p>
</div>
</div>
<p>Another type of reordering is useful when you are coloring the lines on a plot. <code>fct_reorder2(f, x, y)</code> reorders the factor <code>f</code> by the <code>y</code> values associated with the largest <code>x</code> values.</p>
<p>This makes the plot easier to read because the colors of the line at the far right of the plot will line up with the legend.</p>
<div>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">by_age <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb58-2">  gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb58-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(age)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb58-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(age, marital) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb58-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(age) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb58-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n))</span>
<span id="cb58-7"></span>
<span id="cb58-8">by_age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb58-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(age, prop, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> marital)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb58-11">by_age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb58-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(age, prop, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_reorder2</span>(marital, age, prop))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital"</span>)</span></code></pre></div>
<div class="cell quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-11-working-with-factors/index_files/figure-html/unnamed-chunk-30-1.png" class="img-fluid" alt="A line plot with age on the x-axis and proportion on the y-axis. There is one line for each category of marital status: no answer, never married, separated, divorced, widowed, and married. It is a little hard to read the plot because the order of the legend is unrelated to the lines on the plot. " width="384"></p>
</div>
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-11-working-with-factors/index_files/figure-html/unnamed-chunk-30-2.png" class="img-fluid" alt="Rearranging the legend makes the plot easier to read because the legend colours now match the order of the lines on the far right of the plot. You can see some unsuprising patterns: the proportion never marred decreases with age, married forms an upside down U shape, and widowed starts off low but increases steeply after age 60." width="384"></p>
</div>
</div>
</div>
</div>
</section>
<section id="fct_infreq" class="level3">
<h3 class="anchored" data-anchor-id="fct_infreq"><code>fct_infreq</code></h3>
<p>Finally, for bar plots, you can use <code>fct_infreq()</code> to order levels in decreasing frequency: this is the simplest type of reordering because it doesn’t need any extra variables. Combine it with <code>fct_rev()</code> if you want them in increasing frequency so that in the bar plot largest values are on the right, not the left.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb59-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">marital =</span> marital <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_infreq</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_rev</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span>  </span>
<span id="cb59-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(marital)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb59-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-11-working-with-factors/index_files/figure-html/unnamed-chunk-31-1.png" class="img-fluid" alt="A bar char of marital status ordered in from least to most common: no answer (~0), separated (~1,000), widowed (~2,000), divorced (~3,000), never married (~5,000), married (~10,000)." width="672"></p>
</div>
</div>
</section>
</section>
<section id="modifying-factor-levels" class="level2">
<h2 class="anchored" data-anchor-id="modifying-factor-levels">Modifying factor levels</h2>
<p>More powerful than changing the orders of the levels is changing their values. This allows you to clarify labels for publication, and collapse levels for high-level displays.</p>
<section id="fct_recode" class="level3">
<h3 class="anchored" data-anchor-id="fct_recode"><code>fct_recode</code></h3>
<p>The most general and powerful tool is <code>fct_recode()</code>. It allows you to recode, or change, the value of each level. For example, take the <code>gss_cat$partyid</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb60-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(partyid)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   partyid                n
   &lt;fct&gt;              &lt;int&gt;
 1 No answer            154
 2 Don't know             1
 3 Other party          393
 4 Strong republican   2314
 5 Not str republican  3032
 6 Ind,near rep        1791
 7 Independent         4119
 8 Ind,near dem        2499
 9 Not str democrat    3690
10 Strong democrat     3490</code></pre>
</div>
</div>
<p>The <strong>levels are terse and inconsistent</strong>.</p>
<p>Let’s tweak them to be longer and use a parallel construction.</p>
<p>Like most rename and recoding functions in the tidyverse:</p>
<ul>
<li>the <strong>new values go on the left</strong></li>
<li>the <strong>old values go on the right</strong></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb62-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">partyid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_recode</span>(partyid,</span>
<span id="cb62-3">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Republican, strong"</span>    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Strong republican"</span>,</span>
<span id="cb62-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Republican, weak"</span>      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not str republican"</span>,</span>
<span id="cb62-5">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Independent, near rep"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ind,near rep"</span>,</span>
<span id="cb62-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Independent, near dem"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ind,near dem"</span>,</span>
<span id="cb62-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Democrat, weak"</span>        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not str democrat"</span>,</span>
<span id="cb62-8">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Democrat, strong"</span>      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Strong democrat"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb62-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(partyid)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   partyid                   n
   &lt;fct&gt;                 &lt;int&gt;
 1 No answer               154
 2 Don't know                1
 3 Other party             393
 4 Republican, strong     2314
 5 Republican, weak       3032
 6 Independent, near rep  1791
 7 Independent            4119
 8 Independent, near dem  2499
 9 Democrat, weak         3690
10 Democrat, strong       3490</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>fct_recode()</code> will leave the levels that aren’t explicitly mentioned as is, and will warn you if you accidentally refer to a level that doesn’t exist.</p>
</div>
</div>
<p>To combine groups, you can assign multiple old levels to the same new level:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb64-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">partyid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_recode</span>(partyid,</span>
<span id="cb64-3">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Republican, strong"</span>    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Strong republican"</span>,</span>
<span id="cb64-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Republican, weak"</span>      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not str republican"</span>,</span>
<span id="cb64-5">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Independent, near rep"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ind,near rep"</span>,</span>
<span id="cb64-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Independent, near dem"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ind,near dem"</span>,</span>
<span id="cb64-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Democrat, weak"</span>        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not str democrat"</span>,</span>
<span id="cb64-8">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Democrat, strong"</span>      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Strong democrat"</span>,</span>
<span id="cb64-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other"</span>                 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No answer"</span>,</span>
<span id="cb64-10">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other"</span>                 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Don't know"</span>,</span>
<span id="cb64-11">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other"</span>                 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other party"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb64-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(partyid)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 8 × 2
  partyid                   n
  &lt;fct&gt;                 &lt;int&gt;
1 Other                   548
2 Republican, strong     2314
3 Republican, weak       3032
4 Independent, near rep  1791
5 Independent            4119
6 Independent, near dem  2499
7 Democrat, weak         3690
8 Democrat, strong       3490</code></pre>
</div>
</div>
<p>Use this technique with care: if you group together categories that are truly different you will end up with misleading results.</p>
</section>
<section id="fct_collapse" class="level3">
<h3 class="anchored" data-anchor-id="fct_collapse"><code>fct_collapse</code></h3>
<p>If you want to collapse a lot of levels, <code>fct_collapse()</code> is a useful variant of <code>fct_recode()</code>.</p>
<p>For <strong>each new variable</strong>, you can <strong>provide a vector of old levels</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1">gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb66-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">partyid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_collapse</span>(partyid,</span>
<span id="cb66-3">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No answer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Don't know"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other party"</span>),</span>
<span id="cb66-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rep"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Strong republican"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not str republican"</span>),</span>
<span id="cb66-5">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ind"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ind,near rep"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Independent"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ind,near dem"</span>),</span>
<span id="cb66-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dem"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not str democrat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Strong democrat"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb66-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(partyid)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
  partyid     n
  &lt;fct&gt;   &lt;int&gt;
1 other     548
2 rep      5346
3 ind      8409
4 dem      7180</code></pre>
</div>
</div>
</section>
<section id="fct_lump_" class="level3">
<h3 class="anchored" data-anchor-id="fct_lump_"><code>fct_lump_*</code></h3>
<p>Sometimes you <strong>just want to lump together the small groups</strong> to make a plot or table simpler.</p>
<p>That’s the <strong>job of the <code>fct_lump_*()</code> family of functions</strong>.</p>
<p><code>fct_lump_lowfreq()</code> is a simple starting point that progressively lumps the smallest groups categories into “Other”, always keeping “Other” as the smallest category.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1">gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb68-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">relig =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_lump_lowfreq</span>(relig)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb68-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(relig)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 2
  relig          n
  &lt;fct&gt;      &lt;int&gt;
1 Protestant 10846
2 Other      10637</code></pre>
</div>
</div>
<p>In this case it’s not very helpful: it is true that the majority of Americans in this survey are Protestant, but we’d probably like to see some more details!</p>
<p>Instead, we can use the <code>fct_lump_n()</code> to <strong>specify that we want exactly 10 groups</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1">gss_cat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb70-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">relig =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_lump_n</span>(relig, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb70-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(relig, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb70-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   relig                       n
   &lt;fct&gt;                   &lt;int&gt;
 1 Protestant              10846
 2 Catholic                 5124
 3 None                     3523
 4 Christian                 689
 5 Other                     458
 6 Jewish                    388
 7 Buddhism                  147
 8 Inter-nondenominational   109
 9 Moslem/islam              104
10 Orthodox-christian         95</code></pre>
</div>
</div>
<p>Read the documentation to learn about <code>fct_lump_min()</code> and <code>fct_lump_prop()</code> which are useful in other cases.</p>
</section>
</section>
<section id="ordered-factors" class="level2">
<h2 class="anchored" data-anchor-id="ordered-factors">Ordered factors</h2>
<p>There’s a <strong>special type of factor</strong> that needs to be mentioned briefly: ordered factors.</p>
<p><strong>Ordered factors</strong>, created with <code>ordered()</code>, imply a strict ordering and equal distance between levels:</p>
<p>The <strong>first level</strong> is “less than” the <strong>second level</strong> by the same amount that the second level is “less than” the <strong>third level</strong>, and so on…</p>
<p>You can recognize them when printing because they use <code>&lt;</code> between the factor levels:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ordered</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] a b c
Levels: a &lt; b &lt; c</code></pre>
</div>
</div>
<p>However, in practice, <code>ordered()</code> factors <strong>behave very similarly to regular factors</strong>.</p>
</section>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Explore the distribution of <code>rincome</code> (reported income). What makes the default bar chart hard to understand? How could you improve the plot?</p></li>
<li><p>What is the most common <code>relig</code> in this survey? What’s the most common <code>partyid</code>?</p></li>
<li><p>Which <code>relig</code> does <code>denom</code> (denomination) apply to? How can you find out with a table? How can you find out with a visualization?</p></li>
<li><p>There are some suspiciously high numbers in <code>tvhours</code>. Is the mean a good summary?</p></li>
<li><p>For each factor in <code>gss_cat</code> identify whether the order of the levels is arbitrary or principled.</p></li>
<li><p>Why did moving “Not applicable” to the front of the levels move it to the bottom of the plot?</p></li>
<li><p>How have the proportions of people identifying as Democrat, Republican, and Independent changed over time?</p></li>
<li><p>How could you collapse <code>rincome</code> into a small set of categories?</p></li>
<li><p>Notice there are 9 groups (excluding other) in the <code>fct_lump</code> example above. Why not 10? (Hint: type <code>?fct_lump</code>, and find the default for the argument <code>other_level</code> is “Other”.)</p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://r4ds.had.co.nz/factors" class="uri">https://r4ds.had.co.nz/factors</a></li>
<li><a href="https://peerj.com/preprints/3163">Wrangling Categorical Data in R</a> by Amelia McNamara, Nicholas J Horton</li>
<li><a href="https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors" class="uri">https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors</a></li>
<li><a href="https://forcats.tidyverse.org" class="uri">https://forcats.tidyverse.org</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 5</category>
  <category>week 7</category>
  <category>tidyverse</category>
  <category>factors</category>
  <category>categorial variables</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-11-working-with-factors/index.html</guid>
  <pubDate>Tue, 11 Oct 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Regular expressions</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-06-regular-expressions/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://r4ds.had.co.nz/strings" class="uri">https://r4ds.had.co.nz/strings</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-regular-expressions" class="uri">https://rdpeng.github.io/Biostat776/lecture-regular-expressions</a></li>
<li><a href="https://r4ds.had.co.nz/strings" class="uri">https://r4ds.had.co.nz/strings</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Understand what is a ‘regular expression’ and how to create one</li>
<li>Learn the basics of searching for patterns in character strings in base R and the <code>stringr</code> R package in the <code>tidyverse</code></li>
<li>Use the built in character sets to search for patterns in strings including <code>"\n"</code>, <code>"\t"</code>, <code>"\w"</code>, <code>"\d"</code>, and <code>"\s"</code></li>
</ul>
</div>
</div>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<section id="regex-basics" class="level2">
<h2 class="anchored" data-anchor-id="regex-basics">regex basics</h2>
<p>A <strong>regular expression</strong> (also known as a “regex” or “regexp”) is a concise language for describing patterns in character strings.</p>
<p>Regex could be <strong>patterns that could be contained within another string</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>For example, if we wanted to search for the pattern “ai” in the character string “The rain in Spain”, we see it appears twice!</p>
<p>“The r<strong>ai</strong>n in Sp<strong>ai</strong>n”</p>
</div>
</div>
<p>Generally, a regular expression can be used for e.g.</p>
<ul>
<li><strong>searching for a pattern or string</strong> within another string (e.g searching for the string “a” in the string “Maryland”)</li>
<li><strong>replacing one part of a string</strong> with another string (e.g replacing the string “t” with “p” in the string “hot” where you are changing the string “hot” to “hop”)</li>
</ul>
<p>If you have never worked with regular expressions, it can seem like maybe a baby hit the keys on your keyboard (complete gibberish), but it will slowly make sense once you learn the syntax.</p>
<p>Soon you will <strong>be able create incredibly powerful regular expressions</strong> in your day-to-day work.</p>
</section>
<section id="string-basics" class="level2">
<h2 class="anchored" data-anchor-id="string-basics">string basics</h2>
<p>In R, you can <strong>create (character) strings</strong> with either single quotes (<code>'hello!'</code>) or double quotes (<code>"hello!"</code>) – no difference (not true for other languages!).</p>
<p>I <strong>recommend using the double quotes</strong>, unless you want to create a string with multiple <code>"</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">string1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a string"</span></span>
<span id="cb1-2">string2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'If I want to include a "quote" inside a string, I use single quotes'</span></span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Strings can be tricky when executing them. If you forget to close a quote, you’ll see <code>+</code></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a string without a closing quote</span></span>
<span id="cb2-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">+ </span></span>
<span id="cb2-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">+ </span></span>
<span id="cb2-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">+ HELP I'M STUCK</span></span></code></pre></div>
<p>If this happen to you, take a deep breath, press <code>Escape</code> and try again.</p>
</div>
</div>
<p>Multiple strings are often stored in a character vector, which you can create with <code>c()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"three"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "one"   "two"   "three"</code></pre>
</div>
</div>
</section>
</section>
<section id="grepl" class="level1">
<h1><code>grepl()</code></h1>
<p>One of the <strong>most basic functions in R that uses regular expressions</strong> is the <code>grepl(pattern, x)</code> function, which takes <strong>two arguments</strong> and <strong>returns a logical</strong>:</p>
<ol type="1">
<li>A regular expression (<code>pattern</code>)</li>
<li>A string to be searched (<code>x</code>)</li>
</ol>
<p>In case you are curious, “grepl” literally translates to “grep logical”.</p>
<p>If the string (<code>x</code>) contains the specified regular expression (<code>pattern</code>), then <code>grepl()</code> will return <code>TRUE</code>, otherwise it will return <code>FALSE</code>.</p>
<p>Let’s take a look at one example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">regular_expression <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb5-2">string_to_search <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maryland"</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> regular_expression, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> string_to_search)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>In the example above, we specify the regular expression <code>"a"</code> and store it in a variable called <code>regular_expression</code>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Remember</strong> that regular expressions are just strings!</p>
</div>
</div>
<p>We also store the string <code>"Maryland"</code> in a variable called <code>string_to_search</code>.</p>
<p>The regular expression <code>"a"</code> represents a single occurrence of the character <code>"a"</code>. Since <code>"a"</code> is contained within <code>"Maryland"</code>, <code>grepl()</code> returns the value <code>TRUE</code>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s try another simple example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">regular_expression <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u"</span></span>
<span id="cb7-2">string_to_search <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maryland"</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> regular_expression, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> string_to_search)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>The regular expression <code>"u"</code> represents a single occurrence of the character <code>"u"</code>, which is not a sub-string of <code>"Maryland"</code>, therefore <code>grepl()</code> returns the value <code>FALSE</code>.</p>
</div>
</div>
<p>Regular expressions can be much longer than single characters. You could for example search for smaller strings inside of a larger string:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"land"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maryland"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ryla"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maryland"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Marly"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maryland"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dany"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maryland"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>Since <code>"land"</code> and <code>"ryla"</code> are sub-strings of <code>"Maryland"</code>, <code>grepl()</code> returns <code>TRUE</code>, however when a regular expression like <code>"Marly"</code> or <code>"dany"</code> is searched <code>grepl()</code> returns <code>FALSE</code> because neither are sub-strings of <code>"Maryland"</code>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Introduce the US states dataset <code>state.name</code>
</div>
</div>
<div class="callout-body-container callout-body">
<p>There is a dataset that comes with R called <code>state.name</code> which is a vector of strings, one for each state in the United States of America.</p>
<p>We are going to use this vector in several of the following examples.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(state.name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Alabama"    "Alaska"     "Arizona"    "Arkansas"   "California"
[6] "Colorado"  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(state.name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 50</code></pre>
</div>
</div>
</div>
</div>
<p>Next, we will build a <strong>regular expression for identifying several strings in this vector</strong> of character strings, specifically a regular expression that will match names of states that both start and end with a vowel.</p>
<p>The state name could start and end with any vowel, so we will not be able to match exact sub-strings like in the previous examples. Thankfully we can use <strong>metacharacters</strong> to look for vowels and other parts of strings.</p>
<section id="metacharacters" class="level2">
<h2 class="anchored" data-anchor-id="metacharacters">metacharacters</h2>
<p>The first metacharacter that we will discuss is <code>"."</code>.</p>
<p>The metacharacter that only consists of a period <strong>represents any character other than a new line</strong> (we will discuss new lines soon).</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s take a look at some examples using the period regex:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maryland"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*&amp;2[0+,%&lt;@#~|}"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
</div>
</div>
<p>As you can see the <strong>period metacharacter is very liberal</strong>.</p>
<p>This metacharacter is <strong>most useful when you do not care about a set of characters</strong> in a regular expression.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here is another example</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a.b"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aaa"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aab"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"acadb"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE  TRUE  TRUE  TRUE</code></pre>
</div>
</div>
<p>In the case above, <code>grepl()</code> returns <code>TRUE</code> for all strings that contain an <code>a</code> followed by any other character followed by a <code>b</code>.</p>
</div>
</div>
</section>
<section id="repetition" class="level2">
<h2 class="anchored" data-anchor-id="repetition">repetition</h2>
<p>You can specify a regular expression that <strong>contains a certain number of characters or metacharacters</strong> using the <strong>enumeration metacharacters</strong> (or sometimes called <strong>quantifiers</strong>).</p>
<ul>
<li><code>+</code>: indicates that <strong>one or more of the preceding expression</strong> should be present (or matches at least 1 time)</li>
<li><code>*</code>: indicates that <strong>zero or more of the preceding expression</strong> is present (or matches at least 0 times)</li>
<li><code>?</code>: indicates that <strong>zero or 1 of the preceding expression is not present or present at most 1 time</strong> (or matches between 0 and 1 times)</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s take a look at some examples using these metacharacters:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Does "Maryland" contain one or more of "a" ?</span></span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a+"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maryland"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Does "Maryland" contain one or more of "x" ?</span></span>
<span id="cb31-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x+"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maryland"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Does "Maryland" contain zero or more of "x" ?</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x*"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maryland"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</div>
</div>
<p>If you want to do more than one character, you need to wrap it in <code>()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Does "Maryland" contain zero or more of "x" ?</span></span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(xx)*"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maryland"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s practice a few out together. Make the following regular expressions for the character string “spookyhalloween”:</p>
<ol type="1">
<li>Does “zz” appear 1 or more times?</li>
<li>Does “ee” appear 1 or more times?</li>
<li>Does “oo” appear 0 or more times?</li>
<li>Does “ii” appear 0 or more times?</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## try it out</span></span></code></pre></div>
</div>
</div>
</div>
<p>You can also <strong>specify exact numbers of expressions</strong> using curly brackets <code>{}</code>.</p>
<ul>
<li><code>{n}</code>: exactly n</li>
<li><code>{n,}</code>: n or more</li>
<li><code>{,m}</code>: at most m</li>
<li><code>{n,m}</code>: between n and m</li>
</ul>
<p>For example <code>"a{5}"</code> specifies “a exactly five times”, <code>"a{2,5}"</code> specifies “a between 2 and 5 times,” and <code>"a{2,}"</code> specifies “a at least 2 times.” Let’s take a look at some examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Does "Mississippi" contain exactly 2 adjacent "s" ?</span></span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s{2}"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mississippi"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is equivalent to the expression above:</span></span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ss"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mississippi"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Does "Mississippi" contain between 1 and 3 adjacent "s" ?</span></span>
<span id="cb42-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s{1,3}"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mississippi"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Does "Mississippi" contain between 2 and 3 adjacent "i" ?</span></span>
<span id="cb44-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i{2,3}"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mississippi"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Does "Mississippi" contain between 2 adjacent "iss" ?</span></span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(iss){2}"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mississippi"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Does "Mississippi" contain between 2 adjacent "ss" ?</span></span>
<span id="cb48-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(ss){2}"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mississippi"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Does "Mississippi" contain the pattern of an "i" followed by </span></span>
<span id="cb50-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2 of any character, with that pattern repeated three times adjacently?</span></span>
<span id="cb50-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(i.{2}){3}"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mississippi"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s practice a few out together. Make the following regular expressions for the character string “spookyspookyhalloweenspookyspookyhalloween”:</p>
<ol type="1">
<li>Search for “spooky” exactly 2 times. What about 3 times?</li>
<li>Search for “spooky” exactly 2 times followed by any character of length 9 (i.e.&nbsp;“halloween”).</li>
<li>Same search as above, but search for that twice in a row.</li>
<li>Same search as above, but search for that three times in a row.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## try it out</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="capture-group" class="level2">
<h2 class="anchored" data-anchor-id="capture-group">capture group</h2>
<p>In the examples above, I used parentheses <code>()</code> to create a <strong>capturing group</strong>. A capturing group allows you to use quantifiers on other regular expressions.</p>
<p>In the “Mississippi” example, I first created the regex <code>"i.{2}"</code> which matches <code>i</code> followed by any two characters (“iss” or “ipp”). Then, I used a capture group to wrap that regex, and to specify exactly three adjacent occurrences of that regex.</p>
<p>You can specify <strong>sets of characters</strong> (or character sets or character classes) with regular expressions, some of which come built in, but you can build your own <strong>character sets</strong> too.</p>
<p>More on character sets next.</p>
</section>
<section id="character-sets" class="level2">
<h2 class="anchored" data-anchor-id="character-sets">character sets</h2>
<p>First, we will discuss the built in <strong>character sets</strong>:</p>
<ul>
<li>words (<code>"\\w"</code>) = <strong>Words</strong> specify <strong>any letter, digit, or a underscore</strong></li>
<li>digits (<code>"\\d"</code>) = <strong>Digits</strong> specify the <strong>digits 0 through 9</strong></li>
<li>whitespace characters (<code>"\\s"</code>) = <strong>Whitespace</strong> specifies <strong>line breaks, tabs, or spaces</strong></li>
</ul>
<p>Each of these character sets have their own <strong>compliments</strong>:</p>
<ul>
<li>not words (<code>"\\W"</code>)</li>
<li>not digits (<code>"\\D"</code>)</li>
<li>not whitespace characters (<code>"\\S"</code>)</li>
</ul>
<p>Each specifies all of the characters not included in their corresponding character sets.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Interesting fact
</div>
</div>
<div class="callout-body-container callout-body">
<p>Technically, you are using the a character set <code>"\d"</code> or <code>"\s"</code> (with only one black slash), but because you are using this character set in a string, you need the second <code>\</code> to escape the string. So you will type <code>"\\d"</code> or <code>"\\s"</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "\\d"</code></pre>
</div>
</div>
<p>So for example, to include a literal single or double quote in a string you can use <code>\</code> to “escape” the string and being able to include a single or double quote:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">double_quote <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> </span>
<span id="cb55-2">double_quote</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "\""</code></pre>
</div>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">single_quote <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb57-2">single_quote</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "'"</code></pre>
</div>
</div>
<p>That means if you want to include a literal backslash, you will need to double it up: <code>"\\"</code>.</p>
</div>
</div>
<p>In fact, putting <strong>two backslashes before any punctuation mark that is also a metacharacter</strong> indicates that you are <strong>looking for the symbol and not the metacharacter meaning</strong>.</p>
<p>For example <code>"\\."</code> indicates you are trying to match a period in a string. Let’s take a look at a few examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">+"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tragedy + time = humor"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://publichealth.jhu.edu"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Beware
</div>
</div>
<div class="callout-body-container callout-body">
<p>The printed representation of a string is not the same as string itself, because the printed representation shows the escapes. To see the raw contents of the string, use <code>writeLines()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb63-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "'"  "\"" "\\"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeLines</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'
"
\</code></pre>
</div>
</div>
</div>
</div>
<p>There are a handful of <strong>other special characters</strong>. The most common are</p>
<ul>
<li><code>"\n"</code>: newline</li>
<li><code>"\t"</code>: tab,</li>
</ul>
<p>but you can see the complete list by requesting help (run the following in the console and a help file will appear:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">?<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span></span></code></pre></div>
</div>
<p>You will also sometimes see strings like “0b5”, this is a way of writing non-English characters that works on all platforms:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">t"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">n"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\u00b5"</span>)</span>
<span id="cb68-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "\\t" "\\n" "µ"  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeLines</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>\t
\n
µ</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s take a look at a few examples of built in character sets: <code>"\w"</code>, <code>"\d"</code>, <code>"\s"</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abcdefghijklmnopqrstuvwxyz0123456789"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0123456789"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "\n" is the metacharacter for a new line</span></span>
<span id="cb76-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "\t" is the metacharacter for a tab</span></span>
<span id="cb76-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   "</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abcdefghijklmnopqrstuvwxyz"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abcdefghijklmnopqrstuvwxyz"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   "</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="brackets" class="level2">
<h2 class="anchored" data-anchor-id="brackets">brackets</h2>
<p>You can also <strong>specify specific character sets</strong> using <strong>straight brackets</strong> <code>[]</code>.</p>
<p>For example a <strong>character set of just the vowels</strong> would look like: <code>"[aeiou]"</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[aeiou]"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rhythms"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>You can find the complement to a specific character by putting a carrot <code>^</code> after the first bracket. For example <code>"[^aeiou]"</code> matches all characters except the lowercase vowels.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[^aeiou]"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rhythms"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</section>
<section id="ranges" class="level2">
<h2 class="anchored" data-anchor-id="ranges">ranges</h2>
<p>You can also <strong>specify ranges of characters</strong> using a <strong>hyphen</strong> <code>-</code> inside of the brackets.</p>
<p>For example:</p>
<ul>
<li><code>"[a-m]"</code> matches all of the lowercase characters between <code>a</code> and <code>m</code></li>
<li><code>"[5-8]"</code> matches any digit between 5 and 8 inclusive</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s take a look at some examples using custom character sets:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a-m]"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xyz"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a-m]"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABC"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb92-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a-mA-M]"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABC"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="beginning-and-end" class="level2">
<h2 class="anchored" data-anchor-id="beginning-and-end">beginning and end</h2>
<p>There are also metacharacters for <strong>matching the beginning</strong> and <strong>the end of a string</strong> which are <code>"^"</code> and <code>"$"</code> respectively.</p>
<p>Let’s take a look at a few examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb94-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^a"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bab"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aab"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE  TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb96-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b$"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bab"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aab"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb98-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^[ab]*$"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bab"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aab"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE FALSE</code></pre>
</div>
</div>
</section>
<section id="or-metacharacter" class="level2">
<h2 class="anchored" data-anchor-id="or-metacharacter">OR metacharacter</h2>
<p>The last metacharacter we will discuss is the <strong>OR metacharacter</strong> (<code>"|"</code>).</p>
<p>The OR metacharacter <strong>matches either the regex on the left or the regex on the right</strong> side of this character. A few examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb100-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a|b"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cde"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb102-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North|South"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South Dakota"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North Carolina"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"West Virginia"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE FALSE</code></pre>
</div>
</div>
</section>
<section id="state.name-example" class="level2">
<h2 class="anchored" data-anchor-id="state.name-example"><code>state.name</code> example</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Finally, we have learned enough to create a regular expression that matches all state names that both begin and end with a vowel:</p>
<ol type="1">
<li>We match the beginning of a string.</li>
<li>We create a character set of just capitalized vowels.</li>
<li>We specify one instance of that set.</li>
<li>Then any number of characters until:</li>
<li>A character set of just lowercase vowels.</li>
<li>We specify one instance of that set.</li>
<li>We match the end of a string.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb104-1">start_end_vowel <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^[AEIOU]{1}.+[aeiou]{1}$"</span></span>
<span id="cb104-2">vowel_state_lgl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(start_end_vowel, state.name)</span>
<span id="cb104-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(vowel_state_lgl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb106-1">state.name[vowel_state_lgl]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Alabama"  "Alaska"   "Arizona"  "Idaho"    "Indiana"  "Iowa"     "Ohio"    
[8] "Oklahoma"</code></pre>
</div>
</div>
</div>
</div>
<p>Below is a table of several important metacharacters:</p>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: center;">Metacharacter</th>
<th style="text-align: center;">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">.</td>
<td style="text-align: center;">Any Character</td>
</tr>
<tr class="even">
<td style="text-align: center;">\w</td>
<td style="text-align: center;">A Word</td>
</tr>
<tr class="odd">
<td style="text-align: center;">\W</td>
<td style="text-align: center;">Not a Word</td>
</tr>
<tr class="even">
<td style="text-align: center;">\d</td>
<td style="text-align: center;">A Digit</td>
</tr>
<tr class="odd">
<td style="text-align: center;">\D</td>
<td style="text-align: center;">Not a Digit</td>
</tr>
<tr class="even">
<td style="text-align: center;">\s</td>
<td style="text-align: center;">Whitespace</td>
</tr>
<tr class="odd">
<td style="text-align: center;">\S</td>
<td style="text-align: center;">Not Whitespace</td>
</tr>
<tr class="even">
<td style="text-align: center;">[xyz]</td>
<td style="text-align: center;">A Set of Characters</td>
</tr>
<tr class="odd">
<td style="text-align: center;">[^xyz]</td>
<td style="text-align: center;">Negation of Set</td>
</tr>
<tr class="even">
<td style="text-align: center;">[a-z]</td>
<td style="text-align: center;">A Range of Characters</td>
</tr>
<tr class="odd">
<td style="text-align: center;">^</td>
<td style="text-align: center;">Beginning of String</td>
</tr>
<tr class="even">
<td style="text-align: center;">$</td>
<td style="text-align: center;">End of String</td>
</tr>
<tr class="odd">
<td style="text-align: center;">\n</td>
<td style="text-align: center;">Newline</td>
</tr>
<tr class="even">
<td style="text-align: center;">+</td>
<td style="text-align: center;">One or More of Previous</td>
</tr>
<tr class="odd">
<td style="text-align: center;">*</td>
<td style="text-align: center;">Zero or More of Previous</td>
</tr>
<tr class="even">
<td style="text-align: center;">?</td>
<td style="text-align: center;">Zero or One of Previous</td>
</tr>
<tr class="odd">
<td style="text-align: center;">|</td>
<td style="text-align: center;">Either the Previous or the Following</td>
</tr>
<tr class="even">
<td style="text-align: center;">{5}</td>
<td style="text-align: center;">Exactly 5 of Previous</td>
</tr>
<tr class="odd">
<td style="text-align: center;">{2, 5}</td>
<td style="text-align: center;">Between 2 and 5 or Previous</td>
</tr>
<tr class="even">
<td style="text-align: center;">{2, }</td>
<td style="text-align: center;">More than 2 of Previous</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
</section>
<section id="other-regex-in-base-r" class="level1">
<h1>Other regex in base R</h1>
<p>So far we’ve been using <code>grepl()</code> to see if a regex matches a string. There are a few other built in regex functions you should be aware of.</p>
<p>First, we will review our workhorse of this lesson, <code>grepl()</code>, which stands for “grep logical.”</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb108-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[Ii]"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hawaii"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Illinois"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kentucky"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE FALSE</code></pre>
</div>
</div>
<section id="grep" class="level2">
<h2 class="anchored" data-anchor-id="grep"><code>grep()</code></h2>
<p>Then, there is old fashioned <code>grep(pattern, x)</code>, which <strong>returns the indices of the vector</strong> that match the regex:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb110-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[Ii]"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hawaii"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Illinois"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kentucky"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2</code></pre>
</div>
</div>
</section>
<section id="sub" class="level2">
<h2 class="anchored" data-anchor-id="sub"><code>sub()</code></h2>
<p>The <code>sub(pattern, replacement, x)</code> function takes as arguments a regex, a “replacement,” and a vector of strings. This function will <strong>replace the first instance of that regex found in each string</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb112-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[Ii]"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hawaii"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Illinois"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kentucky"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hawa1i"   "1llinois" "Kentucky"</code></pre>
</div>
</div>
</section>
<section id="gsub" class="level2">
<h2 class="anchored" data-anchor-id="gsub"><code>gsub()</code></h2>
<p>The <code>gsub(pattern, replacement, x)</code> function is nearly the same as <code>sub()</code> except it will <strong>replace every instance of the regex</strong> that is matched in each string.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb114-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[Ii]"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hawaii"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Illinois"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kentucky"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hawa11"   "1ll1no1s" "Kentucky"</code></pre>
</div>
</div>
</section>
<section id="strsplit" class="level2">
<h2 class="anchored" data-anchor-id="strsplit"><code>strsplit()</code></h2>
<p>The <code>strsplit(x, split)</code> function will <strong>split up strings</strong> (<code>split</code>) according to the provided regex (<code>x</code>) .</p>
<p>If <code>strsplit()</code> is provided with a vector of strings it will return a list of string vectors.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb116-1">two_s <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> state.name[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ss"</span>, state.name)]</span>
<span id="cb116-2">two_s</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Massachusetts" "Mississippi"   "Missouri"      "Tennessee"    </code></pre>
</div>
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb118-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> two_s, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">split =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ss"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "Ma"        "achusetts"

[[2]]
[1] "Mi"   "i"    "ippi"

[[3]]
[1] "Mi"   "ouri"

[[4]]
[1] "Tenne" "ee"   </code></pre>
</div>
</div>
</section>
</section>
<section id="the-stringr-package" class="level1">
<h1>The stringr package</h1>
<p>The <a href="https://github.com/hadley/stringr"><code>stringr</code></a> package, written by <a href="http://hadley.nz/">Hadley Wickham</a>, is part of the <a href="https://twitter.com/hadleywickham/status/751805589425000450">Tidyverse</a> group of R packages.</p>
<p>This package <strong>takes a “data first” approach to functions involving regex</strong>, so usually the string is the first argument and the regex is the second argument.</p>
<p>The majority of the function names in <code>stringr</code> <strong>begin</strong> with <code>str_*()</code>.</p>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-06-regular-expressions/https:/raw.githubusercontent.com/rstudio/cheatsheets/master/pngs/thumbnails/strings-cheatsheet-thumbs.png" class="img-fluid" data-preview="TRUE"></p>
<p>[<strong>Source</strong>: <a href="https://stringr.tidyverse.org" class="uri">https://stringr.tidyverse.org</a> ]</p>
<section id="str_extract" class="level2">
<h2 class="anchored" data-anchor-id="str_extract"><code>str_extract</code></h2>
<p>The <code>str_extract(string, pattern)</code> function returns the sub-string of a string (<code>string</code>) that matches the provided regular expression (<code>pattern</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb120-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb120-2">state_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(state.name, state.area, state.abb)</span>
<span id="cb120-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(state_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Alabama 51609 AL"     "Alaska 589757 AK"     "Arizona 113909 AZ"   
[4] "Arkansas 53104 AR"    "California 158693 CA" "Colorado 104247 CO"  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb122-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(state_tbl, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "51609"  "589757" "113909" "53104"  "158693" "104247" "5009"   "2057"  
 [9] "58560"  "58876"  "6450"   "83557"  "56400"  "36291"  "56290"  "82264" 
[17] "40395"  "48523"  "33215"  "10577"  "8257"   "58216"  "84068"  "47716" 
[25] "69686"  "147138" "77227"  "110540" "9304"   "7836"   "121666" "49576" 
[33] "52586"  "70665"  "41222"  "69919"  "96981"  "45333"  "1214"   "31055" 
[41] "77047"  "42244"  "267339" "84916"  "9609"   "40815"  "68192"  "24181" 
[49] "56154"  "97914" </code></pre>
</div>
</div>
</section>
<section id="str_detect" class="level2">
<h2 class="anchored" data-anchor-id="str_detect"><code>str_detect</code></h2>
<p>The <code>str_detect(string, pattern)</code> is equivalent to <code>grepl(pattern,x)</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb124-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(state_tbl, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[46] TRUE TRUE TRUE TRUE TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb126-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+"</span>, state_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[46] TRUE TRUE TRUE TRUE TRUE</code></pre>
</div>
</div>
<p>It detects the presence or absence of a pattern in a string.</p>
</section>
<section id="str_order" class="level2">
<h2 class="anchored" data-anchor-id="str_order"><code>str_order</code></h2>
<p>The <code>str_order(x)</code> function returns a numeric vector that corresponds to the alphabetical order of the strings in the provided vector (<code>x</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb128-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(state.name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Alabama"    "Alaska"     "Arizona"    "Arkansas"   "California"
[6] "Colorado"  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb130-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_order</span>(state.name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50</code></pre>
</div>
<div class="sourceCode cell-code" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb132-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(state.abb)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "AL" "AK" "AZ" "AR" "CA" "CO"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb134-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_order</span>(state.abb)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  2  1  4  3  5  6  7  8  9 10 11 15 12 13 14 16 17 18 21 20 19 22 23 25 24
[26] 26 33 34 27 29 30 31 28 32 35 36 37 38 39 40 41 42 43 44 46 45 47 49 48 50</code></pre>
</div>
</div>
</section>
<section id="str_replace" class="level2">
<h2 class="anchored" data-anchor-id="str_replace"><code>str_replace</code></h2>
<p>The <code>str_replace(string, pattern, replace)</code> is equivalent to <code>sub(pattern, replacement, x)</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb136" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb136-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">string =</span> state.name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[Aa]"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "Blabama"        "Blaska"         "Brizona"        "Brkansas"      
 [5] "CBlifornia"     "ColorBdo"       "Connecticut"    "DelBware"      
 [9] "FloridB"        "GeorgiB"        "HBwaii"         "IdBho"         
[13] "Illinois"       "IndiBna"        "IowB"           "KBnsas"        
[17] "Kentucky"       "LouisiBna"      "MBine"          "MBryland"      
[21] "MBssachusetts"  "MichigBn"       "MinnesotB"      "Mississippi"   
[25] "Missouri"       "MontBna"        "NebrBska"       "NevBda"        
[29] "New HBmpshire"  "New Jersey"     "New Mexico"     "New York"      
[33] "North CBrolina" "North DBkota"   "Ohio"           "OklBhoma"      
[37] "Oregon"         "PennsylvBnia"   "Rhode IslBnd"   "South CBrolina"
[41] "South DBkota"   "Tennessee"      "TexBs"          "UtBh"          
[45] "Vermont"        "VirginiB"       "WBshington"     "West VirginiB" 
[49] "Wisconsin"      "Wyoming"       </code></pre>
</div>
<div class="sourceCode cell-code" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb138-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[Aa]"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span> state.name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "Blabama"        "Blaska"         "Brizona"        "Brkansas"      
 [5] "CBlifornia"     "ColorBdo"       "Connecticut"    "DelBware"      
 [9] "FloridB"        "GeorgiB"        "HBwaii"         "IdBho"         
[13] "Illinois"       "IndiBna"        "IowB"           "KBnsas"        
[17] "Kentucky"       "LouisiBna"      "MBine"          "MBryland"      
[21] "MBssachusetts"  "MichigBn"       "MinnesotB"      "Mississippi"   
[25] "Missouri"       "MontBna"        "NebrBska"       "NevBda"        
[29] "New HBmpshire"  "New Jersey"     "New Mexico"     "New York"      
[33] "North CBrolina" "North DBkota"   "Ohio"           "OklBhoma"      
[37] "Oregon"         "PennsylvBnia"   "Rhode IslBnd"   "South CBrolina"
[41] "South DBkota"   "Tennessee"      "TexBs"          "UtBh"          
[45] "Vermont"        "VirginiB"       "WBshington"     "West VirginiB" 
[49] "Wisconsin"      "Wyoming"       </code></pre>
</div>
</div>
</section>
<section id="str_pad" class="level2">
<h2 class="anchored" data-anchor-id="str_pad"><code>str_pad</code></h2>
<p>The <code>str_pad(string, width, side, pad)</code> function pads strings (<code>string</code>) with other characters, which is often useful when the string is going to be eventually printed for a person to read.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb140-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Thai"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">side =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "----Thai"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb142-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Thai"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">side =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Thai----"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb144-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Thai"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">side =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"both"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "--Thai--"</code></pre>
</div>
</div>
<p>The <code>str_to_title(string)</code> function acts just like <code>tolower()</code> and <code>toupper()</code> except it puts strings into Title Case.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb146-1">cases <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CAPS"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>)</span>
<span id="cb146-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_to_title</span>(cases)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Caps"  "Low"   "Title"</code></pre>
</div>
</div>
</section>
<section id="str_trim" class="level2">
<h2 class="anchored" data-anchor-id="str_trim"><code>str_trim</code></h2>
<p>The <code>str_trim(string)</code> function deletes white space from both sides of a string.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb148-1">to_trim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"   space"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the    "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"    final frontier  "</span>)</span>
<span id="cb148-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_trim</span>(to_trim)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "space"          "the"            "final frontier"</code></pre>
</div>
</div>
</section>
<section id="str_wrap" class="level2">
<h2 class="anchored" data-anchor-id="str_wrap"><code>str_wrap</code></h2>
<p>The <code>str_wrap(string)</code> function inserts newlines in strings so that when the string is printed each line’s length is limited.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb150" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb150-1">pasted_states <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(state.name[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb150-2"></span>
<span id="cb150-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_wrap</span>(pasted_states, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Alabama Alaska Arizona Arkansas California Colorado Connecticut Delaware Florida
Georgia Hawaii Idaho Illinois Indiana Iowa Kansas Kentucky Louisiana Maine
Maryland</code></pre>
</div>
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb152-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_wrap</span>(pasted_states, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Alabama Alaska Arizona
Arkansas California Colorado
Connecticut Delaware Florida
Georgia Hawaii Idaho Illinois
Indiana Iowa Kansas Kentucky
Louisiana Maine Maryland</code></pre>
</div>
</div>
</section>
<section id="word" class="level2">
<h2 class="anchored" data-anchor-id="word"><code>word</code></h2>
<p>The <code>word()</code> function allows you to index each word in a string as if it were a vector.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb154-1">a_tale <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It was the best of times it was the worst of times it was the age of wisdom it was the age of foolishness"</span></span>
<span id="cb154-2"></span>
<span id="cb154-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">word</span>(a_tale, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "was"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb156-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">word</span>(a_tale, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># end = last word to extract</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "It was the"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb158-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">word</span>(a_tale, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start = first word to extract</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "of times it was the"</code></pre>
</div>
</div>
</section>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<p>There is a corpus of common words here:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb160" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb160-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>words)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a"        "able"     "about"    "absolute" "accept"   "account" </code></pre>
</div>
<div class="sourceCode cell-code" id="cb162" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb162-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>words)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 980</code></pre>
</div>
</div>
<ol type="1">
<li>Using <code>stringr::words</code>, create regular expressions that find all words that:</li>
</ol>
<ul>
<li>Start with “y”.</li>
<li>End with “x”</li>
<li>Are exactly three letters long. (Don’t cheat by using str_length()!)</li>
<li>Have seven letters or more.</li>
</ul>
<ol start="2" type="1">
<li>Using the same <code>stringr::words</code>, create regular expressions to find all words that:</li>
</ol>
<ul>
<li>Start with a vowel.</li>
<li>That only contain consonants. (Hint: thinking about matching “not”-vowels.)</li>
<li>End with <code>ed</code>, but not with <code>eed</code>.</li>
<li>End with <code>ing</code> or <code>ise</code>.</li>
</ul>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://stringr.tidyverse.org" class="uri">https://stringr.tidyverse.org</a></li>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-regular-expressions" class="uri">https://rdpeng.github.io/Biostat776/lecture-regular-expressions</a></li>
<li><a href="https://r4ds.had.co.nz/strings" class="uri">https://r4ds.had.co.nz/strings</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 5</category>
  <category>week 6</category>
  <category>tidyverse</category>
  <category>R</category>
  <category>programming</category>
  <category>strings and regex</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-06-regular-expressions/index.html</guid>
  <pubDate>Thu, 06 Oct 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with dates and times</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-04-working-with-dates-and-times/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://r4ds.had.co.nz/dates-and-times" class="uri">https://r4ds.had.co.nz/dates-and-times</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://jhu-advdatasci.github.io/2018/lectures/09-dates-times" class="uri">https://jhu-advdatasci.github.io/2018/lectures/09-dates-times</a></li>
<li><a href="https://r4ds.had.co.nz/dates-and-times" class="uri">https://r4ds.had.co.nz/dates-and-times</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Recognize the <code>Date</code>, <code>POSIXct</code> and <code>POSIXlt</code> class types in R to represent dates and times</li>
<li>Learn how to create date and time objects in R using functions from the <code>lubridate</code> package</li>
<li>Learn how dealing with time zones can be frustrating 🙀 but hopefully less so after today’s lecture 😺</li>
<li>Learn how to perform arithmetic operations on dates and times</li>
<li>Learn how plotting systems in R “know” about dates and times to appropriately handle axis labels</li>
</ul>
</div>
</div>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this lesson, we will <strong>learn how to work with dates and times</strong> in R. These may seem simple as you use them all of the time in your day-to-day life, but the more you work with them, the more complicated they seem to get.</p>
<p><strong>Dates and times are hard to work with</strong> because they have to reconcile <strong>two physical phenomena</strong></p>
<ol type="1">
<li>The rotation of the Earth and its orbit around the sun AND</li>
<li>A whole raft of geopolitical phenomena including months, time zones, and daylight savings time (DST)</li>
</ol>
<p>This lesson will not teach you every last detail about dates and times, but it will give you a solid grounding of <strong>practical skills</strong> that will help you with common data analysis challenges.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Classes for dates and times in R
</div>
</div>
<div class="callout-body-container callout-body">
<p>R has developed a special representation of dates and times</p>
<ul>
<li>Dates are represented by the <code>Date</code> class</li>
<li>Times are represented by the <code>POSIXct</code> or the <code>POSIXlt</code> class</li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important point in time
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Dates are stored internally as the number of days since 1970-01-01</li>
<li>Times are stored internally as the number of seconds since 1970-01-01</li>
</ul>
<p>In computing, <strong>Unix time</strong> (also known as Epoch time, Posix time, seconds since the Epoch, Unix timestamp, or UNIX Epoch time) is a system for <strong>describing a point in time</strong>.</p>
<p>It is the number of seconds that have elapsed since the Unix epoch, excluding leap seconds. The Unix epoch is 00:00:00 UTC on 1 January 1970.</p>
<p>Unix time originally appeared as the system time of Unix, but is now used widely in computing, for example by filesystems; some Python language library functions handle Unix time.[4]</p>
<p><a href="https://en.wikipedia.org/wiki/Unix_time" class="uri">https://en.wikipedia.org/wiki/Unix_time</a></p>
</div>
</div>
<section id="the-lubridate-package" class="level2">
<h2 class="anchored" data-anchor-id="the-lubridate-package">The <code>lubridate</code> package</h2>
<p>Here, we will focus on the <code>lubridate</code> R package, which makes it easier to work with dates and times in R.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Check out the <code>lubridate</code> cheat sheet</strong> at <a href="https://lubridate.tidyverse.org" class="uri">https://lubridate.tidyverse.org</a></p>
</div>
</div>
<p>A few things to note about it:</p>
<ul>
<li>It largely <strong>replaces the default date/time functions in base R</strong></li>
<li>It contains <strong>methods for date/time arithmetic</strong></li>
<li>It <strong>handles time zones</strong>, leap year, leap seconds, etc.</li>
</ul>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-04-working-with-dates-and-times/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/lubridate_ymd.png" class="img-fluid" data-preview="TRUE" alt="Artwork by Allison Horst on the dplyr package"> [<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
<p><code>lubridate</code> is installed when you install <code>tidyverse</code>, but it is not loaded when you load <code>tidyverse</code>. Alternatively, you can install it separately.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lubridate"</span>) </span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate) </span></code></pre></div>
</div>
</section>
</section>
<section id="creating-datetimes" class="level1">
<h1>Creating date/times</h1>
<p>There are three types of date/time data that refer to an instant in time:</p>
<ul>
<li>A <strong>date</strong>. Tibbles print this as <code>&lt;date&gt;</code>.</li>
<li>A <strong>time</strong> within a day. Tibbles print this as <code>&lt;time&gt;</code>.</li>
<li>A <strong>date-time</strong> is a date plus a time: it uniquely identifies an instant in time (typically to the nearest second). Tibbles print this as <code>&lt;dttm&gt;</code>. Elsewhere in R these are called <code>POSIXct</code>.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>We will <strong>focus on dates and date-times</strong> as R does not have a native class for storing times.</p>
<p>If you to work with <strong>only times</strong>, you can use the <a href="https://cran.r-project.org/web/packages/hms/index.html"><code>hms</code> package</a>.</p>
</div>
</div>
<p>You should always <strong>use the simplest possible data type </strong>that works for your needs.</p>
<p>That means if you can use a <code>date</code> instead of a <code>date-time</code>, you should.</p>
<p><strong>Date-times</strong> are <strong>substantially more complicated</strong> because of the need to handle time zones, which we will come back to at the end of the lesson.</p>
<p>To get the current date or date-time you can use <code>today()</code> or <code>now()</code> from <code>lubridate</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">today</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-10-02"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">now</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-10-02 23:58:38 EDT"</code></pre>
</div>
</div>
<p>Otherwise, there are three ways you are likely to create a date/time:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Typical ways to create a date/time in R
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>From a string</li>
<li>From individual date-time components</li>
<li>From an existing date/time object</li>
</ol>
</div>
</div>
<p>They work as follows.</p>
<section id="from-a-string" class="level2">
<h2 class="anchored" data-anchor-id="from-a-string">1. From a string</h2>
<p>Dates are of the <code>Date</code> class.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">today</span>()</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
</div>
<p>Dates can be <strong>coerced from a character strings</strong> using some helper functions from <code>lubridate</code>. They <strong>automatically work out the format</strong> once you specify the order of the component.</p>
<p>To use the helper functions, <strong>identify the order in which year, month, and day appear</strong> in your dates, then arrange “y”, “m”, and “d” in the same order.</p>
<p>That gives you the name of the <code>lubridate</code> function that will parse your date. For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1970-01-01"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1970-01-01"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2017-01-31"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2017-01-31"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mdy</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"January 31st, 2017"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2017-01-31"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dmy</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"31-Jan-2017"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2017-01-31"</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>When reading in data with <code>read_csv()</code>, you <strong>may need to read in as character first</strong> and then <strong>convert to date/time</strong></li>
<li><code>Date</code> objects have their own special <code>print()</code> methods that will <strong>always format</strong> as “YYYY-MM-DD”</li>
<li>These functions also take unquoted numbers.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20170131</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2017-01-31"</code></pre>
</div>
</div>
</div>
</div>
<section id="alternate-formulations" class="level3">
<h3 class="anchored" data-anchor-id="alternate-formulations">Alternate Formulations</h3>
<p>Different locales have different ways of formatting dates</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2016-09-13"</span>)  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## International standard</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2016-09-13"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2016/09/13"</span>)  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Just figure it out</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2016-09-13"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mdy</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"09-13-2016"</span>)  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Mostly U.S.</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2016-09-13"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dmy</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"13-09-2016"</span>)  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Europe</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2016-09-13"</code></pre>
</div>
</div>
<p>All of the <strong>above are valid and lead to the exact same object</strong>.</p>
<p>Even if the individual dates are formatted differently, <code>ymd()</code> can <strong>usually figure it out</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2016-04-05"</span>, </span>
<span id="cb27-2">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2016/05/06"</span>,</span>
<span id="cb27-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2016,10,4"</span>)</span>
<span id="cb27-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2016-04-05" "2016-05-06" "2016-10-04"</code></pre>
</div>
</div>
<p>Cool right?</p>
</section>
</section>
<section id="from-individual-date-time-components" class="level2">
<h2 class="anchored" data-anchor-id="from-individual-date-time-components">2. From individual date-time components</h2>
<p>Sometimes the <strong>date components</strong> will come across <strong>multiple columns in a dataset</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(nycflights13)</span>
<span id="cb29-2"></span>
<span id="cb29-3">flights <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb29-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(year, month, day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 336,776 × 3
    year month   day
   &lt;int&gt; &lt;int&gt; &lt;int&gt;
 1  2013     1     1
 2  2013     1     1
 3  2013     1     1
 4  2013     1     1
 5  2013     1     1
 6  2013     1     1
 7  2013     1     1
 8  2013     1     1
 9  2013     1     1
10  2013     1     1
# … with 336,766 more rows</code></pre>
</div>
</div>
<p>To create a date/time from this sort of input, use</p>
<ul>
<li><code>make_date(year,month,day)</code> for dates, or</li>
<li><code>make_datetime(year,month,day,hour,min,sec,tz)</code> for date-times</li>
</ul>
<p>We combine these functions inside of <code>mutate</code> to add a new column to our dataset:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">flights <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(year, month, day) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">departure =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_date</span>(year, month, day))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 336,776 × 4
    year month   day departure 
   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;date&gt;    
 1  2013     1     1 2013-01-01
 2  2013     1     1 2013-01-01
 3  2013     1     1 2013-01-01
 4  2013     1     1 2013-01-01
 5  2013     1     1 2013-01-01
 6  2013     1     1 2013-01-01
 7  2013     1     1 2013-01-01
 8  2013     1     1 2013-01-01
 9  2013     1     1 2013-01-01
10  2013     1     1 2013-01-01
# … with 336,766 more rows</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>flights</code> also contains a <code>hour</code> and <code>minute</code> column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">flights <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(year, month, day, hour, minute)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 336,776 × 5
    year month   day  hour minute
   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;
 1  2013     1     1     5     15
 2  2013     1     1     5     29
 3  2013     1     1     5     40
 4  2013     1     1     5     45
 5  2013     1     1     6      0
 6  2013     1     1     5     58
 7  2013     1     1     6      0
 8  2013     1     1     6      0
 9  2013     1     1     6      0
10  2013     1     1     6      0
# … with 336,766 more rows</code></pre>
</div>
</div>
<p>Let’s use <code>make_datetime()</code> to create a date-time column called <code>departure</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="from-other-types" class="level2">
<h2 class="anchored" data-anchor-id="from-other-types">3. From other types</h2>
<p>You may want to <strong>switch</strong> between a <code>date-time</code> and a <code>date</code>.</p>
<p>That is the job of <code>as_datetime()</code> and <code>as_date()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">today</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-10-02"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">today</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-10-02 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">now</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-10-02 23:58:39 EDT"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">now</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-10-02"</code></pre>
</div>
</div>
</section>
</section>
<section id="date-times-in-r" class="level1">
<h1>Date-Times in R</h1>
<section id="from-a-string-1" class="level2">
<h2 class="anchored" data-anchor-id="from-a-string-1">From a string</h2>
<p><code>ymd()</code> and friends create dates.</p>
<p>To create a <code>date-time</code> <strong>from a character string</strong>, add an underscore and one or more of “h”, “m”, and “s” to the name of the parsing function:</p>
<p>Times can be coerced from a character string with <code>ymd_hms()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2017-01-31 20:11:59"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2017-01-31 20:11:59 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mdy_hm</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01/31/2017 08:01"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2017-01-31 08:01:00 UTC"</code></pre>
</div>
</div>
<p>You can also force the creation of a date-time from a date by supplying a timezone:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2016-09-13 14:00:00"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2016-09-13 14:00:00 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2016-09-13 14:00:00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"America/New_York"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2016-09-13 14:00:00 EDT"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2016-09-13 14:00:00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2016-09-13 14:00:00 EDT"</code></pre>
</div>
</div>
</section>
<section id="posixct-or-the-posixlt-class" class="level2">
<h2 class="anchored" data-anchor-id="posixct-or-the-posixlt-class"><code>POSIXct</code> or the <code>POSIXlt</code> class</h2>
<p>Let’s get into some hairy details about date-times. Date-times are represented using the <code>POSIXct</code> or the <code>POSIXlt</code> class in R. What are these things?</p>
<section id="posixct" class="level3">
<h3 class="anchored" data-anchor-id="posixct"><code>POSIXct</code></h3>
<p><code>POSIXct</code> is just a very large integer under the hood. It is a useful class when you want to store times in something like a data frame.</p>
<p>Technically, the <code>POSIXct</code> class represents the number of <strong>seconds</strong> since 1 January 1970. (In case you were wondering, “POSIXct” stands for “Portable Operating System Interface”, calendar time.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hm</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1970-01-01 01:00"</span>)</span>
<span id="cb54-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(x) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "POSIXct" "POSIXt" </code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3600
attr(,"tzone")
[1] "UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "double"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$class
[1] "POSIXct" "POSIXt" 

$tzone
[1] "UTC"</code></pre>
</div>
</div>
</section>
<section id="posixlt" class="level3">
<h3 class="anchored" data-anchor-id="posixlt"><code>POSIXlt</code></h3>
<p><code>POSIXlt</code> is a <code>list</code> underneath and it stores a bunch of other useful information like the day of the week, day of the year, month, day of the month</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXlt</span>(x)</span>
<span id="cb62-2">y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1970-01-01 01:00:00 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "list"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$names
[1] "sec"   "min"   "hour"  "mday"  "mon"   "year"  "wday"  "yday"  "isdst"

$class
[1] "POSIXlt" "POSIXt" 

$tzone
[1] "UTC"</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>POSIXlt</code>s are <strong>rare</strong> inside the tidyverse. They do crop up in base R, because they are needed to extract specific components of a date, like the year or month.</p>
<p>Since <code>lubridate</code> provides helpers for you to do this instead, you do not really need them imho.</p>
<p><code>POSIXct</code>’s are always easier to work with, so if you find you have a <code>POSIXlt</code>, you should always convert it to a regular data time <code>lubridate::as_datetime()</code>.</p>
</div>
</div>
</section>
</section>
</section>
<section id="time-zones" class="level1">
<h1>Time Zones!</h1>
<p>Time zones were created to <strong>make your data analyses more difficult as a data analyst</strong>.</p>
<p>Here are a few fun things to think about:</p>
<ul>
<li><code>ymd_hms()</code> function will by <strong>default use Coordinated Universal Time (UTC) as the time zone</strong>. UTC is the primary time standard by which the world regulates clocks and time.</li>
</ul>
<p>You can go to Wikipedia to find the <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">list of time zones</a></p>
<ul>
<li>Specifying <code>tz = ""</code> in one of the <code>ymd()</code> and friends functions will use the local time zone</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hm</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1970-01-01 01:00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb68-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1970-01-01 01:00:00 EST"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$class
[1] "POSIXct" "POSIXt" 

$tzone
[1] ""</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>tzone</code> attribute is optional. It <strong>controls how the time is printed</strong>, not what absolute time it refers to.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tzone"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"US/Pacific"</span></span>
<span id="cb72-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1969-12-31 22:00:00 PST"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tzone"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"US/Eastern"</span></span>
<span id="cb74-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1970-01-01 01:00:00 EST"</code></pre>
</div>
</div>
</div>
</div>
<p>A few other fun things to think about related to time zones:</p>
<ul>
<li><p>Almost always better to specify time zone when possible to avoid ambiguity</p></li>
<li><p>Daylight savings time (DST)</p></li>
<li><p>Some states are in two time zones</p></li>
<li><p>Southern hemisphere is opposite</p></li>
</ul>
</section>
<section id="operations-on-dates-and-times" class="level1">
<h1>Operations on Dates and Times</h1>
<section id="arithmetic" class="level2">
<h2 class="anchored" data-anchor-id="arithmetic">Arithmetic</h2>
<p>You <strong>can add and subtract</strong> dates and times.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-01-01"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Midnight</span></span>
<span id="cb76-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dmy_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9 Jan 2011 11:34:21"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb76-3">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## this works</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 356.5178 days</code></pre>
</div>
</div>
<p>You can do comparisons too (i.e.&nbsp;<code>&gt;</code>, <code>&lt;</code>, and <code>==</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> y <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## this works</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> y <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## this works</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## this works</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## what??? why does this not work? </span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `+.POSIXt`(x, y): binary '+' is not defined for "POSIXt" objects</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The class of <code>x</code> is <code>POSIXct</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "POSIXct" "POSIXt" </code></pre>
</div>
</div>
<p><code>POSIXct</code> objects are a measure of seconds from an origin, usually the UNIX epoch (1st Jan 1970).</p>
<p>Just add the requisite number of seconds to the object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add 3 hours</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2012-01-01 03:00:00 EST"</code></pre>
</div>
</div>
</div>
</div>
<p>Same goes for days. For example, you can just keep the date portion using <code>date()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span>(y)</span>
<span id="cb90-2">y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2011-01-09"</code></pre>
</div>
</div>
<p>And then add a number to the date (in this case 1 day)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb92-1">y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2011-01-10"</code></pre>
</div>
</div>
<p>Cool eh?</p>
</section>
<section id="leaps-and-bounds" class="level2">
<h2 class="anchored" data-anchor-id="leaps-and-bounds">Leaps and Bounds</h2>
<p>Even keeps track of leap years, leap seconds, daylight savings, and time zones.</p>
<p>Leap years</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb94-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-03-01"</span>)</span>
<span id="cb94-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-02-28"</span>)</span>
<span id="cb94-3">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 2 days</code></pre>
</div>
</div>
<p>Not a leap year</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb96-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2013-03-01"</span>)</span>
<span id="cb96-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2013-02-28"</span>)</span>
<span id="cb96-3">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 1 days</code></pre>
</div>
</div>
<p>BUT beware of time zones!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb98-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-10-25 01:00:00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb98-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-10-25 05:00:00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GMT"</span>)</span>
<span id="cb98-3">y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 0 secs</code></pre>
</div>
</div>
<p>There are also things called <a href="https://en.wikipedia.org/wiki/Leap_second"><strong>leap seconds</strong></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb100-1">.leap.seconds</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "1972-07-01 GMT" "1973-01-01 GMT" "1974-01-01 GMT" "1975-01-01 GMT"
 [5] "1976-01-01 GMT" "1977-01-01 GMT" "1978-01-01 GMT" "1979-01-01 GMT"
 [9] "1980-01-01 GMT" "1981-07-01 GMT" "1982-07-01 GMT" "1983-07-01 GMT"
[13] "1985-07-01 GMT" "1988-01-01 GMT" "1990-01-01 GMT" "1991-01-01 GMT"
[17] "1992-07-01 GMT" "1993-07-01 GMT" "1994-07-01 GMT" "1996-01-01 GMT"
[21] "1997-07-01 GMT" "1999-01-01 GMT" "2006-01-01 GMT" "2009-01-01 GMT"
[25] "2012-07-01 GMT" "2015-07-01 GMT" "2017-01-01 GMT"</code></pre>
</div>
</div>
</section>
</section>
<section id="extracting-elements-of-datestimes" class="level1">
<h1>Extracting Elements of Dates/Times</h1>
<p>There are a set of helper functions in <code>lubridate</code> that can extract sub-elements of dates/times</p>
<section id="date-elements" class="level2">
<h2 class="anchored" data-anchor-id="date-elements">Date Elements</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb102-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-10-25 01:13:46"</span>,</span>
<span id="cb102-2">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2015-04-23 15:11:23"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb102-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">year</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2012 2015</code></pre>
</div>
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb104-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10  4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb106-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">day</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 25 23</code></pre>
</div>
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb108-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">weekdays</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Thursday" "Thursday"</code></pre>
</div>
</div>
</section>
<section id="time-elements" class="level2">
<h2 class="anchored" data-anchor-id="time-elements">Time Elements</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb110-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-10-25 01:13:46"</span>,</span>
<span id="cb110-2">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2015-04-23 15:11:23"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb110-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minute</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 13 11</code></pre>
</div>
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb112-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">second</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 46 23</code></pre>
</div>
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb114-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  1 15</code></pre>
</div>
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb116-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">week</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 43 17</code></pre>
</div>
</div>
</section>
</section>
<section id="visualizing-dates" class="level1">
<h1>Visualizing Dates</h1>
<section id="reading-in-the-data" class="level2">
<h2 class="anchored" data-anchor-id="reading-in-the-data">Reading in the Data</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb118-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb118-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb118-3">storm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"storms_2004.csv.gz"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb118-4">storm</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 52,409 × 51
   BEGIN…¹ BEGIN…² BEGIN…³ END_Y…⁴ END_DAY END_T…⁵ EPISO…⁶ EVENT…⁷ STATE STATE…⁸
     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;
 1  200412      29    1800  200412      30    1200 1182771 5430389 MONT…      30
 2  200412      29    1800  200412      30    1200 1182771 5430390 MONT…      30
 3  200412       8    1800  200412       8    1800 1182769 5430387 IDAHO      16
 4  200412      19    1500  200412      19    1700 1182770 5430388 MONT…      30
 5  200412      14     600  200412      14     800 1182772 5430391 MONT…      30
 6  200412      21     400  200412      21     800 1183013 5430322 MICH…      26
 7  200412      21     400  200412      21     800 1183013 5430323 MICH…      26
 8  200412      26    1500  200412      27     800 1182925 5430420 MASS…      25
 9  200412      26    1500  200412      27     800 1182925 5430421 MASS…      25
10  200412      11     800  200412      11    1300 1182849 5430278 DELA…      10
# … with 52,399 more rows, 41 more variables: YEAR &lt;dbl&gt;, MONTH_NAME &lt;chr&gt;,
#   EVENT_TYPE &lt;chr&gt;, CZ_TYPE &lt;chr&gt;, CZ_FIPS &lt;dbl&gt;, CZ_NAME &lt;chr&gt;, WFO &lt;chr&gt;,
#   BEGIN_DATE_TIME &lt;chr&gt;, CZ_TIMEZONE &lt;chr&gt;, END_DATE_TIME &lt;chr&gt;,
#   INJURIES_DIRECT &lt;dbl&gt;, INJURIES_INDIRECT &lt;dbl&gt;, DEATHS_DIRECT &lt;dbl&gt;,
#   DEATHS_INDIRECT &lt;dbl&gt;, DAMAGE_PROPERTY &lt;chr&gt;, DAMAGE_CROPS &lt;chr&gt;,
#   SOURCE &lt;chr&gt;, MAGNITUDE &lt;dbl&gt;, MAGNITUDE_TYPE &lt;chr&gt;, FLOOD_CAUSE &lt;lgl&gt;,
#   CATEGORY &lt;lgl&gt;, TOR_F_SCALE &lt;chr&gt;, TOR_LENGTH &lt;dbl&gt;, TOR_WIDTH &lt;dbl&gt;, …</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb120-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(storm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "BEGIN_YEARMONTH"    "BEGIN_DAY"          "BEGIN_TIME"        
 [4] "END_YEARMONTH"      "END_DAY"            "END_TIME"          
 [7] "EPISODE_ID"         "EVENT_ID"           "STATE"             
[10] "STATE_FIPS"         "YEAR"               "MONTH_NAME"        
[13] "EVENT_TYPE"         "CZ_TYPE"            "CZ_FIPS"           
[16] "CZ_NAME"            "WFO"                "BEGIN_DATE_TIME"   
[19] "CZ_TIMEZONE"        "END_DATE_TIME"      "INJURIES_DIRECT"   
[22] "INJURIES_INDIRECT"  "DEATHS_DIRECT"      "DEATHS_INDIRECT"   
[25] "DAMAGE_PROPERTY"    "DAMAGE_CROPS"       "SOURCE"            
[28] "MAGNITUDE"          "MAGNITUDE_TYPE"     "FLOOD_CAUSE"       
[31] "CATEGORY"           "TOR_F_SCALE"        "TOR_LENGTH"        
[34] "TOR_WIDTH"          "TOR_OTHER_WFO"      "TOR_OTHER_CZ_STATE"
[37] "TOR_OTHER_CZ_FIPS"  "TOR_OTHER_CZ_NAME"  "BEGIN_RANGE"       
[40] "BEGIN_AZIMUTH"      "BEGIN_LOCATION"     "END_RANGE"         
[43] "END_AZIMUTH"        "END_LOCATION"       "BEGIN_LAT"         
[46] "BEGIN_LON"          "END_LAT"            "END_LON"           
[49] "EPISODE_NARRATIVE"  "EVENT_NARRATIVE"    "DATA_SOURCE"       </code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s take a look at the <code>BEGIN_DATE_TIME</code>, <code>EVENT_TYPE</code>, and <code>DEATHS_DIRECT</code> variables from the <code>storm</code> dataset.</p>
<p>Tasks:</p>
<ol type="1">
<li>Create a subset of the <code>storm</code> dataset with only the four columns above.</li>
<li>Convert the <code>BEGIN_DATE_TIME</code> date/time column to a date/time R object.</li>
<li>Rename the <code>EVENT_TYPE</code> column as <code>type</code>.</li>
<li>Rename the <code>DEATHS_DIRECT</code> column as <code>deaths</code>.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb122-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb122-2"></span>
<span id="cb122-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span></code></pre></div>
</div>
</div>
</div>
<p>Next, we do some wrangling to create a <code>storm_sub</code> data frame (code chunk set to <code>echo=FALSE</code> for the purposes of the lecture, but code is in the R Markdown).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb123-1">storm_sub</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 52,409 × 3
   begin               type             deaths
   &lt;dttm&gt;              &lt;chr&gt;             &lt;dbl&gt;
 1 2004-12-29 18:00:00 Heavy Snow            0
 2 2004-12-29 18:00:00 Heavy Snow            0
 3 2004-12-08 18:00:00 Winter Storm          0
 4 2004-12-19 15:00:00 High Wind             0
 5 2004-12-14 06:00:00 Winter Weather        0
 6 2004-12-21 04:00:00 Winter Storm          0
 7 2004-12-21 04:00:00 Winter Storm          0
 8 2004-12-26 15:00:00 Winter Storm          0
 9 2004-12-26 15:00:00 Winter Storm          0
10 2004-12-11 08:00:00 Storm Surge/Tide      0
# … with 52,399 more rows</code></pre>
</div>
</div>
</section>
<section id="histograms-of-datestimes" class="level2">
<h2 class="anchored" data-anchor-id="histograms-of-datestimes">Histograms of Dates/Times</h2>
<p>We can make a histogram of the dates/times to get a sense of when storm events occur.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb125-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb125-2">storm_sub <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb125-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> begin)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb125-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb125-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-04-working-with-dates-and-times/index_files/figure-html/unnamed-chunk-37-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We can group by event type too.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb126-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb126-2">storm_sub <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb126-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> begin)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb126-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb126-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb126-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb126-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x.bottom =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-04-working-with-dates-and-times/index_files/figure-html/unnamed-chunk-38-1.png" class="img-fluid" width="1152"></p>
</div>
</div>
</section>
<section id="scatterplots-of-datestimes" class="level2">
<h2 class="anchored" data-anchor-id="scatterplots-of-datestimes">Scatterplots of Dates/Times</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb127-1">storm_sub <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb127-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> begin, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> deaths)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb127-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-04-working-with-dates-and-times/index_files/figure-html/unnamed-chunk-39-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>If we focus on a single month, the x-axis adapts.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb128-1">storm_sub <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb128-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(begin) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb128-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(begin, deaths)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb128-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-04-working-with-dates-and-times/index_files/figure-html/unnamed-chunk-40-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Similarly, we can focus on a single day.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb129-1">storm_sub <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb129-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(begin) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">day</span>(begin) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb129-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(begin, deaths)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb129-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-04-working-with-dates-and-times/index_files/figure-html/unnamed-chunk-41-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<ul>
<li><p>Dates and times have special classes in R that allow for numerical and statistical calculations</p></li>
<li><p>Dates use the <code>Date</code> class</p></li>
<li><p>Date-Times (and Times) use the <code>POSIXct</code> and <code>POSIXlt</code> class</p></li>
<li><p>Character strings can be coerced to Date/Time classes using the <code>ymd()</code> and <code>ymd_hms()</code> functions and friends.</p></li>
<li><p>The <code>lubridate</code> package is essential for manipulating date/time data</p></li>
<li><p>Both <code>plot</code> and <code>ggplot</code> “know” about dates and times and will handle axis labels appropriately.</p></li>
</ul>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>What happens if you parse a string that contains invalid dates?</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb130-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2010-10-10"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bananas"</span>))</span></code></pre></div>
</div>
<ol start="2" type="1">
<li>What does the <code>tzone</code> argument to <code>today()</code> do? Why is it important?</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb131-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">today</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 19267</code></pre>
</div>
</div>
<ol start="3" type="1">
<li>Use the appropriate <code>lubridate</code> function to parse each of the following dates:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb133-1">d1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"January 1, 2010"</span></span>
<span id="cb133-2">d2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2015-Mar-07"</span></span>
<span id="cb133-3">d3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"06-Jun-2017"</span></span>
<span id="cb133-4">d4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"August 19 (2015)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"July 1 (2015)"</span>)</span>
<span id="cb133-5">d5 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12/30/14"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dec 30, 20</span></span></code></pre></div>
</div>
<ol start="4" type="1">
<li><p>Using the <code>flights</code> dataset, how does the distribution of flight times within a day change over the course of the year?</p></li>
<li><p>Compare <code>dep_time</code>, <code>sched_dep_time</code> and <code>dep_delay</code>. Are they consistent? Explain your findings.</p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://lubridate.tidyverse.org" class="uri">https://lubridate.tidyverse.org</a></li>
<li><code>lubridate</code> cheat sheet: <a href="https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf" class="uri">https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf</a></li>
<li><a href="https://jhu-advdatasci.github.io/2018/lectures/09-dates-times" class="uri">https://jhu-advdatasci.github.io/2018/lectures/09-dates-times</a></li>
<li><a href="https://r4ds.had.co.nz/dates-and-times" class="uri">https://r4ds.had.co.nz/dates-and-times</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 5</category>
  <category>week 6</category>
  <category>tidyverse</category>
  <category>R</category>
  <category>programming</category>
  <category>dates and times</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-10-04-working-with-dates-and-times/index.html</guid>
  <pubDate>Tue, 04 Oct 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Debugging R Code</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-29-debugging-r-code/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://adv-r.hadley.nz/debugging" class="uri">https://adv-r.hadley.nz/debugging</a></li>
<li><a href="https://rstats.wtf/debugging-r-code" class="uri">https://rstats.wtf/debugging-r-code</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-debugging-r-code" class="uri">https://rdpeng.github.io/Biostat776/lecture-debugging-r-code</a></li>
<li><a href="https://adv-r.hadley.nz/debugging" class="uri">https://adv-r.hadley.nz/debugging</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Discuss an overall approach to debugging code in R</li>
<li>Recognize the three main indications of a problem/condition (<code>message</code>, <code>warning</code>, <code>error</code>) and a fatal problem (<code>error</code>)</li>
<li>Understand the importance of reproducing the problem when debugging a function or piece of code</li>
<li>Learn how to use interactive debugging tools <code>traceback</code>, <code>debug</code>, <code>recover</code>, <code>browser</code>, and <code>trace</code> can be used to find problematic code in functions</li>
</ul>
</div>
</div>
</section>
<section id="debugging-r-code" class="level1">
<h1>Debugging R Code</h1>
<section id="overall-approach" class="level2">
<h2 class="anchored" data-anchor-id="overall-approach">Overall approach</h2>
<p>Finding the <strong>root cause of a problem is always challenging</strong>.</p>
<p>Most bugs are subtle and hard to find because if they were obvious, you would have avoided them in the first place.</p>
<p>A good strategy helps. Below I outline a four step process that I have found useful:</p>
<section id="google" class="level3">
<h3 class="anchored" data-anchor-id="google">1. Google!</h3>
<p>Whenever you see an error message, <strong>start by googling it</strong>.</p>
<p>If you are lucky, you will discover that it’s a common error with a known solution.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>When googling, improve your chances of a good match by removing any variable names or values that are specific to your problem.</p>
</div>
</div>
</section>
<section id="make-it-repeatable" class="level3">
<h3 class="anchored" data-anchor-id="make-it-repeatable">2. Make it repeatable</h3>
<p>To find the root cause of an error, you are going to need to execute the code many times as you consider and reject hypotheses.</p>
<p><strong>To make that iteration as quick possible</strong>, it’s worth some upfront investment to <strong>make the problem both easy and fast to reproduce</strong>.</p>
<p>Start by creating a <strong>rep</strong>roducible <strong>ex</strong>ample (reprex).</p>
<ul>
<li>This will help others help you, and <strong>often leads to a solution without asking others</strong>, because in the course of making the problem reproducible you often figure out the root cause.</li>
</ul>
<p>Make the <strong>example minimal by removing code and simplifying data</strong>.</p>
<ul>
<li>As you do this, you may discover inputs that do not trigger the error. - Make note of them: they will be helpful when diagnosing the root cause.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s try making a <strong>reprex</strong> <a href="https://www.tidyverse.org/help">using the <code>reprex</code> package</a> (installed with the <code>tidyverse</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(reprex)</span></code></pre></div>
</div>
<p>Write a bit of code and copy it to the clipboard:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">(y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y)</span></code></pre></div>
</div>
<p>Enter <code>reprex()</code> in the R Console. In RStudio, you’ll see a preview of your rendered reprex.</p>
<p>It is now ready and waiting on your clipboard, so you can paste it into, say, a GitHub issue.</p>
<p>One last step. Let’s go here and open up an issue on the course website:</p>
<ul>
<li><a href="https://github.com/stephaniehicks/jhustatcomputing2022/issues" class="uri">https://github.com/stephaniehicks/jhustatcomputing2022/issues</a></li>
</ul>
<p>We will paste in the code from our reprex.</p>
</div>
</div>
<p>In RStudio, you can access reprex from the addins menu, which makes it even easier to point out your code and select the output format.</p>
</section>
<section id="figure-out-where-it-is" class="level3">
<h3 class="anchored" data-anchor-id="figure-out-where-it-is">3. Figure out where it is</h3>
<p>It’s a great idea to adopt the scientific method here.</p>
<ul>
<li>Generate hypotheses</li>
<li>Design experiments to test them</li>
<li>Record your results</li>
</ul>
<p>This may seem like a lot of work, but <strong>a systematic approach</strong> will end up saving you time.</p>
<p>Often <strong>a lot of time can be wasted relying on my intuition to solve a bug</strong> (“oh, it must be an off-by-one error, so I’ll just subtract 1 here”), when I would have been better off taking a systematic approach.</p>
<p>If this fails, you <strong>might need to ask help from someone else</strong>.</p>
<p>If you have followed the previous step, you will have a small example that is easy to share with others. That makes it much easier for other people to look at the problem, and more likely to help you find a solution.</p>
</section>
<section id="fix-it-and-test-it" class="level3">
<h3 class="anchored" data-anchor-id="fix-it-and-test-it">4. Fix it and test it</h3>
<p>Once you have found the bug, you need to <strong>figure out how to fix it</strong> and to <strong>check that the fix actually worked</strong>.</p>
<p>Again, it is very useful to have automated tests in place.</p>
<ul>
<li>Not only does this help to ensure that you <strong>have actually fixed the bug</strong>, it also <strong>helps to ensure you have not introduced any new bugs</strong> in the process.</li>
<li>In the absence of automated tests, make sure to <strong>carefully record the correct output</strong>, and check against the inputs that previously failed.</li>
</ul>
</section>
</section>
<section id="somethings-wrong" class="level2">
<h2 class="anchored" data-anchor-id="somethings-wrong">Something’s Wrong!</h2>
<p>Once you have made the error repeatable, the next step is to figure out where it comes from.</p>
<p>R has a number of <strong>ways to indicate to you that something is not right</strong>.</p>
<p>There are <strong>different levels of indication</strong> that can be used, ranging from mere notification to fatal error. Executing any function in R may result in the following <strong>conditions</strong>.</p>
<ul>
<li><code>message</code>: A <strong>generic notification/diagnostic message</strong> produced by the <code>message()</code> function; execution of the function continues</li>
<li><code>warning</code>: An indication that <strong>something is wrong but not necessarily fatal</strong>; execution of the function continues. Warnings are generated by the <code>warning()</code> function</li>
<li><code>error</code>: An indication that <strong>a fatal problem has occurred</strong> and execution of the function stops. Errors are produced by the <code>stop()</code> function.</li>
<li><code>condition</code>: A generic concept for indicating that <strong>something unexpected has occurred</strong>; programmers can create their own custom conditions if they want.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here is an example of a warning that you might receive in the course of using R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in log(-1): NaNs produced</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NaN</code></pre>
</div>
</div>
<p>This warning lets you know that taking the log of a negative number results in a <code>NaN</code> value because you <strong>can’t take the log of negative numbers</strong>.</p>
</div>
</div>
<p>Nevertheless, R doesn’t give an error, because it has a useful value that it can return, the <strong><code>NaN</code> value</strong>.</p>
<p>The <strong>warning is just there</strong> to let you know that <strong>something unexpected happen</strong>.</p>
<p>Depending on what you are programming, you may have intentionally taken the log of a negative number in order to move on to another section of code.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here is another function that is designed to print a message to the console depending on the nature of its input.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">print_message <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb6-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb6-3">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x is greater than zero"</span>)</span>
<span id="cb6-4">        } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb6-5">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x is less than or equal to zero"</span>)</span>
<span id="cb6-6">        }  </span>
<span id="cb6-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x)        </span>
<span id="cb6-8">}</span></code></pre></div>
</div>
<p>This function is simple:</p>
<ul>
<li>It <strong>prints a message</strong> telling you whether <code>x</code> is greater than zero or less than or equal to zero.</li>
<li>It also returns its input <strong>invisibly</strong>, which is a common practice with “print” functions.</li>
</ul>
<p><strong>Returning an object invisibly</strong> means that the <strong>return value does not get auto-printed</strong> when the function is called.</p>
<p>Take a hard look at the function above and see if you can identify any bugs or problems.</p>
<p>We can execute the function as follows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_message</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "x is greater than zero"</code></pre>
</div>
</div>
<p>The function seems to work fine at this point. No errors, warnings, or messages.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_message</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in if (x &gt; 0) {: missing value where TRUE/FALSE needed</code></pre>
</div>
</div>
</div>
</div>
<p>What happened?</p>
<ul>
<li>Well, the first thing the function does is test if <code>x &gt; 0</code>.</li>
<li>But you can’t do that test if <code>x</code> is a <code>NA</code> or <code>NaN</code> value.</li>
<li>R <strong>doesn’t know what to do in this case</strong> so it <strong>stops with a fatal error</strong>.</li>
</ul>
<p>We can <strong>fix this problem</strong> by anticipating the possibility of <code>NA</code> values and checking to see if the input is <code>NA</code> with the <code>is.na()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">print_message2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb11-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x))</span>
<span id="cb11-3">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x is a missing value!"</span>)</span>
<span id="cb11-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-5">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x is greater than zero"</span>)</span>
<span id="cb11-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb11-7">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x is less than or equal to zero"</span>)</span>
<span id="cb11-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x)</span>
<span id="cb11-9">}</span></code></pre></div>
</div>
<p>Now we can run the following.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_message2</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "x is a missing value!"</code></pre>
</div>
</div>
<p>And all is fine.</p>
<p>Now what about the following situation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in log(c(-1, 2)): NaNs produced</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_message2</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in if (is.na(x)) print("x is a missing value!") else if (x &gt; 0) print("x is greater than zero") else print("x is less than or equal to zero"): the condition has length &gt; 1</code></pre>
</div>
</div>
<p>Now what?? Why are we getting this warning?</p>
<p>The <strong>warning</strong> says “the condition has length &gt; 1 and only the first element will be used”.</p>
<p>The <strong>problem here</strong> is that I passed <code>print_message2()</code> a vector <code>x</code> that was of length 2 rather then length 1.</p>
<p>Inside the body of <code>print_message2()</code> the expression <code>is.na(x)</code> returns a vector that is tested in the <code>if</code> statement.</p>
<p>However, <code>if</code> cannot take vector arguments, so you get a warning.</p>
<p>The fundamental problem here is that <code>print_message2()</code> is not <strong>vectorized</strong>.</p>
<p>We can <strong>solve this problem</strong> two ways.</p>
<ol type="1">
<li>Simply <strong>not allow vector arguments</strong>.</li>
<li>The other way is to <strong>vectorize</strong> the <code>print_message2()</code> function to allow it to take vector arguments.</li>
</ol>
<p>For the <strong>first way</strong>, we simply need to check the length of the input.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">print_message3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb18-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> 1L)</span>
<span id="cb18-3">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'x' has length &gt; 1"</span>)</span>
<span id="cb18-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x))</span>
<span id="cb18-5">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x is a missing value!"</span>)</span>
<span id="cb18-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-7">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x is greater than zero"</span>)</span>
<span id="cb18-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb18-9">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x is less than or equal to zero"</span>)</span>
<span id="cb18-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x)</span>
<span id="cb18-11">}</span></code></pre></div>
</div>
<p>Now when we pass <code>print_message3()</code> a vector, we should get an <strong>error</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_message3</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in print_message3(1:2): 'x' has length &gt; 1</code></pre>
</div>
</div>
<p>Vectorizing the function can be accomplished easily with the <code>Vectorize()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">print_message4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vectorize</span>(print_message2)</span>
<span id="cb21-2">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_message4</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "x is less than or equal to zero"
[1] "x is greater than zero"</code></pre>
</div>
</div>
<p>You can see now that the <strong>correct messages are printed without any warning or error</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I stored the return value of <code>print_message4()</code> in a separate R object called <code>out</code>.</p>
<p>This is because when I use the <code>Vectorize()</code> function it no longer preserves the invisibility of the return value.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Helpful tips
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <strong>primary task of debugging</strong> any R code is <strong>correctly diagnosing what the problem is</strong>.</p>
<p>When diagnosing a problem with your code (or somebody else’s), it’s important <strong>first understand what you were expecting to occur</strong>.</p>
<p>Then you need to <strong>idenfity what did occur</strong> and <strong>how did it deviate from your expectations</strong>.</p>
<p>Some basic questions you need to ask are</p>
<ul>
<li>What was your input? How did you call the function?</li>
<li>What were you expecting? Output, messages, other results?</li>
<li>What did you get?</li>
<li>How does what you get differ from what you were expecting?</li>
<li>Were your expectations correct in the first place?</li>
<li>Can you reproduce the problem (exactly)?</li>
</ul>
</div>
</div>
<p>Being able to answer these questions is important not just for your own sake, but in situations where you may need to ask someone else for help with debugging the problem.</p>
<p>Seasoned programmers will be asking you these exact questions.</p>
</section>
</section>
<section id="debugging-tools-in-r" class="level1">
<h1>Debugging Tools in R</h1>
<p>R provides a number of tools to help you with debugging your code. The primary tools for debugging functions in R are</p>
<ul>
<li><code>traceback()</code>: <strong>prints out the function call stack</strong> after an error occurs; does nothing if there’s no error</li>
<li><code>debug()</code>: <strong>flags a function for “debug” mode</strong> which allows you to step through execution of a function one line at a time</li>
<li><code>browser()</code>: <strong>suspends the execution of a function</strong> wherever it is called and puts the function in debug mode</li>
<li><code>trace()</code>: allows you to <strong>insert debugging code into a function</strong> at specific places</li>
<li><code>recover()</code>: allows you to <strong>modify the error behavior</strong> so that you can browse the function call stack</li>
</ul>
<p>These functions are interactive tools specifically designed to allow you to pick through a function. There is also the more blunt technique of inserting <code>print()</code> or <code>cat()</code> statements in the function.</p>
<section id="using-traceback" class="level2">
<h2 class="anchored" data-anchor-id="using-traceback">Using <code>traceback()</code></h2>
<p>The <code>traceback()</code> function <strong>prints out the function call stack</strong> after an error has occurred.</p>
<p>The <strong>function call stack</strong> is the <strong>sequence of functions that was called before the error occurred</strong>.</p>
<p>For example, you may have a function <code>a()</code> which subsequently calls function <code>b()</code> which calls <code>c()</code> and then <code>d()</code>.</p>
<p>If an error occurs, it may not be immediately clear in which function the error occurred.</p>
<p>The <code>traceback()</code> function <strong>shows you how many levels deep</strong> you were when the error occurred.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s use the <code>mean()</code> function on a vector <code>z</code> that does not exist in our R environment</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(z)</span>
<span id="cb23-2">Error <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(z) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> object <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'z'</span> not found</span>
<span id="cb23-3"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traceback</span>()</span>
<span id="cb23-4"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(z)</span></code></pre></div>
<p>Here, it’s <strong>clear that the error occurred</strong> inside the <code>mean()</code> function because the object <code>z</code> does not exist.</p>
</div>
</div>
<p>The <code>traceback()</code> function <strong>must be called immediately after an error</strong> occurs. Once another function is called, you lose the traceback.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here is a slightly more complicated example using the <code>lm()</code> function for linear modeling.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x)</span>
<span id="cb24-2">Error <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(expr, envir, enclos) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> object ’y’ not found</span>
<span id="cb24-3"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traceback</span>()</span>
<span id="cb24-4"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(expr, envir, enclos)</span>
<span id="cb24-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(predvars, data, env)</span>
<span id="cb24-6"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model.frame.default</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop.unused.levels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb24-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop.unused.levels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb24-8"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(expr, envir, enclos)</span>
<span id="cb24-9"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(mf, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parent.frame</span>())</span>
<span id="cb24-10"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x)</span></code></pre></div>
<p>You can see now that the <strong>error did not get thrown until the 7th level of the function call stack</strong>, in which case the <code>eval()</code> function tried to evaluate the formula <code>y ~ x</code> and <strong>realized the object <code>y</code> did not exist</strong>.</p>
</div>
</div>
<p>Looking at the traceback is useful for figuring out roughly where an error occurred but it’s not useful for more detailed debugging. For that you might turn to the <code>debug()</code> function.</p>
</section>
<section id="using-debug" class="level2">
<h2 class="anchored" data-anchor-id="using-debug">Using <code>debug()</code></h2>
<details>
<summary>
Click here for how to use <code>debug()</code> with an interactive browser.
</summary>
<p>The <code>debug()</code> function initiates an interactive debugger (also known as the “browser” in R) for a function. With the debugger, you can step through an R function one expression at a time to pinpoint exactly where an error occurs.</p>
<p>The <code>debug()</code> function takes a function as its first argument. Here is an example of debugging the <code>lm()</code> function.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">debug</span>(lm)      <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Flag the 'lm()' function for interactive debugging</span></span>
<span id="cb25-2"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x)</span>
<span id="cb25-3">debugging <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x)</span>
<span id="cb25-4">debug<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb25-5">    ret.x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb25-6">    ret.y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y</span>
<span id="cb25-7">    cl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match.call</span>()</span>
<span id="cb25-8">    ...</span>
<span id="cb25-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>qr)</span>
<span id="cb25-10">        z<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>qr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span> </span>
<span id="cb25-11">    z</span>
<span id="cb25-12">} </span>
<span id="cb25-13">Browse[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Now, every time you call the <code>lm()</code> function it will launch the interactive debugger. To turn this behavior off you need to call the <code>undebug()</code> function.</p>
<p>The debugger calls the browser at the very top level of the function body. From there you can step through each expression in the body. There are a few special commands you can call in the browser:</p>
<ul>
<li><code>n</code> executes the current expression and moves to the next expression</li>
<li><code>c</code> continues execution of the function and does not stop until either an error or the function exits</li>
<li><code>Q</code> quits the browser</li>
</ul>
<p>Here’s an example of a browser session with the <code>lm()</code> function.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">Browse[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n   <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Evalute this expression and move to the next one</span></span>
<span id="cb26-2">debug<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> ret.x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb26-3">Browse[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n</span>
<span id="cb26-4">debug<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> ret.y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y</span>
<span id="cb26-5">Browse[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n</span>
<span id="cb26-6">debug<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> cl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match.call</span>()</span>
<span id="cb26-7">Browse[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n</span>
<span id="cb26-8">debug<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> mf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match.call</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand.dots =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb26-9">Browse[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n</span>
<span id="cb26-10">debug<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"formula"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subset"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weights"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"na.action"</span>,</span>
<span id="cb26-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(mf), 0L)</span></code></pre></div>
<p>While you are in the browser you can execute any other R function that might be available to you in a regular session. In particular, you can use <code>ls()</code> to see what is in your current environment (the function environment) and <code>print()</code> to print out the values of R objects in the function environment.</p>
<p>You can turn off interactive debugging with the <code>undebug()</code> function.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">undebug</span>(lm)    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Unflag the 'lm()' function for debugging</span></span></code></pre></div>
</details>
</section>
<section id="using-recover" class="level2">
<h2 class="anchored" data-anchor-id="using-recover">Using <code>recover()</code></h2>
<details>
<summary>
Click here for how to use <code>recover()</code> with an interactive browser.
</summary>
<p>The <code>recover()</code> function can be used to modify the error behavior of R when an error occurs. Normally, when an error occurs in a function, R will print out an error message, exit out of the function, and return you to your workspace to await further commands.</p>
<p>With <code>recover()</code> you can tell R that when an error occurs, it should halt execution at the exact point at which the error occurred. That can give you the opportunity to poke around in the environment in which the error occurred. This can be useful to see if there are any R objects or data that have been corrupted or mistakenly modified.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> recover)    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Change default R error behavior</span></span>
<span id="cb28-2"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nosuchfile"</span>)      <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This code doesn't work</span></span>
<span id="cb28-3">Error <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span>(file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rt"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> cannot open the connection</span>
<span id="cb28-4">In addition<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Warning message<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb28-5">In <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span>(file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rt"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb28-6">  cannot open file ’nosuchfile’<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> No such file or directory</span>
<span id="cb28-7">  </span>
<span id="cb28-8">Enter a frame number, or <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> to exit</span>
<span id="cb28-9"></span>
<span id="cb28-10"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nosuchfile"</span>)</span>
<span id="cb28-11"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.table</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header =</span> header, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> sep, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quote =</span> quote, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dec =</span></span>
<span id="cb28-12"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span>(file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rt"</span>)</span>
<span id="cb28-13"></span>
<span id="cb28-14">Selection<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span></code></pre></div>
<p>The <code>recover()</code> function will first print out the function call stack when an error occurrs. Then, you can choose to jump around the call stack and investigate the problem. When you choose a frame number, you will be put in the browser (just like the interactive debugger triggered with <code>debug()</code>) and will have the ability to poke around.</p>
</details>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<ul>
<li>There are three main indications of a problem/condition: <code>message</code>, <code>warning</code>, <code>error</code>; only an <code>error</code> is fatal</li>
<li>When analyzing a function with a problem, make sure you can reproduce the problem, clearly state your expectations and how the output differs from your expectation</li>
<li>Interactive debugging tools <code>traceback</code>, <code>debug</code>, <code>recover</code>, <code>browser</code>, and <code>trace</code> can be used to find problematic code in functions</li>
<li>Debugging tools are not a substitute for thinking!</li>
</ul>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Try using <code>traceback()</code> to debug this piece of code:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(a)</span>
<span id="cb29-2">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(b) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h</span>(b)</span>
<span id="cb29-3">h <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(c) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(c)</span>
<span id="cb29-4">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(d) {</span>
<span id="cb29-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(d)) {</span>
<span id="cb29-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`d` must be numeric"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb29-7">  }</span>
<span id="cb29-8">  d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb29-9">}</span>
<span id="cb29-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `d` must be numeric</code></pre>
</div>
</div>
<p>Describe in words what is happening above?</p>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-debugging-r-code" class="uri">https://rdpeng.github.io/Biostat776/lecture-debugging-r-code</a></li>
<li><a href="https://adv-r.hadley.nz/debugging" class="uri">https://adv-r.hadley.nz/debugging</a></li>
<li><a href="https://rstats.wtf/debugging-r-code" class="uri">https://rstats.wtf/debugging-r-code</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 4</category>
  <category>week 5</category>
  <category>programming</category>
  <category>debugging</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-29-debugging-r-code/index.html</guid>
  <pubDate>Thu, 29 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Error Handling and Generation</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-29-error-handling-and-generation/index.html</link>
  <description><![CDATA[ 




<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://adv-r.hadley.nz/debugging" class="uri">https://adv-r.hadley.nz/debugging</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-error-handling-and-generation" class="uri">https://rdpeng.github.io/Biostat776/lecture-error-handling-and-generation</a></li>
<li><a href="https://adv-r.hadley.nz/debugging" class="uri">https://adv-r.hadley.nz/debugging</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Create errors, warnings, and messages in R functions using the functions <code>stop</code>, <code>stopifnot</code>, <code>warning</code>, and <code>message</code>.</li>
<li>Understand the importance of providing useful error messaging to improve user experience with functions. However, these can also slow down code substantially.</li>
</ul>
</div>
</div>
</section>
<section id="error-handling-and-generation" class="level1">
<h1>Error Handling and Generation</h1>
<section id="what-is-an-error" class="level2">
<h2 class="anchored" data-anchor-id="what-is-an-error">What is an error?</h2>
<p><strong>Errors most often occur</strong> when code is used in a way that <strong>it is not intended to be used</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>For example adding two strings together produces the following error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world"</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in "hello" + "world": non-numeric argument to binary operator</code></pre>
</div>
</div>
</div>
</div>
<p>The <code>+</code> operator is essentially a <strong>function</strong> that takes two numbers as arguments and finds their sum.</p>
<p>Since neither <code>"hello"</code> nor <code>"world"</code> are numbers, the R interpreter produces an error.</p>
<p><strong>Errors will stop the execution of your program</strong>, and they will (hopefully) print an error message to the R console.</p>
<p>In R there are two other constructs which are related to errors:</p>
<ol type="1">
<li>Warnings</li>
<li>Messages</li>
</ol>
<p><strong>Warnings</strong> are meant to indicate that <strong>something seems to have gone wrong</strong> in your program that should be inspected.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here’s a simple example of a warning being generated:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seven"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: NAs introduced by coercion</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  5  6 NA</code></pre>
</div>
</div>
<p>The <code>as.numeric()</code> function attempts to <strong>convert each string</strong> in <code>c("5", "6", "seven")</code> into a number, however it is impossible to convert <code>"seven"</code>, so a warning is generated.</p>
<p>Execution of the code is not halted, and an <code>NA</code> is produced for <code>"seven"</code> instead of a number.</p>
</div>
</div>
<p><strong>Messages</strong> simply <strong>print to the R console</strong>, though they are generated by an underlying mechanism that is similar to how errors and warning are generated.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here’s a small function that will generate a message:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(){</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a message."</span>)</span>
<span id="cb6-3">}</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This is a message.</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="generating-errors" class="level2">
<h2 class="anchored" data-anchor-id="generating-errors">Generating Errors</h2>
<p>There are a few essential functions for <strong>generating</strong> errors, warnings, and messages in R.</p>
<p>The <code>stop()</code> function will generate an error.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s generate an error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Something erroneous has occurred!"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">Error<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Something erroneous has occurred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span></span></code></pre></div>
</div>
</div>
<p>If an error occurs inside of a function, then the <strong>name of that function will appear in the error message</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">name_of_function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(){</span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Something bad happened."</span>)</span>
<span id="cb10-3">}</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name_of_function</span>()</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in name_of_function(): Something bad happened.</code></pre>
</div>
</div>
<p>The <code>stopifnot()</code> function takes a series of logical expressions as arguments and if any of them are false an error is generated specifying which expression is false.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s take a look at an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">error_if_n_is_greater_than_zero <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n){</span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-3">  n</span>
<span id="cb12-4">}</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">error_if_n_is_greater_than_zero</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in error_if_n_is_greater_than_zero(5): n &lt;= 0 is not TRUE</code></pre>
</div>
</div>
</div>
</div>
<p>The <code>warning()</code> function creates a warning, and the function itself is very similar to the <code>stop()</code> function. Remember that a warning does not stop the execution of a program (unlike an error.)</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Consider yourself warned!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Consider yourself warned!</code></pre>
</div>
</div>
</div>
</div>
<p>Just like errors, a warning generated inside of a function will include the name of the function in which it was generated:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">make_NA <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x){</span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generating an NA."</span>)</span>
<span id="cb16-3">  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb16-4">}</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_NA</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in make_NA("Sodium"): Generating an NA.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
</div>
<p>Messages are simpler than errors or warnings; they just print strings to the R console.</p>
<p>You can issue a message with the <code>message()</code> function:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"In a bottle."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>In a bottle.</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="when-to-generate-errors-or-warnings" class="level2">
<h2 class="anchored" data-anchor-id="when-to-generate-errors-or-warnings">When to generate errors or warnings</h2>
<p>Stopping the execution of your program with <code>stop()</code> should only happen in the event of a catastrophe - meaning only if it is impossible for your program to continue.</p>
<ul>
<li>If there are <strong>conditions that you can anticipate</strong> that would cause your program to create an error, then you <strong>should document those conditions</strong> so whoever uses your software is aware.</li>
</ul>
<p>An example includes:</p>
<ul>
<li>Providing invalid arguments to a function. You could check this at the beginning of your program using <code>stopifnot()</code> so that the user can quickly realize something has gone wrong.</li>
</ul>
<p>You can think of a function as kind of contract between you and the user:</p>
<ul>
<li>if the user provides specified arguments, your program will provide predictable results.</li>
</ul>
<p>Of course it’s <strong>impossible for you to anticipate</strong> all of the potential uses of your program.</p>
<p>It’s <strong>appropriate to create a warning </strong> when this contract between you and the user is violated.</p>
<p>A perfect example of this situation is the result of</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seven"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: NAs introduced by coercion</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  5  6 NA</code></pre>
</div>
</div>
<p>The user expects a vector of numbers to be returned as the result of <code>as.numeric()</code> but <code>"seven"</code> is coerced into being NA, which is not completely intuitive.</p>
<p>R has largely been developed according to the <a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix Philosophy</a>, which generally <strong>discourages printing text to the console unless something unexpected has occurred</strong>.</p>
<p>Languages that commonly run on Unix systems like C and C++ are rarely used interactively, meaning that they usually underpin computer infrastructure (computers “talking” to other computers).</p>
<p><strong>Messages printed to the console</strong> are therefore not very useful since nobody will ever read them and it’s not straightforward for other programs to capture and interpret them.</p>
<p>In contrast, R code is frequently executed by human beings in the R console, which serves as an interactive environment between the computer and person at the keyboard.</p>
<p>If you <strong>think your program should produce a message</strong>, make sure that the <strong>output of the message is primarily meant for a human to read</strong>.</p>
<p>You should avoid signaling a condition or the result of your program to another program by creating a message.</p>
</section>
<section id="how-should-errors-be-handled" class="level2">
<h2 class="anchored" data-anchor-id="how-should-errors-be-handled">How should errors be handled?</h2>
<p>Imagine writing a program that will take a long time to complete because of a complex calculation or because you’re handling a large amount of data. If an error occurs during this computation then you’re liable to lose all of the results that were calculated before the error, or your program may not finish a critical task that a program further down your pipeline is depending on. If you anticipate the possibility of errors occurring during the execution of your program, then you can design your program to handle them appropriately.</p>
<p>The <code>tryCatch()</code> function is the workhorse of handling errors and warnings in R. The first argument of this function is any R expression, followed by conditions which specify how to handle an error or a warning. The last argument, <code>finally</code>, specifies a function or expression that will be executed after the expression no matter what, even in the event of an error or a warning.</p>
<p>Let’s construct a simple function I’m going to call <a href="https://en.wikipedia.org/wiki/Yogi_Berra"><code>beera</code></a> that catches errors and warnings gracefully.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">beera <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(expr){</span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(expr,</span>
<span id="cb24-3">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(e){</span>
<span id="cb24-4">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"An error occurred:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, e)</span>
<span id="cb24-5">         },</span>
<span id="cb24-6">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warning =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(w){</span>
<span id="cb24-7">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A warning occured:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, w)</span>
<span id="cb24-8">         },</span>
<span id="cb24-9">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">finally =</span> {</span>
<span id="cb24-10">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Finally done!"</span>)</span>
<span id="cb24-11">         })</span>
<span id="cb24-12">}</span></code></pre></div>
</div>
<p>This function takes an expression as an argument and tries to evaluate it. If the expression can be evaluated without any errors or warnings then the result of the expression is returned and the message <code>Finally done!</code> is printed to the R console. If an error or warning is generated, then the functions that are provided to the <code>error</code> or <code>warning</code> arguments are printed. Let’s try this function out with a few examples.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">beera</span>({</span>
<span id="cb25-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb25-3">})</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Finally done!</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">beera</span>({</span>
<span id="cb28-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb28-3">})</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>An error occurred:
Error in "two" + 2: non-numeric argument to binary operator

Finally done!</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">beera</span>({</span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb30-3">})</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>A warning occured:
simpleWarning in doTryCatch(return(expr), name, parentenv, handler): NAs introduced by coercion

Finally done!</code></pre>
</div>
</div>
<p>Notice that we’ve effectively transformed errors and warnings into messages.</p>
<p>Now that you know the basics of generating and catching errors you’ll need to decide when your program should generate an error. My advice to you is to limit the number of errors your program generates as much as possible. Even if you design your program so that it’s able to catch and handle errors, the error handling process slows down your program by orders of magnitude. Imagine you wanted to write a simple function that checks if an argument is an even number. You might write the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">is_even <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n){</span>
<span id="cb32-2">  n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb32-3">}</span>
<span id="cb32-4"></span>
<span id="cb32-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_even</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_even</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in n%%2: non-numeric argument to binary operator</code></pre>
</div>
</div>
<p>You can see that providing a string causes this function to raise an error. You could imagine though that you want to use this function across a list of different data types, and you only want to know which elements of that list are even numbers. You might think to write the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">is_even_error <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n){</span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb36-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(e){</span>
<span id="cb36-4">             <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb36-5">           })</span>
<span id="cb36-6">}</span>
<span id="cb36-7"></span>
<span id="cb36-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_even_error</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">714</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_even_error</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eight"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>This appears to be working the way you intended, however when applied to more data this function will be seriously slow compared to alternatives. For example I could check that <code>n</code> is numeric before treating <code>n</code> like a number:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">is_even_check <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n){</span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb40-3">}</span>
<span id="cb40-4"></span>
<span id="cb40-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_even_check</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1876</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_even_check</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"twelve"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<div class="keyideas">
<p>Notice that by using <code>is.numeric()</code> before the “AND” operator (<code>&amp;&amp;</code>), the expression <code>n %% 2 == 0</code> is never evaluated. This is a programming language design feature called “short circuiting.” The expression can never evaluate to <code>TRUE</code> if the left hand side of <code>&amp;&amp;</code> evaluates to <code>FALSE</code>, so the right hand side is ignored.</p>
</div>
<p>To demonstrate the difference in the speed of the code, we will use the <code>microbenchmark</code> package to measure how long it takes for each function to be applied to the same data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(microbenchmark)</span>
<span id="cb44-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(letters, is_even_check))</span></code></pre></div>
</div>
<pre><code>Unit: microseconds
                           expr    min      lq     mean  median      uq     max neval
 sapply(letters, is_even_check) 46.224 47.7975 61.43616 48.6445 58.4755 167.091   100</code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(letters, is_even_error))</span></code></pre></div>
</div>
<pre><code>Unit: microseconds
                           expr     min       lq     mean   median       uq      max neval
 sapply(letters, is_even_error) 640.067 678.0285 906.3037 784.4315 1044.501 2308.931   100</code></pre>
<p>The error catching approach is nearly 15 times slower!</p>
<p>Proper error handling is an essential tool for any software developer so that you can design programs that are error tolerant. Creating clear and informative error messages is essential for building quality software.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>One closing tip I recommend is to put documentation for your software online, including the meaning of the errors that your software can potentially throw. Often a user’s first instinct when encountering an error is to search online for that error message, which should lead them to your documentation!</p>
</div>
</div>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<ul>
<li><p>Errors, warnings, and messages can be generated within R code using the functions <code>stop</code>, <code>stopifnot</code>, <code>warning</code>, and <code>message</code>.</p></li>
<li><p>Catching errors, and providing useful error messaging, can improve user experience with functions but can also slow down code substantially.</p></li>
</ul>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-error-handling-and-generation" class="uri">https://rdpeng.github.io/Biostat776/lecture-error-handling-and-generation</a></li>
<li><a href="https://adv-r.hadley.nz/debugging" class="uri">https://adv-r.hadley.nz/debugging</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 4</category>
  <category>week 5</category>
  <category>programming</category>
  <category>debugging</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-29-error-handling-and-generation/index.html</guid>
  <pubDate>Thu, 29 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Vectorization and loop functionals</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-27-loop-functions/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://rafalab.github.io/dsbook/programming-basics.html#vectorization" class="uri">https://rafalab.github.io/dsbook/programming-basics.html#vectorization</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-loop-functions" class="uri">https://rdpeng.github.io/Biostat776/lecture-loop-functions</a></li>
<li><a href="https://rafalab.github.io/dsbook/programming-basics.html#vectorization" class="uri">https://rafalab.github.io/dsbook/programming-basics.html#vectorization</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Understand how to perform vector arithmetics in R</li>
<li>Implement the 5 functional loops in R (vs e.g.&nbsp;for loops) in R</li>
</ul>
</div>
</div>
</section>
<section id="vectorization" class="level1">
<h1>Vectorization</h1>
<p>Writing <code>for</code> and <code>while</code> loops are useful and easy to understand, but in R we rarely use them.</p>
<p>As you learn more R, you will realize that <strong>vectorization</strong> is preferred over for-loops since it results in shorter and clearer code.</p>
<section id="vector-arithmetics" class="level2">
<h2 class="anchored" data-anchor-id="vector-arithmetics">Vector arithmetics</h2>
<section id="rescaling-a-vector" class="level3">
<h3 class="anchored" data-anchor-id="rescaling-a-vector">Rescaling a vector</h3>
<p>In R, arithmetic operations on <strong>vectors occur element-wise</strong>. For a quick example, suppose we have height in inches:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">inches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">62</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">66</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">73</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">67</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">73</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">67</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>)</span></code></pre></div>
</div>
<p>and want to convert to centimeters.</p>
<p>Notice what happens when we multiply inches by 2.54:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">inches <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.54</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 175.26 157.48 167.64 177.80 177.80 185.42 170.18 185.42 170.18 177.80</code></pre>
</div>
</div>
<p>In the line above, we <strong>multiplied each element</strong> by 2.54.</p>
<p>Similarly, if for each entry we want to compute how many inches taller or shorter than 69 inches (the average height for males), we can subtract it from every entry like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">inches <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  0 -7 -3  1  1  4 -2  4 -2  1</code></pre>
</div>
</div>
</section>
<section id="two-vectors" class="level3">
<h3 class="anchored" data-anchor-id="two-vectors">Two vectors</h3>
<p>If we have <strong>two vectors of the same length</strong>, and we sum them in R, they will be <strong>added entry by entry</strong> as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb6-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> </span>
<span id="cb6-3">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  2  4  6  8 10 12 14 16 18 20</code></pre>
</div>
</div>
<p>The same holds for other mathematical operations, such as <code>-</code>, <code>*</code> and <code>/</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427
 [9] 3.000000 3.162278</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb10-2">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   4   9  16  25  36  49  64  81 100</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="functional-loops" class="level1">
<h1>Functional loops</h1>
<p>While <code>for</code> loops are perfectly valid, when you use vectorization in an element-wise fashion, there is no need for <code>for</code> loops because we can apply what are called functional loops.</p>
<p><strong>Functional loops</strong> are functions that help us apply the same function to each entry in a vector, matrix, data frame, or list. Here are a list of them:</p>
<ul>
<li><p><code>lapply()</code>: Loop over a list and evaluate a function on each element</p></li>
<li><p><code>sapply()</code>: Same as <code>lapply</code> but try to simplify the result</p></li>
<li><p><code>apply()</code>: Apply a function over the margins of an array</p></li>
<li><p><code>tapply()</code>: Apply a function over subsets of a vector</p></li>
<li><p><code>mapply()</code>: Multivariate version of <code>lapply</code> (won’t cover)</p></li>
</ul>
<p>An auxiliary function <code>split()</code> is also useful, particularly in conjunction with <code>lapply()</code>.</p>
<section id="lapply" class="level2">
<h2 class="anchored" data-anchor-id="lapply"><code>lapply()</code></h2>
<p>The <code>lapply()</code> function does the following simple series of operations:</p>
<ol type="1">
<li>it loops over a list, iterating over each element in that list</li>
<li>it applies a <em>function</em> to each element of the list (a function that you specify)</li>
<li>and returns a list (the <code>l</code> in <code>lapply()</code> is for “list”).</li>
</ol>
<p>This function takes three arguments: (1) a list <code>X</code>; (2) a function (or the name of a function) <code>FUN</code>; (3) other arguments via its <code>...</code> argument. If <code>X</code> is not a list, it will be coerced to a list using <code>as.list()</code>.</p>
<p>The body of the <code>lapply()</code> function can be seen here.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">lapply</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (X, FUN, ...) 
{
    FUN &lt;- match.fun(FUN)
    if (!is.vector(X) || is.object(X)) 
        X &lt;- as.list(X)
    .Internal(lapply(X, FUN))
}
&lt;bytecode: 0x14f92f928&gt;
&lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The actual looping is done internally in C code for efficiency reasons.</p>
</div>
</div>
<p>It is important to remember that <code>lapply()</code> always returns a list, regardless of the class of the input.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here’s an example of applying the <code>mean()</code> function to all elements of a list. If the original list has names, the the names will be preserved in the output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb14-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$a
[1] 1 2 3 4 5

$b
 [1] -0.796902151 -0.704764494  2.602279644  0.342396072  0.959892466
 [6]  0.001693647 -0.038861708  0.413760458 -0.740300144 -1.696169815</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(x, mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$a
[1] 3

$b
[1] 0.0343024</code></pre>
</div>
</div>
<p>Notice that here we are passing the <code>mean()</code> function as an argument to the <code>lapply()</code> function.</p>
</div>
</div>
<p><strong>Functions in R can be</strong> used this way and can be <strong>passed back and forth as arguments</strong> just like any other object inR.</p>
<p>When you pass a function to another function, you do not need to include the open and closed parentheses <code>()</code> like you do when you are <strong>calling</strong> a function.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here is another example of using <code>lapply()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">d =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(x, mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$a
[1] 2.5

$b
[1] -0.1328501

$c
[1] 1.227173

$d
[1] 5.012158</code></pre>
</div>
</div>
</div>
</div>
<p>You can use <code>lapply()</code> to evaluate a function multiple times each with a different argument.</p>
<p>Next is an example where I call the <code>runif()</code> function (to generate uniformly distributed random variables) four times, each time generating a different number of random numbers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(x, runif)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 0.3924746

[[2]]
[1] 0.807656 0.852134

[[3]]
[1] 0.9680554 0.6216622 0.4746080

[[4]]
[1] 0.09363509 0.80682941 0.44572025 0.55164581</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What happened?
</div>
</div>
<div class="callout-body-container callout-body">
<p>When you pass a function to <code>lapply()</code>, <code>lapply()</code> takes elements of the list and passes them as the <em>first argument</em> of the function you are applying.</p>
<p>In the above example, the first argument of <code>runif()</code> is <code>n</code>, and so the elements of the sequence <code>1:4</code> all got passed to the <code>n</code> argument of <code>runif()</code>.</p>
</div>
</div>
<p>Functions that you pass to <code>lapply()</code> may have other arguments. For example, the <code>runif()</code> function has a <code>min</code> and <code>max</code> argument too.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the example above I used the default values for <code>min</code> and <code>max</code>.</p>
<ul>
<li>How would you be able to specify different values for that in the context of <code>lapply()</code>?</li>
</ul>
</div>
</div>
<p>Here is where the <code>...</code> argument to <code>lapply()</code> comes into play. Any arguments that you place in the <code>...</code> argument will get passed down to the function being applied to the elements of the list.</p>
<p>Here, the <code>min = 0</code> and <code>max = 10</code> arguments are passed down to <code>runif()</code> every time it gets called.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(x, runif, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 7.339994

[[2]]
[1] 6.159324 4.167184

[[3]]
[1] 1.3182169 6.3869630 0.2614679

[[4]]
[1] 7.640224 1.984159 9.285444 2.845784</code></pre>
</div>
</div>
<p>So now, instead of the random numbers being between 0 and 1 (the default), the are all between 0 and 10.</p>
<p>The <code>lapply()</code> function (and its friends) makes heavy use of <em>anonymous</em> functions. Anonymous functions are like members of <a href="http://en.wikipedia.org/wiki/Fight_Club">Project Mayhem</a>—they have no names. These functions are generated “on the fly” as you are using <code>lapply()</code>. Once the call to <code>lapply()</code> is finished, the function disappears and does not appear in the workspace.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here I am creating a list that contains two matrices.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) </span>
<span id="cb24-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$a
     [,1] [,2]
[1,]    1    3
[2,]    2    4

$b
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6</code></pre>
</div>
</div>
<p>Suppose I wanted to extract the first column of each matrix in the list. I could write an anonymous function for extracting the first column of each matrix.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(x, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(elt) { elt[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] })</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$a
[1] 1 2

$b
[1] 1 2 3</code></pre>
</div>
</div>
<p>Notice that I put the <code>function()</code> definition right in the call to <code>lapply()</code>.</p>
</div>
</div>
<p>This is perfectly legal and acceptable. You can put an arbitrarily complicated function definition inside <code>lapply()</code>, but if it’s going to be more complicated, it’s probably a better idea to define the function separately.</p>
<p>For example, I could have done the following.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(elt) {</span>
<span id="cb28-2">        elt[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb28-3">}</span>
<span id="cb28-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(x, f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$a
[1] 1 2

$b
[1] 1 2 3</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Now the function is no longer anonymous; its name is <code>f</code>.</p>
</div>
</div>
<p>Whether you use an anonymous function or you define a function first depends on your context. If you think the function <code>f</code> is something you are going to need a lot in other parts of your code, you might want to define it separately. But if you are just going to use it for this call to <code>lapply()</code>, then it is probably simpler to use an anonymous function.</p>
</section>
<section id="sapply" class="level2">
<h2 class="anchored" data-anchor-id="sapply"><code>sapply()</code></h2>
<p>The <code>sapply()</code> function behaves similarly to <code>lapply()</code>; the only real difference is in the return value. <code>sapply()</code> will try to simplify the result of <code>lapply()</code> if possible. Essentially, <code>sapply()</code> calls <code>lapply()</code> on its input and then applies the following algorithm:</p>
<ul>
<li><p>If the result is a list where every element is length 1, then a vector is returned</p></li>
<li><p>If the result is a list where every element is a vector of the same length (&gt; 1), a matrix is returned.</p></li>
<li><p>If it can’t figure things out, a list is returned</p></li>
</ul>
<p>Here’s the result of calling <code>lapply()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">d =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb30-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(x, mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$a
[1] 2.5

$b
[1] -0.7692304

$c
[1] 1.1845

$d
[1] 5.011145</code></pre>
</div>
</div>
<p>Notice that <code>lapply()</code> returns a list (as usual), but that each element of the list has length 1.</p>
<p>Here’s the result of calling <code>sapply()</code> on the same list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(x, mean) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         a          b          c          d 
 2.5000000 -0.7692304  1.1844997  5.0111453 </code></pre>
</div>
</div>
<p>Because the result of <code>lapply()</code> was a list where each element had length 1, <code>sapply()</code> collapsed the output into a numeric vector, which is often more useful than a list.</p>
</section>
<section id="split" class="level2">
<h2 class="anchored" data-anchor-id="split"><code>split()</code></h2>
<p>The <code>split()</code> function takes a vector or other objects and splits it into groups determined by a factor or list of factors.</p>
<p>The arguments to <code>split()</code> are</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(split)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (x, f, drop = FALSE, ...)  </code></pre>
</div>
</div>
<p>where</p>
<ul>
<li><code>x</code> is a vector (or list) or data frame</li>
<li><code>f</code> is a factor (or coerced to one) or a list of factors</li>
<li><code>drop</code> indicates whether empty factors levels should be dropped</li>
</ul>
<p>The combination of <code>split()</code> and a function like <code>lapply()</code> or <code>sapply()</code> is a common paradigm in R. The basic idea is that you can take a data structure, split it into subsets defined by another variable, and apply a function over those subsets. The results of applying that function over the subsets are then collated and returned as an object. This sequence of operations is sometimes referred to as “map-reduce” in other contexts.</p>
<p>Here we simulate some data and split it according to a factor variable. Note that we use the <code>gl()</code> function to “generate levels” in a factor variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb36-2">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gl</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate factor levels</span></span>
<span id="cb36-3">f</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3
Levels: 1 2 3</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(x, f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$`1`
 [1]  0.06440437  1.78480833 -0.94373825  1.94781191 -0.16936618 -0.58442286
 [7]  1.23801276  0.02465268 -0.35022800 -0.03086819

$`2`
 [1] 0.1623650 0.7931292 0.5370609 0.6692380 0.2197358 0.2657368 0.6490295
 [8] 0.2862331 0.8169028 0.9344586

$`3`
 [1]  0.13424958  0.31285258  2.39555383 -0.11859862 -0.08085121 -0.17574475
 [7] -1.08308465  0.18204113  1.13764707  0.56204495</code></pre>
</div>
</div>
<p>A common idiom is <code>split</code> followed by an <code>lapply</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(x, f), mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$`1`
[1] 0.2981067

$`2`
[1] 0.533389

$`3`
[1] 0.326611</code></pre>
</div>
</div>
<section id="splitting-a-data-frame" class="level3">
<h3 class="anchored" data-anchor-id="splitting-a-data-frame">Splitting a Data Frame</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(datasets)</span>
<span id="cb42-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(airquality)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Ozone Solar.R Wind Temp Month Day
1    41     190  7.4   67     5   1
2    36     118  8.0   72     5   2
3    12     149 12.6   74     5   3
4    18     313 11.5   62     5   4
5    NA      NA 14.3   56     5   5
6    28      NA 14.9   66     5   6</code></pre>
</div>
</div>
<p>We can split the <code>airquality</code> data frame by the <code>Month</code> variable so that we have separate sub-data frames for each month.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">s <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(airquality, airquality<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Month)</span>
<span id="cb44-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(s)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 5
 $ 5:'data.frame':  31 obs. of  6 variables:
  ..$ Ozone  : int [1:31] 41 36 12 18 NA 28 23 19 8 NA ...
  ..$ Solar.R: int [1:31] 190 118 149 313 NA NA 299 99 19 194 ...
  ..$ Wind   : num [1:31] 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...
  ..$ Temp   : int [1:31] 67 72 74 62 56 66 65 59 61 69 ...
  ..$ Month  : int [1:31] 5 5 5 5 5 5 5 5 5 5 ...
  ..$ Day    : int [1:31] 1 2 3 4 5 6 7 8 9 10 ...
 $ 6:'data.frame':  30 obs. of  6 variables:
  ..$ Ozone  : int [1:30] NA NA NA NA NA NA 29 NA 71 39 ...
  ..$ Solar.R: int [1:30] 286 287 242 186 220 264 127 273 291 323 ...
  ..$ Wind   : num [1:30] 8.6 9.7 16.1 9.2 8.6 14.3 9.7 6.9 13.8 11.5 ...
  ..$ Temp   : int [1:30] 78 74 67 84 85 79 82 87 90 87 ...
  ..$ Month  : int [1:30] 6 6 6 6 6 6 6 6 6 6 ...
  ..$ Day    : int [1:30] 1 2 3 4 5 6 7 8 9 10 ...
 $ 7:'data.frame':  31 obs. of  6 variables:
  ..$ Ozone  : int [1:31] 135 49 32 NA 64 40 77 97 97 85 ...
  ..$ Solar.R: int [1:31] 269 248 236 101 175 314 276 267 272 175 ...
  ..$ Wind   : num [1:31] 4.1 9.2 9.2 10.9 4.6 10.9 5.1 6.3 5.7 7.4 ...
  ..$ Temp   : int [1:31] 84 85 81 84 83 83 88 92 92 89 ...
  ..$ Month  : int [1:31] 7 7 7 7 7 7 7 7 7 7 ...
  ..$ Day    : int [1:31] 1 2 3 4 5 6 7 8 9 10 ...
 $ 8:'data.frame':  31 obs. of  6 variables:
  ..$ Ozone  : int [1:31] 39 9 16 78 35 66 122 89 110 NA ...
  ..$ Solar.R: int [1:31] 83 24 77 NA NA NA 255 229 207 222 ...
  ..$ Wind   : num [1:31] 6.9 13.8 7.4 6.9 7.4 4.6 4 10.3 8 8.6 ...
  ..$ Temp   : int [1:31] 81 81 82 86 85 87 89 90 90 92 ...
  ..$ Month  : int [1:31] 8 8 8 8 8 8 8 8 8 8 ...
  ..$ Day    : int [1:31] 1 2 3 4 5 6 7 8 9 10 ...
 $ 9:'data.frame':  30 obs. of  6 variables:
  ..$ Ozone  : int [1:30] 96 78 73 91 47 32 20 23 21 24 ...
  ..$ Solar.R: int [1:30] 167 197 183 189 95 92 252 220 230 259 ...
  ..$ Wind   : num [1:30] 6.9 5.1 2.8 4.6 7.4 15.5 10.9 10.3 10.9 9.7 ...
  ..$ Temp   : int [1:30] 91 92 93 93 87 84 80 78 75 73 ...
  ..$ Month  : int [1:30] 9 9 9 9 9 9 9 9 9 9 ...
  ..$ Day    : int [1:30] 1 2 3 4 5 6 7 8 9 10 ...</code></pre>
</div>
</div>
<p>Then we can take the column means for <code>Ozone</code>, <code>Solar.R</code>, and <code>Wind</code> for each sub-data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(s, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb46-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>(x[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Solar.R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wind"</span>)])</span>
<span id="cb46-3">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$`5`
   Ozone  Solar.R     Wind 
      NA       NA 11.62258 

$`6`
    Ozone   Solar.R      Wind 
       NA 190.16667  10.26667 

$`7`
     Ozone    Solar.R       Wind 
        NA 216.483871   8.941935 

$`8`
   Ozone  Solar.R     Wind 
      NA       NA 8.793548 

$`9`
   Ozone  Solar.R     Wind 
      NA 167.4333  10.1800 </code></pre>
</div>
</div>
<p>Using <code>sapply()</code> might be better here for a more readable output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(s, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb48-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>(x[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Solar.R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wind"</span>)])</span>
<span id="cb48-3">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>               5         6          7        8        9
Ozone         NA        NA         NA       NA       NA
Solar.R       NA 190.16667 216.483871       NA 167.4333
Wind    11.62258  10.26667   8.941935 8.793548  10.1800</code></pre>
</div>
</div>
<p>Unfortunately, there are <code>NA</code>s in the data so we cannot simply take the means of those variables. However, we can tell the <code>colMeans</code> function to remove the <code>NA</code>s before computing the mean.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(s, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb50-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>(x[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Solar.R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wind"</span>)], </span>
<span id="cb50-3">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb50-4">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                5         6          7          8         9
Ozone    23.61538  29.44444  59.115385  59.961538  31.44828
Solar.R 181.29630 190.16667 216.483871 171.857143 167.43333
Wind     11.62258  10.26667   8.941935   8.793548  10.18000</code></pre>
</div>
</div>
</section>
</section>
<section id="tapply" class="level2">
<h2 class="anchored" data-anchor-id="tapply">tapply</h2>
<p><code>tapply()</code> is used to apply a function over subsets of a vector. It can be thought of as a combination of <code>split()</code> and <code>sapply()</code> for vectors only. I’ve been told that the “t” in <code>tapply()</code> refers to “table”, but that is unconfirmed.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(tapply)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)  </code></pre>
</div>
</div>
<p>The arguments to <code>tapply()</code> are as follows:</p>
<ul>
<li><code>X</code> is a vector</li>
<li><code>INDEX</code> is a factor or a list of factors (or else they are coerced to factors)</li>
<li><code>FUN</code> is a function to be applied</li>
<li>… contains other arguments to be passed <code>FUN</code></li>
<li><code>simplify</code>, should we simplify the result?</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Given a vector of numbers, one simple operation is to take group means.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Simulate some data</span></span>
<span id="cb54-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb54-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Define some groups with a factor variable</span></span>
<span id="cb54-4">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gl</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)   </span>
<span id="cb54-5">f</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3
Levels: 1 2 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tapply</span>(x, f, mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        1         2         3 
0.2927136 0.2936399 1.0340813 </code></pre>
</div>
</div>
</div>
</div>
<p>We can also apply functions that return more than a single value. In this case, <code>tapply()</code> will not simplify the result and will return a list. Here’s an example of finding the <code>range()</code> (min and max) of each sub-group.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tapply</span>(x, f, range)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$`1`
[1] -1.217068  1.723239

$`2`
[1] 0.0620568 0.8443268

$`3`
[1] -0.1079284  2.8115679</code></pre>
</div>
</div>
</section>
<section id="apply" class="level2">
<h2 class="anchored" data-anchor-id="apply"><code>apply()</code></h2>
<p>The <code>apply()</code> function is used to a evaluate a function (often an anonymous one) over the margins of an array. It is most often used to apply a function to the rows or columns of a matrix (which is just a 2-dimensional array). However, it can be used with general arrays, for example, to take the average of an array of matrices. Using <code>apply()</code> is not really faster than writing a loop, but it works in one line and is highly compact.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(apply)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (X, MARGIN, FUN, ..., simplify = TRUE)  </code></pre>
</div>
</div>
<p>The arguments to <code>apply()</code> are</p>
<ul>
<li><code>X</code> is an array</li>
<li><code>MARGIN</code> is an integer vector indicating which margins should be “retained”.</li>
<li><code>FUN</code> is a function to be applied</li>
<li><code>...</code> is for other arguments to be passed to <code>FUN</code></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here I create a 20 by 10 matrix of Normal random numbers. I then compute the mean of each column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb62-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]       [,2]        [,3]       [,4]       [,5]       [,6]
[1,] -0.08951039  0.8826521 -0.08872757 -0.1902191  1.6645398 -0.6256195
[2,] -1.61681249 -0.1291864 -0.33969902  0.0642613  0.3666109  0.1417229
[3,] -0.04658801 -0.3518867 -1.19269194  0.5000525  0.7995802 -0.8268586
[4,]  0.54126740 -0.5923315  0.59592538 -1.3801277  0.9194444  0.6511138
[5,]  0.02298819 -1.2806856 -0.36783197 -0.8432676 -1.2392163 -0.4812132
[6,] -0.27934449 -1.0370041  0.74642687 -2.1841962  0.3488571 -0.6985333
            [,7]       [,8]        [,9]       [,10]
[1,]  1.54160420 -0.5170260 -0.52851441 -0.04676887
[2,] -1.46016301 -1.2740124  0.05790032 -1.42846117
[3,] -0.57536442  2.0125221 -1.91502406 -1.36074140
[4,]  0.58692626 -0.6922853  0.06218197 -0.10036921
[5,]  0.03727834  0.1837202  0.26596992 -0.59420697
[6,] -0.02896566  0.5216695 -0.74571287  0.29136921</code></pre>
</div>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, mean)  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Take the mean of each column</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] -0.32908184 -0.19267585  0.04411986 -0.21452934 -0.11431928 -0.21070416
 [7]  0.27329343 -0.21840568 -0.41166243 -0.28090778</code></pre>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>I can also compute the sum of each row.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sum)   <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Take the mean of each row</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  2.0024103 -5.6178391 -2.9570003  0.5917455 -4.2964651 -3.0654338
 [7] -1.9762763 -4.2211525 -3.3652473 -0.6591509 -1.8506994 -3.4277422
[13] -0.9036821  0.9532504 -0.1092196  2.6233840  2.6924633 -1.8723594
[19] -4.1938965 -3.4445502</code></pre>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In both calls to <code>apply()</code>, the return value was a vector of numbers.</p>
</div>
</div>
<p>You’ve probably noticed that the second argument is either a 1 or a 2, depending on whether we want row statistics or column statistics. What exactly <em>is</em> the second argument to <code>apply()</code>?</p>
<p>The <code>MARGIN</code> argument essentially indicates to <code>apply()</code> which dimension of the array you want to preserve or retain.</p>
<p>So when taking the mean of each column, I specify</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, mean)</span></code></pre></div>
</div>
<p>because I want to collapse the first dimension (the rows) by taking the mean and I want to preserve the number of columns. Similarly, when I want the row sums, I run</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, mean)</span></code></pre></div>
</div>
<p>because I want to collapse the columns (the second dimension) and preserve the number of rows (the first dimension).</p>
<section id="colrow-sums-and-means" class="level3">
<h3 class="anchored" data-anchor-id="colrow-sums-and-means">Col/Row Sums and Means</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>For the special case of column/row sums and column/row means of matrices, we have some useful shortcuts.</p>
<ul>
<li><code>rowSums</code> = <code>apply(x, 1, sum)</code></li>
<li><code>rowMeans</code> = <code>apply(x, 1, mean)</code></li>
<li><code>colSums</code> = <code>apply(x, 2, sum)</code></li>
<li><code>colMeans</code> = <code>apply(x, 2, mean)</code></li>
</ul>
</div>
</div>
<p>The shortcut functions are heavily optimized and hence are <strong>much</strong> faster, but you probably won’t notice unless you’re using a large matrix.</p>
<p>Another nice aspect of these functions is that they are a bit more descriptive. It’s arguably more clear to write <code>colMeans(x)</code> in your code than <code>apply(x, 2, mean)</code>.</p>
</section>
<section id="other-ways-to-apply" class="level3">
<h3 class="anchored" data-anchor-id="other-ways-to-apply">Other Ways to Apply</h3>
<p>You can do more than take sums and means with the <code>apply()</code> function.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>For example, you can compute quantiles of the rows of a matrix using the <code>quantile()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb70-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]        [,2]         [,3]        [,4]       [,5]       [,6]
[1,]  0.30116593 -0.22143862 -0.780484437  0.24715546  0.4620109 -0.1284762
[2,] -1.02790308 -0.92858900  0.191527407  0.69079520 -0.2844016  0.3033426
[3,] -0.07119538 -0.06317295 -0.987710196 -0.33902017  0.2571209  0.5702837
[4,]  1.12855517  1.73876299 -2.037467412  0.06666361 -1.6490073 -1.0061759
[5,]  1.00533831 -1.29756896  0.009980026  1.98505348 -0.0113328 -0.2182344
[6,]  0.05762476 -0.28615154 -0.517267972  1.07147513  1.4076715  2.2987914
           [,7]       [,8]       [,9]       [,10]
[1,] -0.0770105 -0.0758423 -0.2742897 -1.06783913
[2,] -0.4108593 -0.7534294 -1.2058456 -0.74607337
[3,] -0.9714008  0.1451234 -1.4040156 -0.03308528
[4,] -1.5909674 -0.7444157 -1.6793615 -0.09789561
[5,]  0.2916761 -2.4666819 -0.9916369  0.99983123
[6,]  0.6401452  1.1482895  1.0475003 -0.69766008</code></pre>
</div>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Get row quantiles</span></span>
<span id="cb72-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, quantile, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>))    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]        [,2]       [,3]        [,4]       [,5]       [,6]
25% -0.2610769 -0.88479910 -0.8133057 -1.63449728 -0.7982863 -0.2002075
75%  0.1664060  0.07254515  0.1005712  0.02552381  0.8227924  1.1290859
          [,7]       [,8]     [,9]       [,10]       [,11]      [,12]
25% -0.3483229 -0.2178852 0.142347 -0.00305639 -0.05045378 -0.8347654
75%  0.2779571  0.6790140 1.226393  0.95341826  0.90565824  0.7197274
         [,13]       [,14]      [,15]      [,16]      [,17]      [,18]
25% 0.08092159 -0.08878187 -0.8914984 -0.3260444 -0.4409576 -0.7755624
75% 1.22063634  0.63504774 -0.1218225  0.8874655  1.3131417  1.0484453
         [,19]      [,20]
25% -0.1979752 -0.3811029
75%  0.7158692  0.6466877</code></pre>
</div>
</div>
<p>Notice that I had to pass the <code>probs = c(0.25, 0.75)</code> argument to <code>quantile()</code> via the <code>...</code> argument to <code>apply()</code>.</p>
</div>
</div>
</section>
</section>
<section id="vectorizing-a-function" class="level2">
<h2 class="anchored" data-anchor-id="vectorizing-a-function">Vectorizing a Function</h2>
<p>Let’s talk about how we can <strong>“vectorize” a function</strong>.</p>
<p>What this means is that we can write function that typically only takes single arguments and create a new function that can take vector arguments.</p>
<p>This is often needed when you want to plot functions.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here’s an example of a function that computes the sum of squares given some data, a mean parameter and a standard deviation. The formula is <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5En(x_i-%5Cmu)%5E2/%5Csigma%5E2">.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">sumsq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(mu, sigma, x) {</span>
<span id="cb74-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(((x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb74-3">}</span></code></pre></div>
</div>
<p>This function takes a mean <code>mu</code>, a standard deviation <code>sigma</code>, and some data in a vector <code>x</code>.</p>
<p>In many statistical applications, we want to minimize the sum of squares to find the optimal <code>mu</code> and <code>sigma</code>. Before we do that, we may want to evaluate or plot the function for many different values of <code>mu</code> or <code>sigma</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)       <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Generate some data</span></span>
<span id="cb75-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumsq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This works (returns one value)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 203.2493</code></pre>
</div>
</div>
<p>However, passing a vector of <code>mu</code>s or <code>sigma</code>s won’t work with this function because it’s not vectorized.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sumsq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This is not what we want</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 105.2917</code></pre>
</div>
</div>
</div>
</div>
<p>There’s even a function in R called <code>Vectorize()</code> that <strong>automatically can create a vectorized version of your function</strong>.</p>
<p>So we could create a <code>vsumsq()</code> function that is fully vectorized as follows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1">vsumsq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vectorize</span>(sumsq, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>))</span>
<span id="cb79-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vsumsq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 203.24928 122.09428 108.16721 103.66455 101.75042 100.80246 100.28605
 [8]  99.98663  99.80583  99.69400</code></pre>
</div>
</div>
<p>Pretty cool, right?</p>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<ul>
<li><p>The loop functions in R are very powerful because they allow you to conduct a series of operations on data using a compact form</p></li>
<li><p>The operation of a loop function involves iterating over an R object (e.g.&nbsp;a list or vector or matrix), applying a function to each element of the object, and the collating the results and returning the collated results.</p></li>
<li><p>Loop functions make heavy use of anonymous functions, which exist for the life of the loop function but are not stored anywhere</p></li>
<li><p>The <code>split()</code> function can be used to divide an R object in to subsets determined by another variable which can subsequently be looped over using loop functions.</p></li>
</ul>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Write a function <code>compute_s_n()</code> that for any given <code>n</code> computes the sum</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%0AS_n%20=%201%5E2%20+%202%5E2%20+%203%5E2%20+%20%5Cldots%20+%20n%5E2%0A"></p>
<p>Report the value of the sum when <img src="https://latex.codecogs.com/png.latex?n"> = 10.</p>
<ol start="2" type="1">
<li><p>Define an empty numerical vector <code>s_n</code> of size 25 using <code>s_n &lt;- vector("numeric", 25)</code> and store in the results of <img src="https://latex.codecogs.com/png.latex?S_1,%20S_2,%20%5Cldots,%20S_n"> using a for-loop.</p></li>
<li><p>Repeat Q3, but this time use <code>sapply()</code>.</p></li>
<li><p>Plot <code>s_n</code> versus <code>n</code>. Use points defined by <img src="https://latex.codecogs.com/png.latex?n=%201,%20%5Cldots,%2025"></p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-loop-functions" class="uri">https://rdpeng.github.io/Biostat776/lecture-loop-functions</a></li>
<li><a href="https://rafalab.github.io/dsbook/programming-basics.html#vectorization" class="uri">https://rafalab.github.io/dsbook/programming-basics.html#vectorization</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 4</category>
  <category>week 5</category>
  <category>R</category>
  <category>programming</category>
  <category>functions</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-27-loop-functions/index.html</guid>
  <pubDate>Tue, 27 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Functions</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-22-functions/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://r4ds.had.co.nz/functions" class="uri">https://r4ds.had.co.nz/functions</a></li>
<li><a href="https://adv-r.hadley.nz/functions.html?#functions" class="uri">https://adv-r.hadley.nz/functions.html?#functions</a></li>
<li><a href="https://swcarpentry.github.io/r-novice-inflammation/02-func-R" class="uri">https://swcarpentry.github.io/r-novice-inflammation/02-func-R</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-functions" class="uri">https://rdpeng.github.io/Biostat776/lecture-functions</a></li>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-scoping-rules-of-r" class="uri">https://rdpeng.github.io/Biostat776/lecture-scoping-rules-of-r</a></li>
<li><a href="https://r4ds.had.co.nz/functions" class="uri">https://r4ds.had.co.nz/functions</a></li>
<li><a href="https://r4ds.had.co.nz/functions.html#environment" class="uri">https://r4ds.had.co.nz/functions.html#environment</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Know how to create a <strong>function</strong> using <code>function()</code> in R</li>
<li>Know how to define <strong>named arguments</strong> inside a function with default values</li>
<li>Be able to use named matching or <strong>positional matching</strong> in the argument list</li>
<li>Understand what is <strong>lazy evaluation</strong></li>
<li>Understand the the special <code>...</code> argument in a function definition</li>
</ul>
</div>
</div>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Writing functions is a <strong>core activity</strong> of an R programmer. It represents the key step of the transition from a mere “user” to a developer who creates new functionality for R.</p>
<p><strong>Functions</strong> are often used to <strong>encapsulate a sequence of expressions that need to be executed numerous times</strong>, perhaps under slightly different conditions.</p>
<p>Also, functions are also often written <strong>when code must be shared with others or the public</strong>.</p>
<p>The writing of a function allows a developer to create an interface to the code, that is explicitly specified with a set of <strong>arguments</strong> (or parameters).</p>
<p>This interface provides an <strong>abstraction of the code</strong> to potential users. This abstraction simplifies the users’ lives because it relieves them from having to know every detail of how the code operates.</p>
<p>In addition, the creation of an interface allows the developer to <strong>communicate to the user the aspects of the code that are important</strong> or are most relevant.</p>
<section id="functions-in-r" class="level2">
<h2 class="anchored" data-anchor-id="functions-in-r">Functions in R</h2>
<p>Functions in R are “first class objects”, which means that they can be treated much like any other R object.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important facts about R functions
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Functions can be passed as arguments to other functions.
<ul>
<li>This is very handy for the various apply functions, like <code>lapply()</code> and <code>sapply()</code>.</li>
</ul></li>
<li>Functions can be nested, so that you can define a function inside of another function.</li>
</ul>
</div>
</div>
<p>If you are familiar with common language like C, these features might appear a bit strange. However, they are really important in R and can be useful for data analysis.</p>
</section>
<section id="your-first-function" class="level2">
<h2 class="anchored" data-anchor-id="your-first-function">Your First Function</h2>
<p>Functions are defined using the <code>function()</code> directive and are <strong>stored as R objects</strong> just like anything else.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>In particular, functions are R objects of class <code>function</code>.</p>
<p>Here’s a simple function that takes no arguments and does nothing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb1-2">        <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This is an empty function</span></span>
<span id="cb1-3">}</span>
<span id="cb1-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Functions have their own class</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(f)  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "function"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Execute this function</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>()       </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
</div>
</div>
</div>
<p>Not very interesting, but it is a start!</p>
<p>The next thing we can do is <strong>create a function</strong> that actually has a non-trivial <strong>function body</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb5-2">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is the function body</span></span>
<span id="cb5-3">        hello <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(hello) </span>
<span id="cb5-5">}</span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, world!</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>cat()</code> is useful and preferable to <code>print()</code> in several settings. One reason is that it doesn’t output new lines (i.e.&nbsp;<code>\n</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">hello <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(hello)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello, world!\n"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(hello)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, world!</code></pre>
</div>
</div>
</div>
</div>
<p>The last aspect of a basic function is the <strong>function arguments</strong>.</p>
<p>These are <strong>the options that you can specify to the user</strong> that the user may explicitly set.</p>
<p>For this basic function, we can add an argument that determines how many times “Hello, world!” is printed to the console.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(num) {</span>
<span id="cb11-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(num)) {</span>
<span id="cb11-3">                hello <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb11-4">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(hello) </span>
<span id="cb11-5">        }</span>
<span id="cb11-6">}</span>
<span id="cb11-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, world!
Hello, world!
Hello, world!</code></pre>
</div>
</div>
<p>Obviously, we <strong>could have just cut-and-pasted</strong> the <code>cat("Hello, world!\n")</code> code three times to achieve the same effect, but then we wouldn’t be programming, would we?</p>
<p>Also, it would be un-neighborly of you to give your code to someone else and force them to cut-and-paste the code however many times the need to see “Hello, world!”.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you find yourself doing a lot of cutting and pasting, that’s usually a good sign that you might need to write a function.</p>
</div>
</div>
<p>Finally, the function above doesn’t <strong>return</strong> anything.</p>
<p>It just prints “Hello, world!” to the console <code>num</code> number of times and then exits.</p>
<p>But often it is useful <strong>if a function returns something</strong> that perhaps can be fed into another section of code.</p>
<p>This next function returns the total number of characters printed to the console.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(num) {</span>
<span id="cb13-2">        hello <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(num)) {</span>
<span id="cb13-4">                 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(hello)</span>
<span id="cb13-5">        }</span>
<span id="cb13-6">        chars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(hello) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> num</span>
<span id="cb13-7">        chars</span>
<span id="cb13-8">}</span>
<span id="cb13-9">meaningoflife <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, world!
Hello, world!
Hello, world!</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(meaningoflife)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 42</code></pre>
</div>
</div>
<p>In the above function, we did not have to indicate anything special in order for the function to return the number of characters.</p>
<p>In R, the <strong>return value of a function</strong> is always the very <strong>last expression that is evaluated</strong>.</p>
<p>Because the <code>chars</code> variable is the last expression that is evaluated in this function, that becomes the return value of the function.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>There is a <code>return()</code> function that can be used to return an explicitly value from a function, but it is rarely used in R (we will discuss it a bit later in this lesson).</p>
</div>
</div>
<p>Finally, in the above function, the user must specify the value of the argument <code>num</code>. If it is not specified by the user, R will throw an error.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>()</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in f(): argument "num" is missing, with no default</code></pre>
</div>
</div>
<p>We can modify this behavior by setting a <strong>default value</strong> for the argument <code>num</code>.</p>
<p><strong>Any function argument can have a default value</strong>, if you wish to specify it.</p>
<p>Sometimes, argument values are rarely modified (except in special cases) and it makes sense to set a default value for that argument. This relieves the user from having to specify the value of that argument every single time the function is called.</p>
<p>Here, for example, we could set the default value for <code>num</code> to be 1, so that if the function is called without the <code>num</code> argument being explicitly specified, then it will print “Hello, world!” to the console once.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb19-2">        hello <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb19-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(num)) {</span>
<span id="cb19-4">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(hello)</span>
<span id="cb19-5">        }</span>
<span id="cb19-6">        chars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(hello) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> num</span>
<span id="cb19-7">        chars</span>
<span id="cb19-8">}</span>
<span id="cb19-9"></span>
<span id="cb19-10"></span>
<span id="cb19-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>()    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Use default value for 'num'</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, world!</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 14</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)   <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Use user-specified value</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, world!
Hello, world!</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 28</code></pre>
</div>
</div>
<p>Remember that the function still returns the number of characters printed to the console.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>formals()</code> function returns a list of all the formal arguments of a function</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$num
[1] 1</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>We have written a function that</p>
<ul>
<li><p>has one <em>formal argument</em> named <code>num</code> with a <em>default value</em> of 1. The <em>formal arguments</em> are the arguments included in the function definition.</p></li>
<li><p>prints the message “Hello, world!” to the console a number of times indicated by the argument <code>num</code></p></li>
<li><p><em>returns</em> the number of characters printed to the console</p></li>
</ul>
</section>
</section>
<section id="arguments" class="level1">
<h1>Arguments</h1>
<section id="named-arguments" class="level2">
<h2 class="anchored" data-anchor-id="named-arguments">Named arguments</h2>
<p>Above, we have learned that functions have <strong>named arguments</strong>, which can optionally have default values.</p>
<p>Because all function arguments have names, they can be specified using their name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, world!
Hello, world!</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 28</code></pre>
</div>
</div>
<p>Specifying an argument by its name is sometimes useful <strong>if a function has many arguments</strong> and it may not always be clear which argument is being specified.</p>
<p>Here, our function only has one argument so there’s no confusion.</p>
</section>
<section id="argument-matching" class="level2">
<h2 class="anchored" data-anchor-id="argument-matching">Argument matching</h2>
<p>Calling an <strong>R function with multiple arguments</strong> can be done in a variety of ways.</p>
<p>This may be confusing at first, but it’s really handy when doing interactive work at the command line. R functions arguments can be matched <strong>positionally</strong> or <strong>by name</strong>.</p>
<ul>
<li><strong>Positional matching</strong> just means that R assigns the first value to the first argument, the second value to second argument, etc.</li>
</ul>
<p>So, in the following call to <code>rnorm()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(rnorm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (n, mean = 0, sd = 1)  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">mydata <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)              <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Generate some data</span></span></code></pre></div>
</div>
<p>100 is assigned to the <code>n</code> argument, 2 is assigned to the <code>mean</code> argument, and 1 is assigned to the <code>sd</code> argument, all by positional matching.</p>
<p>The following calls to the <code>sd()</code> function (which computes the empirical standard deviation of a vector of numbers) are all equivalent.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>sd(x, na.rm = FALSE)</code> has two arguments:</p>
<ul>
<li><code>x</code> indicates the vector of numbers</li>
<li><code>na.rm</code> is a logical indicating whether missing values should be removed or not (default is <code>FALSE</code>)</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Positional match first argument, default for 'na.rm'</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(mydata)                     </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.059718</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Specify 'x' argument by name, default for 'na.rm'</span></span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mydata)                 </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.059718</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Specify both arguments by name</span></span>
<span id="cb37-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mydata, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.059718</code></pre>
</div>
</div>
</div>
</div>
<p>When <strong>specifying the function arguments by name</strong>, it <strong>doesn’t matter in what order</strong> you specify them.</p>
<p>In the example below, we specify the <code>na.rm</code> argument first, followed by <code>x</code>, even though <code>x</code> is the first argument defined in the function definition.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Specify both arguments by name</span></span>
<span id="cb39-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mydata)     </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.059718</code></pre>
</div>
</div>
<p>You <strong>can mix positional matching with matching by name</strong>.</p>
<p>When an argument is matched by name, <strong>it is “taken out” of the argument list</strong> and the remaining unnamed arguments are matched in the order that they are listed in the function definition.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, mydata)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.059718</code></pre>
</div>
</div>
<p>Here, the <code>mydata</code> object is assigned to the <code>x</code> argument, because it’s the only argument not yet specified.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>args()</code> function displays the argument names and corresponding default values of a function</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span>(f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (num = 1) 
NULL</code></pre>
</div>
</div>
</div>
</div>
<p>Below is the argument list for the <code>lm()</code> function, which fits linear models to a dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span>(lm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (formula, data, subset, weights, na.action, method = "qr", 
    model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, 
    contrasts = NULL, offset, ...) 
NULL</code></pre>
</div>
</div>
<p>The following two calls are equivalent.</p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mydata, y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb47-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, mydata, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Even though it’s legal, I don’t recommend messing around with the order of the arguments too much, since it can lead to some confusion.</p>
</div>
</div>
<p>Most of the time, <strong>named arguments are helpful</strong>:</p>
<ul>
<li>On the command line when you have a long argument list and you want to use the defaults for everything except for an argument near the end of the list</li>
<li>If you can remember the name of the argument and not its position on the argument list</li>
</ul>
<p>For example, <strong>plotting functions</strong> often have a lot of options to allow for customization, but this makes it difficult to remember exactly the position of every argument on the argument list.</p>
<p>Function arguments can also be <strong>partially matched</strong>, which is useful for interactive work.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The order of operations when given an argument is</p>
<ol type="1">
<li>Check for exact match for a named argument</li>
<li>Check for a partial match</li>
<li>Check for a positional match</li>
</ol>
</div>
</div>
<p><strong>Partial matching should be avoided when writing longer code or programs</strong>, because it may lead to confusion if someone is reading the code. However, partial matching is very useful when calling functions interactively that have very long argument names.</p>
</section>
<section id="lazy-evaluation" class="level2">
<h2 class="anchored" data-anchor-id="lazy-evaluation">Lazy Evaluation</h2>
<p>Arguments to functions are <strong>evaluated lazily</strong>, so they are evaluated only as needed in the body of the function.</p>
<p>In this example, the function <code>f()</code> has two arguments: <code>a</code> and <code>b</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a, b) {</span>
<span id="cb48-2">        a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb48-3">} </span>
<span id="cb48-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4</code></pre>
</div>
</div>
<p>This <strong>function never actually uses the argument <code>b</code></strong>, so calling <code>f(2)</code> will not produce an error because the 2 gets positionally matched to <code>a</code>.</p>
<p>This behavior can be good or bad. It’s common to write a function that doesn’t use an argument and not notice it simply because R never throws an error.</p>
<p>This example also shows lazy evaluation at work, but does eventually result in an error.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a, b) {</span>
<span id="cb50-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(a)</span>
<span id="cb50-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(b)</span>
<span id="cb50-4">}</span>
<span id="cb50-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 45</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in print(b): argument "b" is missing, with no default</code></pre>
</div>
</div>
<p>Notice that “45” got printed first before the error was triggered! This is because <code>b</code> did not have to be evaluated until after <code>print(a)</code>.</p>
<p>Once the function tried to evaluate <code>print(b)</code> the function had to throw an error.</p>
</section>
<section id="the-...-argument" class="level2">
<h2 class="anchored" data-anchor-id="the-...-argument">The <code>...</code> Argument</h2>
<p>There is a <strong>special argument in R known as the <code>...</code> argument</strong>, which indicates <strong>a variable number of arguments</strong> that are usually passed on to other functions.</p>
<p>The <code>...</code> argument is <strong>often used when extending another function</strong> and you do not want to copy the entire argument list of the original function</p>
<p>For example, a custom plotting function may want to make use of the default <code>plot()</code> function along with its entire argument list. The function below changes the default for the <code>type</code> argument to the value <code>type = "l"</code> (the original default was <code>type = "p"</code>).</p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">myplot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, ...) {</span>
<span id="cb53-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> type, ...)    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Pass '...' to 'plot' function</span></span>
<span id="cb53-3">}</span></code></pre></div>
<p>Generic functions use <code>...</code> so that extra arguments can be passed to methods.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">mean</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (x, ...) 
UseMethod("mean")
&lt;bytecode: 0x13a05d430&gt;
&lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<p>The <code>...</code> argument is necessary when the number of arguments passed to the function cannot be known in advance. This is clear in functions like <code>paste()</code> and <code>cat()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"three"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "one two three"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"three"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"four"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"five"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "one_two_three_four_five"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span>(paste)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (..., sep = " ", collapse = NULL, recycle0 = FALSE) 
NULL</code></pre>
</div>
</div>
<p>Because <code>paste()</code> prints out text to the console by combining multiple character vectors together, it is impossible for this function to know in advance how many character vectors will be passed to the function by the user.</p>
<p>So the first argument in the function is <code>...</code>.</p>
</section>
<section id="arguments-coming-after-the-...-argument" class="level2">
<h2 class="anchored" data-anchor-id="arguments-coming-after-the-...-argument">Arguments Coming After the <code>...</code> Argument</h2>
<p>One catch with <code>...</code> is that any <strong>arguments that appear after</strong> <code>...</code> on the argument list <strong>must be named explicitly and cannot be partially matched or matched positionally</strong>.</p>
<p>Take a look at the arguments to the <code>paste()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span>(paste)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (..., sep = " ", collapse = NULL, recycle0 = FALSE) 
NULL</code></pre>
</div>
</div>
<p>With the <code>paste()</code> function, the arguments <code>sep</code> and <code>collapse</code> must be named explicitly and in full if the default values are not going to be used.</p>
<p>Here, I specify that I want “a” and “b” to be pasted together and separated by a colon.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a:b"</code></pre>
</div>
</div>
<p>If I don’t specify the <code>sep</code> argument in full and attempt to rely on partial matching, I don’t get the expected result.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a b :"</code></pre>
</div>
</div>
</section>
</section>
<section id="functions-are-for-humans-and-computers" class="level1">
<h1>Functions are for humans and computers</h1>
<p>As you start to write your own functions, it’s important to keep in mind that functions are not just for the computer, but are also for humans. Technically, R does not care what your function is called, or what comments it contains, but these are important for <strong>human readers</strong>.</p>
<p>This section discusses some things that you should bear in mind when writing functions that humans can understand.</p>
<section id="the-name-of-a-function-is-important" class="level2">
<h2 class="anchored" data-anchor-id="the-name-of-a-function-is-important">The name of a function is important</h2>
<p>In an ideal world, you want the name of your function to be short but clearly describe what the function does. This is not always easy, but here are some tips.</p>
<p>The <strong>function names</strong> should be <strong>verbs</strong>, and <strong>arguments</strong> should be <strong>nouns</strong>.</p>
<p>There are some exceptions:</p>
<ul>
<li>nouns are ok if the function computes a very well known noun (i.e.&nbsp;<code>mean()</code> is better than <code>compute_mean()</code>).</li>
<li>A good sign that a noun might be a better choice is if you are using a very broad verb like “get”, “compute”, “calculate”, or “determine”. Use your best judgement and do not be afraid to rename a function if you figure out a better name later.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Too short</span></span>
<span id="cb68-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>()</span>
<span id="cb68-3"></span>
<span id="cb68-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Not a verb, or descriptive</span></span>
<span id="cb68-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_awesome_function</span>()</span>
<span id="cb68-6"></span>
<span id="cb68-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Long, but clear</span></span>
<span id="cb68-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">impute_missing</span>()</span>
<span id="cb68-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collapse_years</span>()</span></code></pre></div>
</div>
</section>
<section id="snake_case-vs-camelcase" class="level2">
<h2 class="anchored" data-anchor-id="snake_case-vs-camelcase">snake_case vs camelCase</h2>
<p>If your function name is composed of multiple words, <strong>use “snake_case”</strong>, where each lowercase word is separated by an underscore.</p>
<p>“camelCase” is a popular alternative. It does not really matter which one you pick, the important thing is to be consistent: <strong>pick one or the other and stick with it</strong>.</p>
<p>R itself is not very consistent, but there is nothing you can do about that. Make sure you do not fall into the same trap by making your code as consistent as possible.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Never do this!</span></span>
<span id="cb69-2">col_mins <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) {}</span>
<span id="cb69-3">rowMaxes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) {}</span></code></pre></div>
</div>
</section>
<section id="use-a-common-prefix" class="level2">
<h2 class="anchored" data-anchor-id="use-a-common-prefix">Use a common prefix</h2>
<p>If you have a family of functions that do similar things, make sure they have consistent names and arguments.</p>
<p>It’s a good idea to indicate that they are connected. That is better than a common suffix because autocomplete allows you to type the prefix and see all the members of the family.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good</span></span>
<span id="cb70-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">input_select</span>()</span>
<span id="cb70-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">input_checkbox</span>()</span>
<span id="cb70-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">input_text</span>()</span>
<span id="cb70-5"></span>
<span id="cb70-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Not so good</span></span>
<span id="cb70-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_input</span>()</span>
<span id="cb70-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">checkbox_input</span>()</span>
<span id="cb70-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text_input</span>()</span></code></pre></div>
</div>
</section>
<section id="avoid-overriding-exisiting-functions" class="level2">
<h2 class="anchored" data-anchor-id="avoid-overriding-exisiting-functions">Avoid overriding exisiting functions</h2>
<p>Where possible, avoid overriding existing functions and variables.</p>
<p>It is impossible to do in general because so many good names are already taken by other packages, but avoiding the most common names from base R will avoid confusion.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Don't do this!</span></span>
<span id="cb71-2">T <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb71-3">c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb71-4">mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x)</span></code></pre></div>
</div>
</section>
<section id="use-comments" class="level2">
<h2 class="anchored" data-anchor-id="use-comments">Use comments</h2>
<p>Use <strong>comments</strong> are lines starting with #. They can explain the “why” of your code.</p>
<p>You generally should avoid comments that explain the “what” or the “how”. If you can’t understand what the code does from reading it, you should think about how to rewrite it to be more clear.</p>
<ul>
<li>Do you need to add some intermediate variables with useful names?</li>
<li>Do you need to break out a subcomponent of a large function so you can name it?</li>
</ul>
<p>However, your code can never capture the reasoning behind your decisions:</p>
<ul>
<li>Why did you choose this approach instead of an alternative?</li>
<li>What else did you try that didn’t work?</li>
</ul>
<p>It’s a great idea to capture that sort of thinking in a comment.</p>
</section>
</section>
<section id="environment" class="level1">
<h1>Environment</h1>
<p>The last component of a function is its <strong>environment</strong>.</p>
<p>This is not something you need to understand deeply when you first start writing functions. However, it’s important to know a little bit about environments because they are crucial to how functions work.</p>
<p>The <strong>environment of a function</strong> controls how R finds the value associated with a name.</p>
<p>For example, take this function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb72-2">  x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span>
<span id="cb72-3">} </span></code></pre></div>
</div>
<p>In many programming languages, this would be an error, because <code>y</code> is not defined inside the function.</p>
<p>In R, this is valid code because R uses rules called <strong>lexical scoping</strong> to find the value associated with a name.</p>
<p>Since <code>y</code> is not defined inside the function, R will look in the environment where the function was defined:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb73-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 110</code></pre>
</div>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb75-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1010</code></pre>
</div>
</div>
<p>This behavior seems like a recipe for bugs, and indeed you should avoid creating functions like this deliberately, but by and large it does not cause too many problems (especially if you regularly restart R to get to a clean slate).</p>
<p>The <strong>advantage of this behavior</strong> is that from a language standpoint <strong>it allows R to be very consistent</strong>.</p>
<ul>
<li>Every name is looked up using the same set of rules.</li>
</ul>
<p>For <code>f()</code> that includes the behavior of two things that you might not expect: <code>{</code> and <code>+</code>. This allows you to do devious things like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb77-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) {</span>
<span id="cb77-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x, y)</span>
<span id="cb77-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb77-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x, y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span></span>
<span id="cb77-6">  }</span>
<span id="cb77-7">}</span>
<span id="cb77-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
  3 3.3 
 93 907 </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span></code></pre></div>
</div>
<p>This is a common phenomenon in R. R places few limits on your power. You can do many things that you can’t do in other programming languages. You can do many things that 99% of the time are extremely ill-advised (like overriding how addition works!). But this power and flexibility is what makes tools like <code>ggplot2</code> and <code>dplyr</code> possible.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
More resources
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you are interested in learning more about scoping, check out</p>
<ul>
<li><a href="https://adv-r.hadley.nz/functions.html?#lexical-scoping" class="uri">https://adv-r.hadley.nz/functions.html?#lexical-scoping</a></li>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-scoping-rules-of-r" class="uri">https://rdpeng.github.io/Biostat776/lecture-scoping-rules-of-r</a></li>
</ul>
</div>
</div>
</section>
<section id="summary-1" class="level1">
<h1>Summary</h1>
<ul>
<li><p>Functions can be defined using the <code>function()</code> directive and are assigned to R objects just like any other R object</p></li>
<li><p>Functions have can be defined with named arguments; these function arguments can have default values</p></li>
<li><p>Functions arguments can be specified by name or by position in the argument list</p></li>
<li><p>Functions always return the last expression evaluated in the function body</p></li>
<li><p>A variable number of arguments can be specified using the special <code>...</code> argument in a function definition.</p></li>
</ul>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Practice turning the following code snippets into functions. Think about what each function does. What would you call it? How many arguments does it need? Can you rewrite it to be more expressive or less duplicative?</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x))</span>
<span id="cb80-2"></span>
<span id="cb80-3">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<ol start="2" type="1">
<li><p>Read the <a href="https://en.wikipedia.org/wiki/Little_Bunny_Foo_Foo">complete lyrics</a> to “Little Bunny Foo Foo”. There is a lot of duplication in this song. Extend the initial piping example to recreate the complete song, and use functions to reduce the duplication.</p></li>
<li><p>Take a function that you’ve written recently and spend 5 minutes brainstorming a better name for it and its arguments.</p></li>
<li><p>What does the <code>trim</code> argument to <code>mean()</code> do? When might you use it?</p></li>
<li><p>The default value for the method argument to <code>cor()</code> is <code>c("pearson", "kendall", "spearman")</code>. What does that mean? What value is used by default?</p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-functions" class="uri">https://rdpeng.github.io/Biostat776/lecture-functions</a></li>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-scoping-rules-of-r" class="uri">https://rdpeng.github.io/Biostat776/lecture-scoping-rules-of-r</a></li>
<li><a href="https://r4ds.had.co.nz/functions" class="uri">https://r4ds.had.co.nz/functions</a></li>
<li><a href="https://r4ds.had.co.nz/functions.html#environment" class="uri">https://r4ds.had.co.nz/functions.html#environment</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 4</category>
  <category>week 4</category>
  <category>R</category>
  <category>programming</category>
  <category>functions</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-22-functions/index.html</guid>
  <pubDate>Thu, 22 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Control Structures</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-22-control-structures/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://rafalab.github.io/dsbook/programming-basics" class="uri">https://rafalab.github.io/dsbook/programming-basics</a></li>
<li><a href="https://r4ds.had.co.nz/iteration" class="uri">https://r4ds.had.co.nz/iteration</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-control-structures" class="uri">https://rdpeng.github.io/Biostat776/lecture-control-structures</a></li>
<li><a href="https://r4ds.had.co.nz/iteration" class="uri">https://r4ds.had.co.nz/iteration</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to use commonly used control structures including <code>if</code>, <code>while</code>, <code>repeat</code>, and <code>for</code></li>
<li>Be able to skip an iteration of a loop using <code>next</code></li>
<li>Be able to exit a loop immediately using <code>break</code></li>
</ul>
</div>
</div>
</section>
<section id="control-structures" class="level1">
<h1>Control Structures</h1>
<p><strong>Control structures</strong> in R allow you to <strong>control the flow of execution of a series of R expressions</strong>.</p>
<p>Basically, control structures allow you to put some “logic” into your R code, rather than just always executing the same R code every time.</p>
<p>Control structures <strong>allow you to respond to inputs or to features of the data</strong> and execute different R expressions accordingly.</p>
<p>Commonly used control structures are</p>
<ul>
<li><p><code>if</code> and <code>else</code>: testing a condition and acting on it</p></li>
<li><p><code>for</code>: execute a loop a fixed number of times</p></li>
<li><p><code>while</code>: execute a loop <em>while</em> a condition is true</p></li>
<li><p><code>repeat</code>: execute an infinite loop (must <code>break</code> out of it to stop)</p></li>
<li><p><code>break</code>: break the execution of a loop</p></li>
<li><p><code>next</code>: skip an interation of a loop</p></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Most control structures are not used in interactive sessions, but rather when writing functions or longer expressions.</p>
<p>However, these constructs do not have to be used in functions and it’s a good idea to become familiar with them before we delve into functions.</p>
</div>
</div>
<section id="if-else" class="level2">
<h2 class="anchored" data-anchor-id="if-else"><code>if</code>-<code>else</code></h2>
<p>The <code>if</code>-<code>else</code> combination is probably the most commonly used control structure in R (or perhaps any language). This structure allows you to test a condition and act on it depending on whether it’s true or false.</p>
<p>For starters, you can just use the <code>if</code> statement.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>condition<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) {</span>
<span id="cb1-2">        <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## do something</span></span>
<span id="cb1-3">} </span>
<span id="cb1-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Continue with rest of code</span></span></code></pre></div>
<p>The above code does nothing if the condition is false. If you have an action you want to execute when the condition is false, then you need an <code>else</code> clause.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>condition<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) {</span>
<span id="cb2-2">        <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## do something</span></span>
<span id="cb2-3">} </span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb2-5">        <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## do something else</span></span>
<span id="cb2-6">}</span></code></pre></div>
<p>You can have a series of tests by following the initial <code>if</code> with any number of <code>else if</code>s.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>condition1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) {</span>
<span id="cb3-2">        <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## do something</span></span>
<span id="cb3-3">} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>condition2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>)  {</span>
<span id="cb3-4">        <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## do something different</span></span>
<span id="cb3-5">} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb3-6">        <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## do something different</span></span>
<span id="cb3-7">}</span></code></pre></div>
<p>Here is an example of a valid if/else structure.</p>
<p>Let’s use the <code>runif(n, min=0, max=1)</code> function which draws a random value between a min and max value with the default being between 0 and 1.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)  </span>
<span id="cb4-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.1601887</code></pre>
</div>
</div>
<p>Then, we can write and <code>if</code>-<code>else</code> statement that tests whethere <code>x</code> is greater than 3 or not.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>If <code>x</code> is greater than 3, then the first condition occurs. If <code>x</code> is not greater than 3, then the second condition occurs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb8-2">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb8-3">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb8-4">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-5">  }</span></code></pre></div>
</div>
<p>Finally, we can auto print <code>y</code> to see what the value is.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0</code></pre>
</div>
</div>
<p>This expression can also be written a different (but equivalent!) way in R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb11-2">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb11-3">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> { </span>
<span id="cb11-4">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-5">  }</span>
<span id="cb11-6"></span>
<span id="cb11-7">y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Neither way of writing this expression is more correct than the other.</p>
<p>Which one you use will <strong>depend on your preference</strong> and perhaps those of the team you may be working with.</p>
</div>
</div>
<p>Of course, the <code>else</code> clause is not necessary. You could have a series of if clauses that always get executed if their respective conditions are true.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>condition1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) {</span>
<span id="cb13-2"></span>
<span id="cb13-3">}</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>condition2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) {</span>
<span id="cb13-6"></span>
<span id="cb13-7">}</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s use the <code>palmerpenguins</code> dataset and write a if-else statement that</p>
<ol type="1">
<li>Randomly samples a value from a standard normal distribution (<strong>Hint</strong>: check out the <code>rnorm(n, mean = 0, sd = 1)</code> function in base R).</li>
<li>If the value is larger than 0, use <code>dplyr</code> functions to keep only the <code>Chinstrap</code> penguins.</li>
<li>Otherwise, keep only the <code>Gentoo</code> penguins.</li>
<li>Re-run the code 10 times and look at output.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb14-5">penguins </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;      &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007
 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007
 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007
 4 Adelie  Torgersen           NA            NA           NA      NA &lt;NA&gt;   2007
 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007
 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007
 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007
 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007
 9 Adelie  Torgersen           34.1          18.1        193    3475 &lt;NA&gt;   2007
10 Adelie  Torgersen           42            20.2        190    4250 &lt;NA&gt;   2007
# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,
#   ²​body_mass_g</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="for-loops" class="level2">
<h2 class="anchored" data-anchor-id="for-loops"><code>for</code> Loops</h2>
<p><strong>For loops</strong> are pretty much the only looping construct that you will need in R. While you may occasionally find a need for other types of loops, in my experience doing data analysis, I’ve found very few situations where a for loop was not sufficient.</p>
<p>In R, for loops take an iterator variable and assign it successive values from a sequence or vector.</p>
<p>For loops are most commonly used for <strong>iterating over the elements of an object</strong> (list, vector, etc.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb16-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(i)</span>
<span id="cb16-3">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10</code></pre>
</div>
</div>
<p>This <strong>loop takes the <code>i</code> variable</strong> and in <strong>each iteration of the loop</strong> gives it values 1, 2, 3, …, 10, then <strong>executes the code</strong> within the curly braces, and then the loop exits.</p>
<p>The following three loops all have the same behavior.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## define the loop to iterate over</span></span>
<span id="cb18-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>)</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## create for loop</span></span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb18-6">        <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Print out each element of 'x'</span></span>
<span id="cb18-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x[i])  </span>
<span id="cb18-8">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a"
[1] "b"
[1] "c"
[1] "d"</code></pre>
</div>
</div>
<p>We can also print just the iteration value (<code>i</code>) itself</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## define the loop to iterate over</span></span>
<span id="cb20-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>)</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## create for loop</span></span>
<span id="cb20-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb20-6">        <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Print out just 'i'</span></span>
<span id="cb20-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(i)</span>
<span id="cb20-8">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 2
[1] 3
[1] 4</code></pre>
</div>
</div>
<section id="seq_along" class="level3">
<h3 class="anchored" data-anchor-id="seq_along"><code>seq_along()</code></h3>
<p>The <code>seq_along()</code> function is <strong>commonly used in conjunction with <code>for</code> loops</strong> in order to generate an integer sequence based on the length of an object (or <code>ncol()</code> of an R object) (in this case, the object <code>x</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a" "b" "c" "d"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4</code></pre>
</div>
</div>
<p>The <code>seq_along()</code> function takes in a vector and then <strong>returns a sequence of integers</strong> that is the same length as the input vector. It doesn’t matter what class the vector is.</p>
<p>Let’s put <code>seq_along()</code> and <code>for</code> loops together.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Generate a sequence based on length of 'x'</span></span>
<span id="cb26-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(x)) {   </span>
<span id="cb26-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x[i])</span>
<span id="cb26-4">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a"
[1] "b"
[1] "c"
[1] "d"</code></pre>
</div>
</div>
<p>It is not necessary to use an index-type variable (i.e.&nbsp;<code>i</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(babyshark <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x) {</span>
<span id="cb28-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(babyshark)</span>
<span id="cb28-3">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a"
[1] "b"
[1] "c"
[1] "d"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(candyisgreat <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x) {</span>
<span id="cb30-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(candyisgreat)</span>
<span id="cb30-3">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a"
[1] "b"
[1] "c"
[1] "d"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(RememberToVote <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x) {</span>
<span id="cb32-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(RememberToVote)</span>
<span id="cb32-3">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a"
[1] "b"
[1] "c"
[1] "d"</code></pre>
</div>
</div>
<p>You can use any character index you want (but not with symbols or numbers).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1999</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x) {</span>
<span id="cb34-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1999</span>)</span>
<span id="cb34-3">}</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: &lt;text&gt;:1:5: unexpected numeric constant
1: for(1999
        ^</code></pre>
</div>
</div>
<p>For one line loops, the curly braces are not strictly necessary.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x[i])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a"
[1] "b"
[1] "c"
[1] "d"</code></pre>
</div>
</div>
<p>However, I like to use curly braces even for one-line loops, because that way if you decide to expand the loop to multiple lines, you won’t be burned because you forgot to add curly braces (and you <strong>will</strong> be burned by this).</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s use the <code>palmerpenguins</code> dataset. Here are the tasks:</p>
<ol type="1">
<li>Start a <code>for</code> loop</li>
<li>Iterate over the columns of <code>penguins</code></li>
<li>For each column, extract the values of that column (<strong>Hint</strong>: check out the <code>pull()</code> function in <code>dplyr</code>).</li>
<li>Using a <code>if</code>-<code>else</code> statement, test whether or not the values in the column are numeric or not (<strong>Hint</strong>: remember the <code>is.numeric()</code> function to test if a value is numeric).</li>
<li>If they are numeric, compute the column mean. Otherwise, report a <code>NA</code>.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="nested-for-loops" class="level3">
<h3 class="anchored" data-anchor-id="nested-for-loops">Nested <code>for</code> loops</h3>
<p><code>for</code> loops can be <strong>nested</strong> inside of each other.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb39-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(x))) {</span>
<span id="cb41-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(x))) {</span>
<span id="cb41-3">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x[i, j])</span>
<span id="cb41-4">        }   </span>
<span id="cb41-5">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 3
[1] 5
[1] 2
[1] 4
[1] 6</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>j</code> index goes across the columns. That’s why we values 1, 3, etc.</p>
</div>
</div>
<p>Nested loops are commonly needed for <strong>multidimensional or hierarchical data structures</strong> (e.g.&nbsp;matrices, lists). Be careful with nesting though.</p>
<p>Nesting beyond 2 to 3 levels often makes it <strong>difficult to read/understand the code</strong>.</p>
<p>If you find yourself in need of a large number of nested loops, you may want to <strong>break up the loops by using functions</strong> (discussed later).</p>
</section>
</section>
<section id="while-loops" class="level2">
<h2 class="anchored" data-anchor-id="while-loops"><code>while</code> Loops</h2>
<p><strong><code>while</code> loops</strong> begin by <strong>testing a condition</strong>.</p>
<p>If it is true, then they execute the loop body.</p>
<p>Once the loop body is executed, the condition is tested again, and so forth, until the condition is false, after which the loop exits.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb43-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb43-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(count)</span>
<span id="cb43-4">        count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb43-5">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9</code></pre>
</div>
</div>
<p><code>while</code> loops can potentially result in infinite loops if not written properly. <strong>Use with care!</strong></p>
<p>Sometimes there will be more than one condition in the test.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb45-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb45-3"></span>
<span id="cb45-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span>(z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb45-5">        coin <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb45-6">        </span>
<span id="cb45-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(coin <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## random walk</span></span>
<span id="cb45-8">                z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb45-9">        } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb45-10">                z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb45-11">        } </span>
<span id="cb45-12">}</span>
<span id="cb45-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>What’s the difference between using one <code>&amp;</code> or two <code>&amp;&amp;</code> ?</p>
<p>If you use only one <code>&amp;</code>, these are vectorized operations, meaning they can <strong>return a vector</strong>, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -2 -1  0  1  2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">((<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> ((<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE  TRUE FALSE FALSE</code></pre>
</div>
</div>
<p>If you use two <code>&amp;&amp;</code> (as above), then these <strong>conditions are evaluated left to right</strong>. For example, in the above code, if <code>z</code> were less than 3, the second test would not have been evaluated.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="repeat-loops" class="level2">
<h2 class="anchored" data-anchor-id="repeat-loops"><code>repeat</code> Loops</h2>
<p><strong><code>repeat</code> initiates an infinite loop</strong> right from the start. These are <strong>not commonly used</strong> in statistical or data analysis applications, but they do have their uses.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
IMPORTANT (READ THIS AND DON’T FORGET… I’M SERIOUS… YOU WANT TO REMEMBER THIS.. FOR REALZ PLZ REMEMBER THIS)
</div>
</div>
<div class="callout-body-container callout-body">
<p>The only way to exit a <code>repeat</code> loop is to call <code>break</code>.</p>
</div>
</div>
<p>One possible paradigm might be in an iterative algorithm where you may be searching for a solution and you do not want to stop until you are close enough to the solution.</p>
<p>In this kind of situation, you often don’t know in advance how many iterations it’s going to take to get “close enough” to the solution.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">x0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb55-2">tol <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-8</span></span>
<span id="cb55-3"></span>
<span id="cb55-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">repeat</span> {</span>
<span id="cb55-5">        x1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">computeEstimate</span>()</span>
<span id="cb55-6">        </span>
<span id="cb55-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x0) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> tol) {  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Close enough?</span></span>
<span id="cb55-8">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb55-9">        } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb55-10">                x0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x1</span>
<span id="cb55-11">        } </span>
<span id="cb55-12">}</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The above code will not run if the <code>computeEstimate()</code> function is not defined (I just made it up for the purposes of this demonstration).</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The loop above is a bit <strong>dangerous</strong> because there is no guarantee it will stop.</p>
<p>You could get in a situation where the values of <code>x0</code> and <code>x1</code> oscillate back and forth and never converge.</p>
<p>Better to set a hard limit on the number of iterations by using a <code>for</code> loop and then report whether convergence was achieved or not.</p>
</div>
</div>
</section>
<section id="next-break" class="level2">
<h2 class="anchored" data-anchor-id="next-break"><code>next</code>, <code>break</code></h2>
<p><code>next</code> is used to skip an iteration of a loop.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb56-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) {</span>
<span id="cb56-3">                <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Skip the first 20 iterations</span></span>
<span id="cb56-4">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">next</span>                 </span>
<span id="cb56-5">        }</span>
<span id="cb56-6">        <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Do something here</span></span>
<span id="cb56-7">}</span></code></pre></div>
</div>
<p><code>break</code> is used to exit a loop immediately, regardless of what iteration the loop may be on.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb57-2">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(i)</span>
<span id="cb57-3"></span>
<span id="cb57-4">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) {</span>
<span id="cb57-5">              <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Stop loop after 20 iterations</span></span>
<span id="cb57-6">              <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span>  </span>
<span id="cb57-7">      }     </span>
<span id="cb57-8">}</span></code></pre></div>
</div>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<ul>
<li>Control structures like <code>if</code>, <code>while</code>, and <code>for</code> allow you to control the flow of an R program</li>
<li>Infinite loops should generally be avoided, even if (you believe) they are theoretically correct.</li>
<li>Control structures mentioned here are primarily useful for writing programs; for command-line interactive work, the “apply” functions are more useful.</li>
</ul>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Write for loops to compute the mean of every column in <code>mtcars</code>.</p></li>
<li><p>Imagine you have a directory full of CSV files that you want to read in. You have their paths in a vector, <code>files &lt;- dir("data/", pattern = "\\.csv$", full.names = TRUE)</code>, and now want to read each one with <code>read_csv()</code>. Write the for loop that will load them into a single data frame.</p></li>
<li><p>What happens if you use <code>for (nm in names(x))</code> and <code>x</code> has no names? What if only some of the elements are named? What if the names are not unique?</p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-control-structures" class="uri">https://rdpeng.github.io/Biostat776/lecture-control-structures</a></li>
<li><a href="https://rafalab.github.io/dsbook/programming-basics" class="uri">https://rafalab.github.io/dsbook/programming-basics</a></li>
<li><a href="https://r4ds.had.co.nz/iteration" class="uri">https://r4ds.had.co.nz/iteration</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 4</category>
  <category>week 4</category>
  <category>R</category>
  <category>programming</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-22-control-structures/index.html</guid>
  <pubDate>Thu, 22 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>R Nuts and Bolts</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-20-r-nuts-and-bolts/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://rafalab.github.io/dsbook/r-basics" class="uri">https://rafalab.github.io/dsbook/r-basics</a></li>
<li><a href="https://r4ds.had.co.nz/vectors.html?q=typeof#vectors" class="uri">https://r4ds.had.co.nz/vectors.html?q=typeof#vectors</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-r-nuts-and-bolts" class="uri">https://rdpeng.github.io/Biostat776/lecture-r-nuts-and-bolts</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Know the 5 basic built-in data types (or classes) of objects in R</li>
<li>Know the types of attributes (or metadata) R objects can have</li>
<li>Be able to create a vector, matrix, data frame, factor, and list in R</li>
<li>Recognize missing values in R</li>
</ul>
</div>
</div>
</section>
<section id="r-nuts-and-bolts" class="level1">
<h1>R Nuts and Bolts</h1>
<section id="entering-input" class="level2">
<h2 class="anchored" data-anchor-id="entering-input">Entering Input</h2>
<p>At the R prompt we type expressions. The <code>&lt;-</code> symbol is the assignment operator.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">msg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span></span></code></pre></div>
</div>
<p>The grammar of the language determines <strong>whether an expression is complete or not</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Incomplete expression</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: &lt;text&gt;:2:0: unexpected end of input
1: x &lt;-  ## Incomplete expression
   ^</code></pre>
</div>
</div>
<p>The <code>#</code> character indicates a <strong>comment</strong>.</p>
<p>Anything to the right of the <code>#</code> (including the <code>#</code> itself) is ignored. <strong>This is the only comment character in R</strong>.</p>
<p>Unlike some other languages, R does not support multi-line comments or comment blocks.</p>
</section>
<section id="evaluation" class="level2">
<h2 class="anchored" data-anchor-id="evaluation">Evaluation</h2>
<p>When a complete expression is entered at the prompt, <strong>it is evaluated and the result of the evaluated expression is returned</strong>.</p>
<p>The result may be <strong>auto-printed</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## nothing printed</span></span>
<span id="cb8-2">x       <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## auto-printing occurs</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x)  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## explicit printing</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
</div>
<p>The <code>[1]</code> shown in the output indicates that <code>x</code> is a vector and <code>5</code> is its first element.</p>
<p>Typically with <strong>interactive work</strong>, we <strong>do not explicitly print objects</strong> with the <code>print()</code> function; it is much easier to just auto-print them by typing the name of the object and hitting return/enter.</p>
<p>However, when <strong>writing scripts, functions, or longer programs</strong>, there is sometimes a <strong>need to explicitly print objects</strong> because auto-printing does not work in those settings.</p>
<p>When an R vector is printed you will notice that an index for the vector is printed in square brackets <code>[]</code> on the side. For example, see this integer sequence of length 20.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb12-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 11 12 13 14 15 16 17 18 19 20 21 22
[13] 23 24 25 26 27 28 29 30</code></pre>
</div>
</div>
<p>The numbers in the square brackets are not part of the vector itself, they are merely part of the <strong>printed output</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>With R, it’s important that one understand that <strong>there is a difference between the actual R object and the manner in which that R object is printed to the console</strong>.</p>
<p>Often, the printed output may have additional bells and whistles to make the output more friendly to the users. However, these bells and whistles are not inherently part of the object.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>:</code> operator is used to create integer sequences.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5 4 3 2 1 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] -15 -14 -13 -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1   2   3
[20]   4   5   6   7   8   9  10  11  12  13  14  15</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="r-objects" class="level2">
<h2 class="anchored" data-anchor-id="r-objects">R Objects</h2>
<p>The most basic type of R object is a <strong>vector</strong>.</p>
<section id="vectors" class="level3">
<h3 class="anchored" data-anchor-id="vectors">Vectors</h3>
<p>There is really only one rule about vectors in R, which is that</p>
<blockquote class="blockquote">
<p><strong>A vector can only contain objects of the same class</strong></p>
</blockquote>
<p>To understand what we mean here, we need to dig a little deeper. We will come back this in just a minute.</p>
<section id="types-of-vectors" class="level4">
<h4 class="anchored" data-anchor-id="types-of-vectors">Types of vectors</h4>
<p>There are <a href="https://r4ds.had.co.nz/vectors.html?q=typeof#vector-basics">two types of <strong>vectors</strong></a> in R:</p>
<ol type="1">
<li><p><strong>Atomic vectors</strong>:</p>
<ul>
<li><strong>logical</strong>: <code>FALSE</code>, <code>TRUE</code>, and <code>NA</code></li>
<li><strong>integer</strong> (and <strong>doubles</strong>): these are known collectively as <strong>numeric</strong> vectors (or real numbers)</li>
<li><strong>complex</strong>: complex numbers</li>
<li><strong>character</strong>: the most complex type of atomic vector, because each element of a character vector is a string, and a string can contain an arbitrary amount of data</li>
<li><strong>raw</strong>: used to store fixed-length sequences of bytes. These are not commonly used directly in data analysis and I won’t cover them here.</li>
</ul></li>
<li><p><strong>Lists</strong>, which are sometimes called <strong>recursive vectors</strong> because lists can contain other lists.</p></li>
</ol>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-20-r-nuts-and-bolts/https:/d33wubrfki0l68.cloudfront.net/1d1b4e1cf0dc5f6e80f621b0225354b0addb9578/6ee1c/diagrams/data-structures-overview.png" class="preview-image img-fluid"></p>
<p>[<strong>Source</strong>: <a href="https://r4ds.had.co.nz/vectors.html?q=typeof#vector-basics">R 4 Data Science</a>]</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>There’s one other related object: NULL.</p>
<ul>
<li>NULL is often used to represent the absence of a vector (as opposed to <code>NA</code> which is used to represent the absence of a value in a vector).</li>
<li>NULL typically behaves like a vector of length 0.</li>
</ul>
</div>
</div>
</section>
<section id="create-an-empty-vector" class="level4">
<h4 class="anchored" data-anchor-id="create-an-empty-vector">Create an empty vector</h4>
<p>Empty vectors can be created with the <code>vector()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0 0 0 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE FALSE FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "" "" "" ""</code></pre>
</div>
</div>
</section>
<section id="creating-a-non-empty-vector" class="level4">
<h4 class="anchored" data-anchor-id="creating-a-non-empty-vector">Creating a non-empty vector</h4>
<p>The <code>c()</code> function can be used to <strong>create vectors of objects</strong> by <strong>concatenating</strong> things together.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)       <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## numeric</span></span>
<span id="cb24-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## logical</span></span>
<span id="cb24-3">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(T, F)           <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## logical</span></span>
<span id="cb24-4">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>)  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## character</span></span>
<span id="cb24-5">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>              <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## integer</span></span>
<span id="cb24-6">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>0i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>4i)     <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## complex</span></span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the above example, <code>T</code> and <code>F</code> are short-hand ways to specify <code>TRUE</code> and <code>FALSE</code>.</p>
<p>However, in general, one should try to use the explicit <code>TRUE</code> and <code>FALSE</code> values when indicating logical values.</p>
<p>The <code>T</code> and <code>F</code> values are primarily there for when you’re feeling lazy.</p>
</div>
</div>
</section>
<section id="lists" class="level4">
<h4 class="anchored" data-anchor-id="lists">Lists</h4>
<p>So, I know I said there is one rule about vectors:</p>
<blockquote class="blockquote">
<p><strong>A vector can only contain objects of the same class</strong></p>
</blockquote>
<p>But of course, like any good rule, there is an exception, which is a <strong>list</strong> (which we will get to in greater details a bit later).</p>
<p>For now, just know a <strong>list</strong> is <strong>represented as a vector</strong> but can <strong>contain objects of different classes</strong>. Indeed, that’s usually why we use them.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The main difference between <strong>atomic vectors</strong> and <strong>lists</strong> is that atomic vectors are <strong>homogeneous</strong>, while lists can be <strong>heterogeneous</strong>.</p>
</div>
</div>
</section>
</section>
<section id="numerics" class="level3">
<h3 class="anchored" data-anchor-id="numerics">Numerics</h3>
<p><strong>Integer</strong> and <strong>double</strong> vectors are known collectively as <strong>numeric vectors</strong>.</p>
<p>In R, numbers are doubles by default.</p>
<p>To make an integer, place an <code>L</code> after the number:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "double"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(4L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "integer"</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The distinction between integers and doubles is not usually important, but there are two important differences that you should be aware of:</p>
<ul>
<li><strong>Doubles</strong> are approximations!</li>
<li><strong>Doubles</strong> represent floating point numbers that can not always be precisely represented with a fixed amount of memory. This means that you should consider all doubles to be approximations.</li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s explore this. What is square of the square root of two? i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?(%5Csqrt%7B2%7D)%5E2"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb29-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<p>Try subtracting 2 from <code>x</code>? What happened?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## try it here</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="numbers" class="level3">
<h3 class="anchored" data-anchor-id="numbers">Numbers</h3>
<p>Numbers in R are generally treated as <strong>numeric objects</strong> (i.e.&nbsp;double precision real numbers).</p>
<p>This means that even if you see a number like “1” or “2” in R, which you might think of as integers, they are likely represented behind the scenes as numeric objects (so something like “1.00” or “2.00”).</p>
<p>This isn’t important most of the time…except when it is!</p>
<p>If you <strong>explicitly want an integer</strong>, you need to specify the <code>L</code> suffix. So entering <code>1</code> in R gives you a numeric object; entering <code>1L</code> explicitly gives you an integer object.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>There is also a <strong>special number <code>Inf</code> which represents infinity</strong>. This allows us to represent entities like <code>1 / 0</code>. This way, <code>Inf</code> can be used in ordinary calculations; e.g.&nbsp;<code>1 / Inf</code> is 0.</p>
<p>The value <strong><code>NaN</code> represents an undefined value</strong> (“not a number”); e.g.&nbsp;0 / 0; <code>NaN</code> can also be thought of as a missing value (more on that later)</p>
</div>
</div>
</section>
<section id="attributes" class="level3">
<h3 class="anchored" data-anchor-id="attributes">Attributes</h3>
<p>R objects can have <strong>attributes</strong>, which are like <strong>metadata for the object</strong>.</p>
<p>These metadata can be very useful in that they <strong>help to describe the object</strong>.</p>
<p>For example, <strong>column names</strong> on a data frame help to tell us what data are contained in each of the columns. Some examples of R object attributes are</p>
<ul>
<li>names, dimnames</li>
<li>dimensions (e.g.&nbsp;matrices, arrays)</li>
<li>class (e.g.&nbsp;integer, numeric)</li>
<li>length</li>
<li>other user-defined attributes/metadata</li>
</ul>
<p>Attributes of an object (if any) can be accessed using the <code>attributes()</code> function. Not all R objects contain attributes, in which case the <code>attributes()</code> function returns <code>NULL</code>.</p>
<p>However, every <strong>vector</strong> has two key properties:</p>
<ol type="1">
<li>Its <strong>type</strong>, which you can determine with <code>typeof()</code>.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">letters</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s"
[20] "t" "u" "v" "w" "x" "y" "z"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(letters)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  1  2  3  4  5  6  7  8  9 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "integer"</code></pre>
</div>
</div>
<ol start="2" type="1">
<li>Its <strong>length</strong>, which you can determine with <code>length()</code>.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb40-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "a"

[[2]]
[1] "b"

[[3]]
 [1]  1  2  3  4  5  6  7  8  9 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "list"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
</div>
</section>
</section>
<section id="mixing-objects" class="level2">
<h2 class="anchored" data-anchor-id="mixing-objects">Mixing Objects</h2>
<p>There are occasions when <strong>different classes of R objects get mixed together</strong>.</p>
<p>Sometimes this happens by accident but it can also happen on purpose.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s use <code>typeof()</code> to ask what happens when we mix different classes of R objects together.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span>
<span id="cb48-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb48-3">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## try it here</span></span></code></pre></div>
</div>
</div>
</div>
<p>Why is this happening?</p>
<p>In each case above, we are <strong>mixing objects of two different classes</strong> in a vector.</p>
<p>But remember that the only rule about vectors says this is not allowed?</p>
<p>When different objects are mixed in a vector, <strong>coercion</strong> occurs so that <strong>every element in the vector is of the same class</strong>.</p>
<p>In the example above, we see the effect of <strong>implicit coercion</strong>.</p>
<p>What R tries to do is find a way to represent all of the objects in the vector in a reasonable fashion. Sometimes this does exactly what you want and…sometimes not.</p>
<p>For example, combining a numeric object with a character object will create a character vector, because numbers can usually be easily represented as strings.</p>
</section>
<section id="explicit-coercion" class="level2">
<h2 class="anchored" data-anchor-id="explicit-coercion">Explicit Coercion</h2>
<p>Objects can be explicitly coerced from one class to another using the <code>as.*()</code> functions, if available.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb50-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "integer"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0 1 2 3 4 5 6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.logical</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0" "1" "2" "3" "4" "5" "6"</code></pre>
</div>
</div>
<p>Sometimes, <strong>R can’t figure out how to coerce an object</strong> and this can result in <code>NA</code>s being produced.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>)</span>
<span id="cb58-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: NAs introduced by coercion</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA NA NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.logical</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA NA NA</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s try to convert the <code>x</code> vector above to integers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## try it here </span></span></code></pre></div>
</div>
</div>
</div>
<p>When nonsensical coercion takes place, you will usually get a warning from R.</p>
</section>
<section id="matrices" class="level2">
<h2 class="anchored" data-anchor-id="matrices">Matrices</h2>
<p><strong>Matrices</strong> are <strong>vectors with a dimension attribute</strong>.</p>
<ul>
<li>The <strong>dimension attribute</strong> is <strong>itself an integer vector</strong> of length 2 (number of rows, number of columns)</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) </span>
<span id="cb64-2">m</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]   NA   NA   NA
[2,]   NA   NA   NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(m)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(m)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$dim
[1] 2 3</code></pre>
</div>
</div>
<p>Matrices are <strong>constructed column-wise</strong>, so entries can be thought of starting in the “upper left” corner and running down the columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) </span>
<span id="cb70-2">m</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s try to use <code>attributes()</code> function to look at the attributes of the <code>m</code> object</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## try it here </span></span></code></pre></div>
</div>
</div>
</div>
<p>Matrices can also be created directly from vectors by adding a dimension attribute.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> </span>
<span id="cb73-2">m</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  1  2  3  4  5  6  7  8  9 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(m) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb75-2">m</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,]    1    3    5    7    9
[2,]    2    4    6    8   10</code></pre>
</div>
</div>
<p>Matrices can be created by <strong>column-binding</strong> or <strong>row-binding</strong> with the <code>cbind()</code> and <code>rbind()</code> functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb77-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb77-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(x, y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     x  y
[1,] 1 10
[2,] 2 11
[3,] 3 12</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s try to use <code>rbind()</code> to row bind <code>x</code> and <code>y</code> above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## try it here </span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="lists-1" class="level2">
<h2 class="anchored" data-anchor-id="lists-1">Lists</h2>
<p>Lists are a special type of <strong>vector</strong> that <strong>can contain elements of different classes</strong>. Lists are a very important data type in R and you should get to know them well.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Lists, in combination with the various “apply” functions discussed later, make for a powerful combination.</p>
</div>
</div>
<p>Lists can be explicitly created using the <code>list()</code> function, which takes an arbitrary number of arguments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> 4i) </span>
<span id="cb80-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1

[[2]]
[1] "a"

[[3]]
[1] TRUE

[[4]]
[1] 1+4i</code></pre>
</div>
</div>
<p>We can also create an empty list of a prespecified length with the <code>vector()</code> function</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb82-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

[[5]]
NULL</code></pre>
</div>
</div>
</section>
<section id="factors" class="level2">
<h2 class="anchored" data-anchor-id="factors">Factors</h2>
<p><strong>Factors</strong> are used to represent <strong>categorical data</strong> and can be unordered or ordered. One can think of a factor as an integer vector where each integer has a <strong>label</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Factors are important in statistical modeling and are treated specially by modelling functions like <code>lm()</code> and <code>glm()</code>.</p>
</div>
</div>
<p>Using factors with labels is <strong>better</strong> than using integers because factors are self-describing.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro-tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Having a variable that has values “Yes” and “No” or “Smoker” and “Non-Smoker” is better than a variable that has values 1 and 2.</p>
</div>
</div>
<p>Factor objects can be created with the <code>factor()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>)) </span>
<span id="cb84-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] yes yes no  yes no 
Levels: no yes</code></pre>
</div>
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(x) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>x
 no yes 
  2   3 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## See the underlying representation of factor</span></span>
<span id="cb88-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(x)  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2 2 1 2 1
attr(,"levels")
[1] "no"  "yes"</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s try to use <code>attributes()</code> function to look at the attributes of the <code>x</code> object</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## try it here </span></span></code></pre></div>
</div>
</div>
</div>
<p>Often factors will be automatically created for you when you read in a dataset using a function like <code>read.table()</code>.</p>
<ul>
<li>Those functions often <strong>default to creating factors when they encounter data that look like characters or strings</strong>.</li>
</ul>
<p>The order of the levels of a factor can be set using the <code>levels</code> argument to <code>factor()</code>. This can be important in linear modeling because the first level is used as the baseline level.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>))</span>
<span id="cb91-2">x  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Levels are put in alphabetical order</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] yes yes no  yes no 
Levels: no yes</code></pre>
</div>
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>),</span>
<span id="cb93-2">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>))</span>
<span id="cb93-3">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] yes yes no  yes no 
Levels: yes no</code></pre>
</div>
</div>
</section>
<section id="missing-values" class="level2">
<h2 class="anchored" data-anchor-id="missing-values">Missing Values</h2>
<p><strong>Missing values</strong> are denoted by <code>NA</code> or <code>NaN</code> for undefined mathematical operations.</p>
<ul>
<li><p><code>is.na()</code> is used to test objects if they are <code>NA</code></p></li>
<li><p><code>is.nan()</code> is used to test for <code>NaN</code></p></li>
<li><p><code>NA</code> values have a class also, so there are integer <code>NA</code>, character <code>NA</code>, etc.</p></li>
<li><p>A <code>NaN</code> value is also <code>NA</code> but the converse is not true</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb95-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Create a vector with NAs in it</span></span>
<span id="cb95-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  </span>
<span id="cb95-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Return a logical vector indicating which elements are NA</span></span>
<span id="cb95-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE  TRUE FALSE FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Return a logical vector indicating which elements are NaN</span></span>
<span id="cb97-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.nan</span>(x)   </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE FALSE FALSE FALSE</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb99-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Now create a vector with both NA and NaN values</span></span>
<span id="cb99-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NaN</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb99-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE  TRUE  TRUE FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb101-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.nan</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE  TRUE FALSE FALSE</code></pre>
</div>
</div>
</section>
<section id="data-frames" class="level2">
<h2 class="anchored" data-anchor-id="data-frames">Data Frames</h2>
<p><strong>Data frames</strong> are used to store <strong>tabular data</strong> in R. They are an important type of object in R and are used in a variety of statistical modeling applications. Hadley Wickham’s package <a href="https://github.com/hadley/dplyr">dplyr</a> has an optimized set of functions designed to work efficiently with data frames.</p>
<p>Data frames are <strong>represented as a special type of list</strong> where <strong>every element of the list has to have the same length</strong>.</p>
<ul>
<li>Each element of the list can be thought of as a column</li>
<li>The length of each element of the list is the number of rows</li>
</ul>
<p>Unlike matrices, <strong>data frames can store different classes of objects in each column</strong>. Matrices must have every element be the same class (e.g.&nbsp;all integers or all numeric).</p>
<p>In addition to column names, indicating the names of the variables or predictors, data frames have a special attribute called <code>row.names</code> which indicate information about each row of the data frame.</p>
<p>Data frames are usually created by reading in a dataset using the <code>read.table()</code> or <code>read.csv()</code>. However, data frames can also be created explicitly with the <code>data.frame()</code> function or they can be coerced from other types of objects like lists.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb103-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">foo =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(T, T, F, F)) </span>
<span id="cb103-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  foo   bar
1   1  TRUE
2   2  TRUE
3   3 FALSE
4   4 FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb105-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb107-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb109-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$names
[1] "foo" "bar"

$class
[1] "data.frame"

$row.names
[1] 1 2 3 4</code></pre>
</div>
</div>
<p>Data frames can be converted to a matrix by calling <code>data.matrix()</code>. While it might seem that the <code>as.matrix()</code> function should be used to coerce a data frame to a matrix, almost always, what you want is the result of <code>data.matrix()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb111-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.matrix</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     foo bar
[1,]   1   1
[2,]   2   1
[3,]   3   0
[4,]   4   0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb113-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.matrix</span>(x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$dim
[1] 4 2

$dimnames
$dimnames[[1]]
NULL

$dimnames[[2]]
[1] "foo" "bar"</code></pre>
</div>
</div>
<section id="example" class="level3">
<h3 class="anchored" data-anchor-id="example">Example</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s use the <code>palmerpenguins</code> dataset.</p>
<ol type="1">
<li>What attributes does <code>penguins</code> have?</li>
<li>What class is the <code>penguins</code> R object?</li>
<li>What are the levels in the <code>species</code> column in the <code>penguins</code> dataset?</li>
<li>Create a logical vector for all the penguins measured from 2008.</li>
<li>Create a matrix with just the columns <code>bill_length_mm</code>, <code>bill_depth_mm</code>, <code>flipper_length_mm</code>, and <code>body_mass_g</code></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb115-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span>
<span id="cb115-2"></span>
<span id="cb115-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb115-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb115-5">penguins </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;      &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007
 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007
 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007
 4 Adelie  Torgersen           NA            NA           NA      NA &lt;NA&gt;   2007
 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007
 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007
 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007
 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007
 9 Adelie  Torgersen           34.1          18.1        193    3475 &lt;NA&gt;   2007
10 Adelie  Torgersen           42            20.2        190    4250 &lt;NA&gt;   2007
# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,
#   ²​body_mass_g</code></pre>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="names" class="level2">
<h2 class="anchored" data-anchor-id="names">Names</h2>
<p>R objects can have <strong>names</strong>, which is very useful for writing readable code and self-describing objects.</p>
<p>Here is an example of assigning names to an integer vector.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb117-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb117-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb119-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New York"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Seattle"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Los Angeles"</span>) </span>
<span id="cb119-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   New York     Seattle Los Angeles 
          1           2           3 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb121-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "New York"    "Seattle"     "Los Angeles"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb123-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$names
[1] "New York"    "Seattle"     "Los Angeles"</code></pre>
</div>
</div>
<p><strong>Lists can also have names</strong>, which is often very useful.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb125-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Los Angeles"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Boston =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">London =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) </span>
<span id="cb125-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$`Los Angeles`
[1] 1

$Boston
[1] 2

$London
[1] 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb127-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Los Angeles" "Boston"      "London"     </code></pre>
</div>
</div>
<p><strong>Matrices can have both column and row names</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb129-1">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb129-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dimnames</span>(m) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>)) </span>
<span id="cb129-3">m</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  c d
a 1 3
b 2 4</code></pre>
</div>
</div>
<p>Column names and row names can be set separately using the <code>colnames()</code> and <code>rownames()</code> functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb131-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(m) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>)</span>
<span id="cb131-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(m) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>)</span>
<span id="cb131-3">m</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  h f
x 1 3
z 2 4</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>For data frames, there is a separate function for setting the row names, the <code>row.names()</code> function.</p>
<p>Also, data frames do not have column names, they just have names (like lists).</p>
<p>So to set the column names of a data frame just use the <code>names()</code> function. Yes, I know its confusing.</p>
<p>Here’s a quick summary:</p>
<table class="table">
<thead>
<tr class="header">
<th>Object</th>
<th>Set column names</th>
<th>Set row names</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>data frame</td>
<td><code>names()</code></td>
<td><code>row.names()</code></td>
</tr>
<tr class="even">
<td>matrix</td>
<td><code>colnames()</code></td>
<td><code>rownames()</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>There are a variety of different builtin-data types in R. In this chapter we have reviewed the following</p>
<ul>
<li>atomic classes: numeric, logical, character, integer, complex</li>
<li>vectors, lists</li>
<li>factors</li>
<li>missing values</li>
<li>data frames and matrices</li>
</ul>
<p>All R objects can have attributes that help to describe what is in the object. Perhaps the most useful attribute is names, such as column and row names in a data frame, or simply names in a vector or list. Attributes like dimensions are also important as they can modify the behavior of objects, like turning a vector into a matrix.</p>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Describe the difference between is.finite(x) and !is.infinite(x).</p></li>
<li><p>A logical vector can take 3 possible values. How many possible values can an integer vector take? How many possible values can a double take? Use google to do some research.</p></li>
<li><p>What functions from the readr package allow you to turn a string into logical, integer, and double vector?</p></li>
<li><p>Try and make a tibble that has columns with different lengths. What happens?</p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-r-nuts-and-bolts" class="uri">https://rdpeng.github.io/Biostat776/lecture-r-nuts-and-bolts</a></li>
<li><a href="https://rafalab.github.io/dsbook/r-basics" class="uri">https://rafalab.github.io/dsbook/r-basics</a></li>
<li><a href="https://r4ds.had.co.nz/vectors.html?q=typeof#vectors" class="uri">https://r4ds.had.co.nz/vectors.html?q=typeof#vectors</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 4</category>
  <category>week 4</category>
  <category>R</category>
  <category>programming</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-20-r-nuts-and-bolts/index.html</guid>
  <pubDate>Tue, 20 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>The ggplot2 plotting system: ggplot()</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://r4ds.had.co.nz/data-visualisation" class="uri">https://r4ds.had.co.nz/data-visualisation</a></li>
<li><a href="http://vita.had.co.nz/papers/layered-grammar.pdf" class="uri">http://vita.had.co.nz/papers/layered-grammar.pdf</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-the-ggplot2-plotting-system-part-2" class="uri">https://rdpeng.github.io/Biostat776/lecture-the-ggplot2-plotting-system-part-2</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to build up layers of graphics using <code>ggplot()</code></li>
<li>Be able to modify properties of a <code>ggplot()</code> including layers and labels</li>
</ul>
</div>
</div>
</section>
<section id="the-ggplot2-plotting-system" class="level1">
<h1>The ggplot2 Plotting System</h1>
<p>In this lesson, we will get into a little more of the nitty gritty of <strong>how <code>ggplot2</code> builds plots</strong> and how you can customize various aspects of any plot.</p>
<p>Previously, we used the <code>qplot()</code> function to quickly put points on a page.</p>
<ul>
<li>The <code>qplot()</code> function’s syntax is very similar to that of the <code>plot()</code> function in base graphics so for those switching over, it makes for an easy transition.</li>
</ul>
<p>But it is worth knowing the underlying details of how <code>ggplot2</code> works so that you can really exploit its power.</p>
<section id="basic-components-of-a-ggplot2-plot" class="level2">
<h2 class="anchored" data-anchor-id="basic-components-of-a-ggplot2-plot">Basic components of a ggplot2 plot</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Key components
</div>
</div>
<div class="callout-body-container callout-body">
<p>A <strong><code>ggplot2</code> plot</strong> consists of a number of <strong>key components</strong>.</p>
<ul>
<li><p>A <strong>data frame</strong>: stores all of the data that will be displayed on the plot</p></li>
<li><p><strong>aesthetic mappings</strong>: describe how data are mapped to color, size, shape, location</p></li>
<li><p><strong>geoms</strong>: geometric objects like points, lines, shapes</p></li>
<li><p><strong>facets</strong>: describes how conditional/panel plots should be constructed</p></li>
<li><p><strong>stats</strong>: statistical transformations like binning, quantiles, smoothing</p></li>
<li><p><strong>scales</strong>: what scale an aesthetic map uses (example: left-handed = red, right-handed = blue)</p></li>
<li><p><strong>coordinate system</strong>: describes the system in which the locations of the geoms will be drawn</p></li>
</ul>
</div>
</div>
<p>It is <strong>essential to organize your data into a data frame</strong> before you start with <code>ggplot2</code> (and all the <strong>appropriate metadata</strong> so that your data frame is self-describing and your plots will be self-documenting).</p>
<p>When <strong>building plots in <code>ggplot2</code></strong> (rather than using <code>qplot()</code>), the <strong>“artist’s palette” model may be the closest analogy</strong>.</p>
<p>Essentially, you start with some raw data, and then you <strong>gradually add bits and pieces to it to create a plot</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Plots are built up in layers, with the typically ordering being</p>
<ol type="1">
<li>Plot the data</li>
<li>Overlay a summary</li>
<li>Add metadata and annotation</li>
</ol>
</div>
</div>
<p>For quick exploratory plots you may not get past step 1.</p>
</section>
<section id="example-bmi-pm2.5-asthma" class="level2">
<h2 class="anchored" data-anchor-id="example-bmi-pm2.5-asthma">Example: BMI, PM2.5, Asthma</h2>
<p>To demonstrate the various pieces of <code>ggplot2</code> we will use a running example from the <strong>Mouse Allergen and Asthma Cohort Study (MAACS)</strong>. Here, the question we are interested in is</p>
<blockquote class="blockquote">
<p>“Are overweight individuals, as measured by body mass index (BMI), more susceptible than normal weight individuals to the harmful effects of PM2.5 on asthma symptoms?”</p>
</blockquote>
<p>There is a suggestion that overweight individuals may be more susceptible to the negative effects of inhaling PM2.5.</p>
<p>This would suggest that increases in PM2.5 exposure in the home of an overweight child would be more deleterious to his/her asthma symptoms than they would be in the home of a normal weight child.</p>
<p>We want to see if we can see that difference in the data from MAACS.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Because the individual-level data for this study are protected by various U.S. privacy laws, we cannot make those data available.</p>
<p>For the purposes of this lesson, we have <strong>simulated data</strong> that share many of the same features of the original data, but do not contain any of the actual measurements or values contained in the original dataset.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>We can look at the data quickly by reading it in as a tibble with <code>read_csv()</code> in the <code>tidyverse</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb1-3">maacs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bmi_pm25_no2_sim.csv"</span>),</span>
<span id="cb1-4">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nnci"</span>)</span>
<span id="cb1-5">maacs</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 517 × 4
   logpm25 logno2_new bmicat        NocturnalSympt
     &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;                  &lt;int&gt;
 1   1.25       1.18  normal weight              1
 2   1.12       1.55  overweight                 0
 3   1.93       1.43  normal weight              0
 4   1.37       1.77  overweight                 2
 5   0.775      0.765 normal weight              0
 6   1.49       1.11  normal weight              0
 7   2.16       1.43  normal weight              0
 8   1.65       1.40  normal weight              0
 9   1.55       1.81  normal weight              0
10   2.04       1.35  overweight                 3
# … with 507 more rows</code></pre>
</div>
</div>
</div>
</div>
<p>The outcome we will look at here (<code>NocturnalSymp</code>) is the number of days in the past 2 weeks where the child experienced asthma symptoms (e.g.&nbsp;coughing, wheezing) while sleeping.</p>
<p>The other key variables are:</p>
<ul>
<li><p><code>logpm25</code>: average level of PM2.5 over the course of 7 days (micrograms per cubic meter) on the log scale</p></li>
<li><p><code>logno2_new</code>: exhaled nitric oxide on the log scale</p></li>
<li><p><code>bmicat</code>: categorical variable with BMI status</p></li>
</ul>
</section>
</section>
<section id="building-up-in-layers" class="level1">
<h1>Building up in layers</h1>
<p>First, we can <strong>create a <code>ggplot</code> object</strong> that stores the dataset and the basic aesthetics for mapping the x- and y-coordinates for the plot.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here, we will eventually be plotting the log of PM2.5 and <code>NocturnalSymp</code> variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(maacs, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> logpm25, </span>
<span id="cb3-2">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> NocturnalSympt))</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(g)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>data: logpm25, logno2_new, bmicat, NocturnalSympt [517x4]
mapping:  x = ~logpm25, y = ~NocturnalSympt
faceting: &lt;ggproto object: Class FacetNull, Facet, gg&gt;
    compute_layout: function
    draw_back: function
    draw_front: function
    draw_labels: function
    draw_panels: function
    finish_data: function
    init_scales: function
    map_data: function
    params: list
    setup_data: function
    setup_params: function
    shrink: TRUE
    train_scales: function
    vars: function
    super:  &lt;ggproto object: Class FacetNull, Facet, gg&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(g)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "gg"     "ggplot"</code></pre>
</div>
</div>
</div>
</div>
<p>You can see above that the object <code>g</code> contains the dataset <code>maacs</code> and the mappings.</p>
<p>Now, normally if you were to <code>print()</code> a <code>ggplot</code> object a plot would appear on the plot device, however, our object <code>g</code> actually does not contain enough information to make a plot yet.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> maacs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(logpm25, NocturnalSympt))</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(g)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Nothing to see here!</figcaption>
</figure>
</div>
</div>
</div>
<section id="first-plot-with-point-layer" class="level2">
<h2 class="anchored" data-anchor-id="first-plot-with-point-layer">First plot with point layer</h2>
<p>To make a scatter plot, we need add at least one <strong>geom</strong>, such as points.</p>
<p>Here, we add the <code>geom_point()</code> function to create a traditional scatter plot.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> maacs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(logpm25, NocturnalSympt))</span>
<span id="cb8-3">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Scatterplot of PM2.5 and days with nocturnal symptoms</figcaption>
</figure>
</div>
</div>
</div>
<p>How does ggplot know what points to plot? In this case, it can grab them from the data frame <code>maacs</code> that served as the input into the <code>ggplot()</code> function.</p>
</section>
<section id="adding-more-layers" class="level2">
<h2 class="anchored" data-anchor-id="adding-more-layers">Adding more layers</h2>
<section id="smooth" class="level3">
<h3 class="anchored" data-anchor-id="smooth">smooth</h3>
<p>Because the data appear rather noisy, it might be better if we added a smoother on top of the points to see if there is a trend in the data with PM2.5.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Scatterplot with smoother</figcaption>
</figure>
</div>
</div>
</div>
<p>The default smoother is a loess smoother, which is flexible and nonparametric but might be too flexible for our purposes. Perhaps we’d prefer a simple linear regression line to highlight any first order trends. We can do this by specifying <code>method = "lm"</code> to <code>geom_smooth()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Scatterplot with linear regression line</figcaption>
</figure>
</div>
</div>
</div>
<p>Here, we can see there appears to be a slight increasing trend, suggesting that higher levels of PM2.5 are associated with increased days with nocturnal symptoms.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s use the <code>ggplot()</code> function with our <code>palmerpenguins</code> dataset example and make a scatter plot with <code>flipper_length_mm</code> on the x-axis, <code>bill_length_mm</code> on the y-axis, colored by <code>species</code>, and a smoother by adding a linear regression.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb11-4">penguins </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;      &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007
 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007
 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007
 4 Adelie  Torgersen           NA            NA           NA      NA &lt;NA&gt;   2007
 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007
 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007
 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007
 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007
 9 Adelie  Torgersen           34.1          18.1        193    3475 &lt;NA&gt;   2007
10 Adelie  Torgersen           42            20.2        190    4250 &lt;NA&gt;   2007
# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,
#   ²​body_mass_g</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="facets" class="level3">
<h3 class="anchored" data-anchor-id="facets">facets</h3>
<p>Because our primary question involves comparing overweight individuals to normal weight individuals, we can <strong>stratify the scatter plot</strong> of PM2.5 and nocturnal symptoms by the BMI category (<code>bmicat</code>) variable, which indicates whether an individual is overweight or now.</p>
<p>To visualize this we can <strong>add a <code>facet_grid()</code></strong>, which takes a formula argument.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>We want one row and two columns, one column for each weight category. So we specify <code>bmicat</code> on the right hand side of the forumla passed to <code>facet_grid()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> bmicat) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="864"></p>
<figcaption class="figure-caption">Scatterplot of PM2.5 and nocturnal symptoms by BMI category</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>Now it seems clear that the relationship between PM2.5 and nocturnal symptoms is relatively flat among normal weight individuals, while the relationship is increasing among overweight individuals.</p>
<p>This plot suggests that overweight individuals may be more susceptible to the effects of PM2.5.</p>
</section>
</section>
</section>
<section id="modifying-geom-properties" class="level1">
<h1>Modifying geom properties</h1>
<p>You can <strong>modify properties of geoms</strong> by specifying options to their respective <code>geom_*()</code> functions.</p>
<section id="map-aesthetics-to-constants" class="level3">
<h3 class="anchored" data-anchor-id="map-aesthetics-to-constants">map aesthetics to constants</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>For example, here we modify the points in the scatterplot to make the color “steelblue”, the size larger, and the alpha transparency greater.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"steelblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Modifying point color with a constant</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="map-aesthetics-to-variables" class="level3">
<h3 class="anchored" data-anchor-id="map-aesthetics-to-variables">map aesthetics to variables</h3>
<p>In addition to setting specific geom attributes to constant values, we can <strong>map aesthetics to variables</strong> in our dataset.</p>
<p>For example, we can map the aesthetic <code>color</code> to the variable <code>bmicat</code>, so the points will be colored according to the levels of <code>bmicat</code>.</p>
<p>We use the <code>aes()</code> function to indicate this difference from the plot above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> bmicat), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Mapping color to a variable</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="customizing-the-smooth" class="level2">
<h2 class="anchored" data-anchor-id="customizing-the-smooth">Customizing the smooth</h2>
<p>We can also <strong>customize aspects of the geoms</strong>.</p>
<p>For example, we can customize the smoother that we overlay on the points with <code>geom_smooth()</code>.</p>
<p>Here we change the line type and increase the size from the default. We also remove the shaded standard error from the line.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> bmicat), </span>
<span id="cb16-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb16-4">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb16-6">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb16-7">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, </span>
<span id="cb16-8">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Customizing a smoother</figcaption>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="other-important-stuff" class="level1">
<h1>Other important stuff</h1>
<section id="changing-the-theme" class="level2">
<h2 class="anchored" data-anchor-id="changing-the-theme">Changing the theme</h2>
<p>The <strong>default theme for <code>ggplot2</code> uses the gray background</strong> with white grid lines.</p>
<p>If you don’t find this suitable, you can use the black and white theme by using the <code>theme_bw()</code> function.</p>
<p>The <code>theme_bw()</code> function also allows you to set the typeface for the plot, in case you don’t want the default Helvetica. Here we change the typeface to Times.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>For things that only make sense globally, use <code>theme()</code>, i.e.&nbsp;<code>theme(legend.position = "none")</code>. Two standard appearance themes are included</p>
<ul>
<li><code>theme_gray()</code>: The default theme (gray background)</li>
<li><code>theme_bw()</code>: More stark/plain</li>
</ul>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> bmicat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Times"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Modifying the theme for a plot</figcaption>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s take our <code>palmerpenguins</code> scatterplot from above and change out the theme to use <code>theme_dark()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb18-4">penguins </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;      &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007
 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007
 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007
 4 Adelie  Torgersen           NA            NA           NA      NA &lt;NA&gt;   2007
 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007
 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007
 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007
 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007
 9 Adelie  Torgersen           34.1          18.1        193    3475 &lt;NA&gt;   2007
10 Adelie  Torgersen           42            20.2        190    4250 &lt;NA&gt;   2007
# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,
#   ²​body_mass_g</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="modifying-labels" class="level2">
<h2 class="anchored" data-anchor-id="modifying-labels">Modifying labels</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>There are a variety of <strong>annotations</strong> you can add to a plot, including <strong>different kinds of labels</strong>.</p>
<ul>
<li><code>xlab()</code> for x-axis labels</li>
<li><code>ylab()</code> for y-axis labels</li>
<li><code>ggtitle()</code> for specifying plot titles</li>
</ul>
<p><code>labs()</code> function is generic and can be used to modify multiple types of labels at once</p>
</div>
</div>
<p>Here is an example of modifying the title and the <code>x</code> and <code>y</code> labels to make the plot a bit more informative.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> bmicat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MAACS Cohort"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expression</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log "</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PM[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>]), </span>
<span id="cb20-5">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nocturnal Symptoms"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Modifying plot labels</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="a-quick-aside-about-axis-limits" class="level2">
<h2 class="anchored" data-anchor-id="a-quick-aside-about-axis-limits">A quick aside about axis limits</h2>
<p>One quick <strong>quirk about <code>ggplot2</code></strong> that caught me up when I first started using the package can be displayed in the following example.</p>
<p>If you make a lot of time series plots, you often <strong>want to restrict the range of the y-axis</strong> while still plotting all the data.</p>
<p>In the base graphics system you can do that as follows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">testdat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb21-2">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb21-3">testdat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Outlier!</span></span>
<span id="cb21-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(testdat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, </span>
<span id="cb21-5">     testdat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y,</span>
<span id="cb21-6">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, </span>
<span id="cb21-7">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Time series plot with base graphics</figcaption>
</figure>
</div>
</div>
</div>
<p>Here, we have restricted the y-axis range to be between -3 and 3, even though there is a clear outlier in the data.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>With <code>ggplot2</code> the default settings will give you this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(testdat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y))</span>
<span id="cb22-2">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Time series plot with default settings</figcaption>
</figure>
</div>
</div>
</div>
<p>One might think that modifying the <code>ylim()</code> attribute would give you the same thing as the base plot, but it doesn’t (?????)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylim</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Time series plot with modified ylim</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>Effectively, what this does is subset the data so that only observations between -3 and 3 are included, then plot the data.</p>
<p>To plot the data without subsetting it first and still get the restricted range, you have to do the following.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Time series plot with restricted y-axis range</figcaption>
</figure>
</div>
</div>
</div>
<p>And now you know!</p>
</section>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="resources" class="level3">
<h3 class="anchored" data-anchor-id="resources">Resources</h3>
<ul>
<li>The <em>ggplot2</em> book by Hadley Wickham</li>
<li>The <em>R Graphics Cookbook</em> by Winston Chang (examples in base plots and in <code>ggplot2</code>)</li>
<li><a href="http://ggplot2.tidyverse.org">tidyverse web site</a></li>
</ul>
</section>
<section id="more-complex-example-with-ggplot2" class="level3">
<h3 class="anchored" data-anchor-id="more-complex-example-with-ggplot2">More complex example with <code>ggplot2</code></h3>
<p>Now you get the sense that plots in the <code>ggplot2</code> system are constructed by successively adding components to the plot, starting with the base dataset and maybe a scatterplot. In this section bleow, you can see a slightly more complicated example with an additional variable.</p>
<details>
<summary>
Click here for a slightly more complicated example with <code>ggplot()</code>.
</summary>
<p>Now, we will ask the question</p>
<blockquote class="blockquote">
<p>How does the relationship between PM2.5 and nocturnal symptoms vary by BMI category and nitrogen dioxide (NO2)?</p>
</blockquote>
<p>Unlike our previous BMI variable, NO2 is continuous, and so we need to make NO2 categorical so we can condition on it in the plotting. We can use the <code>cut()</code> function for this purpose. We will divide the NO2 variable into tertiles.</p>
<p>First we need to calculate the tertiles with the <code>quantile()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">cutpoints <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(maacs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>logno2_new, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>Then we need to divide the original <code>logno2_new</code> variable into the ranges defined by the cut points computed above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">maacs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>no2tert <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span>(maacs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>logno2_new, cutpoints)</span></code></pre></div>
</div>
<p>The <code>not2tert</code> variable is now a categorical factor variable containing 3 levels, indicating the ranges of NO2 (on the log scale).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## See the levels of the newly created factor variable</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">levels</span>(maacs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>no2tert)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "(0.342,1.23]" "(1.23,1.47]"  "(1.47,2.17]" </code></pre>
</div>
</div>
<p>The final plot shows the relationship between PM2.5 and nocturnal symptoms by BMI category and NO2 tertile.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Setup ggplot with data frame</span></span>
<span id="cb29-2">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> maacs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(logpm25, NocturnalSympt))</span>
<span id="cb29-4"></span>
<span id="cb29-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Add layers</span></span>
<span id="cb29-6">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(bmicat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> no2tert) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"steelblue"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avenir"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expression</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log "</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PM[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>])) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-11">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nocturnal Symptoms"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MAACS Cohort"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid figure-img" width="864"></p>
<figcaption class="figure-caption">PM2.5 and nocturnal symptoms by BMI category and NO2 tertile</figcaption>
</figure>
</div>
</div>
</div>
</details>
</section>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>What happens if you facet on a continuous variable?</p></li>
<li><p>Read <code>?facet_wrap</code>. What does <code>nrow</code> do? What does <code>ncol</code> do? What other options control the layout of the individual panels? Why doesn’t <code>facet_grid()</code> have <code>nrow</code> and <code>ncol</code> arguments?</p></li>
<li><p>What geom would you use to draw a line chart? A boxplot? A histogram? An area chart?</p></li>
<li><p>What does <code>geom_col()</code> do? How is it different to <code>geom_bar()</code>?</p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://r4ds.had.co.nz/data-visualisation" class="uri">https://r4ds.had.co.nz/data-visualisation</a></li>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-the-ggplot2-plotting-system-part-2" class="uri">https://rdpeng.github.io/Biostat776/lecture-the-ggplot2-plotting-system-part-2</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 3</category>
  <category>week 3</category>
  <category>R</category>
  <category>programming</category>
  <category>ggplot2</category>
  <category>data viz</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-15-ggplot2-plotting-system-part-2/index.html</guid>
  <pubDate>Thu, 15 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Plotting Systems</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-plotting-systems/index.html</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>The data may not contain the answer. And, if you torture the data long enough, it will tell you anything. —<em>John W. Tukey</em></p>
</blockquote>
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://r4ds.had.co.nz/data-visualisation" class="uri">https://r4ds.had.co.nz/data-visualisation</a></li>
<li>Paul Murrell (2011). <em>R Graphics</em>, CRC Press.</li>
<li>Hadley Wickham (2009). <em>ggplot2</em>, Springer.</li>
<li>Deepayan Sarkar (2008). <em>Lattice: Multivariate Data Visualization with R</em>, Springer.</li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-plotting-systems" class="uri">https://rdpeng.github.io/Biostat776/lecture-plotting-systems</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to identify and describe the three plotting systems in R</li>
</ul>
</div>
</div>
</section>
<section id="plotting-systems" class="level1">
<h1>Plotting Systems</h1>
<p>There are <strong>three different plotting systems in R</strong> and they each have different characteristics and modes of operation.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>The three systems are</p>
<ol type="1">
<li>The base plotting system</li>
<li>The lattice system</li>
<li>The ggplot2 system</li>
</ol>
<p><strong>This course will focus primarily on the ggplot2 plotting system</strong>. The other two systems are presented for context.</p>
</div>
</div>
<section id="the-base-plotting-system" class="level2">
<h2 class="anchored" data-anchor-id="the-base-plotting-system">The Base Plotting System</h2>
<p>The <strong>base plotting system</strong> is the original plotting system for R. The basic model is sometimes <strong>referred to as the “artist’s palette” model</strong>.</p>
<p>The idea is you start with blank canvas and build up from there.</p>
<p>In more R-specific terms, you <strong>typically start with <code>plot()</code> function</strong> (or similar plot creating function) to <em>initiate</em> a plot and then <em>annotate</em> the plot with various annotation functions (<code>text</code>, <code>lines</code>, <code>points</code>, <code>axis</code>)</p>
<p>The base plotting system is <strong>often the most convenient plotting system</strong> to use because it mirrors how we sometimes think of building plots and analyzing data.</p>
<p>If we do not have a completely well-formed idea of how we want to look at some data, often we will start by “throwing some data on the page” and then slowly add more information to it as our thought process evolves.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>We might look at a simple scatterplot and then decide to add a linear regression line or a smoother to it to highlight the trends.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(airquality)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(airquality, {</span>
<span id="cb1-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(Temp, Ozone)</span>
<span id="cb1-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loess.smooth</span>(Temp, Ozone))</span>
<span id="cb1-5">})</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-plotting-systems/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="480"></p>
<figcaption class="figure-caption">Scatterplot with loess curve</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>In the code above:</p>
<ul>
<li>The <code>plot()</code> function creates the initial plot and draws the points (circles) on the canvas.</li>
<li>The <code>lines</code> function is used to annotate or add to the plot (in this case it adds a loess smoother to the scatterplot).</li>
</ul>
<p>Next, we use the <code>plot()</code> function to draw the points on the scatterplot and then use the <code>main</code> argument to add a main title to the plot.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(airquality)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(airquality, {</span>
<span id="cb2-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(Temp, Ozone, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my plot"</span>)</span>
<span id="cb2-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loess.smooth</span>(Temp, Ozone))</span>
<span id="cb2-5">})</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-plotting-systems/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="480"></p>
<figcaption class="figure-caption">Scatterplot with loess curve</figcaption>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>One downside with constructing base plots is that you <strong>cannot go backwards once the plot has started</strong>.</p>
<p>It is possible that you could start down the road of constructing a plot and realize later (when it is too late) that you do not have enough room to add a y-axis label or something like that</p>
</div>
</div>
<p>If you have specific plot in mind, there is then a need to <strong>plan in advance</strong> to make sure, for example, that you have set your margins to be the right size to fit all of the annotations that you may want to include.</p>
<p>While the base plotting system is nice in that it gives you the flexibility to specify these kinds of details to painstaking accuracy, <strong>sometimes it would be nice if the system could just figure it out for you</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Another downside of the base plotting system is that it is <strong>difficult to describe or translate a plot to others because there is no clear graphical language or grammar</strong> that can be used to communicate what you have done.</p>
<p>The only real way to describe what you have done in a base plot is to just list the series of commands/functions that you have executed, which is not a particularly compact way of communicating things.</p>
<p>This is one problem that the <code>ggplot2</code> package attempts to address.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Another typical base plot is constructed with the following code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(cars)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Create the plot / draw canvas</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(cars, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(speed, dist))</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Add annotation</span></span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Speed vs. Stopping distance"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-plotting-systems/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="480"></p>
<figcaption class="figure-caption">Base plot with title</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>We will go into more detail on what these functions do in later lessons.</p>
</section>
<section id="the-lattice-system" class="level2">
<h2 class="anchored" data-anchor-id="the-lattice-system">The Lattice System</h2>
<p>The <strong>lattice plotting system</strong> is implemented in the <code>lattice</code> R package which comes with every installation of R (although it is not loaded by default).</p>
<p>To <strong>use the lattice plotting functions</strong>, you must first load the <code>lattice</code> package with the <code>library</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lattice)</span></code></pre></div>
</div>
<p>With the lattice system, <strong>plots are created with a single function call</strong>, such as <code>xyplot()</code> or <code>bwplot()</code>.</p>
<p>There is <strong>no real distinction between functions that create or initiate plots</strong> and <strong>functions that annotate plots</strong> because it all happens at once.</p>
<p>Lattice plots tend to be <strong>most useful for conditioning types of plots</strong>, i.e.&nbsp;looking at how <code>y</code> changes with <code>x</code> across levels of <code>z</code>.</p>
<ul>
<li>e.g.&nbsp;these types of plots are useful for looking at multi-dimensional data and often allow you to squeeze a lot of information into a single window or page.</li>
</ul>
<p>Another aspect of lattice that makes it different from base plotting is that <strong>things like margins and spacing are set automatically</strong>.</p>
<p>This is possible because entire plot is specified at once via a single function call, so all of the available information needed to figure out the spacing and margins is already there.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here is a lattice plot that looks at the relationship between life expectancy and income and how that relationship varies by region in the United States.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(state.x77, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">region =</span> state.region)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xyplot</span>(Life.Exp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Income <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> region, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> state, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layout =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-plotting-systems/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="768"></p>
<figcaption class="figure-caption">Lattice plot</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>You can see that the entire plot was generated by the call to <code>xyplot()</code> and all of the data for the plot were stored in the <code>state</code> data frame.</p>
<p>The <strong>plot itself contains four panels</strong>—one for each region—and <strong>within each panel is a scatterplot</strong> of life expectancy and income.</p>
<p>The notion of <em>panels</em> comes up a lot with lattice plots because you typically have many panels in a lattice plot (each panel typically represents a <em>condition</em>, like “region”).</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Downsides with the lattice system</p>
<ul>
<li>It can sometimes be very <strong>awkward to specify an entire plot</strong> in a single function call (you end up with functions with many many arguments).</li>
<li><strong>Annotation in panels in plots is not especially intuitive</strong> and can be difficult to explain. In particular, the use of custom panel functions and subscripts can be difficult to wield and requires intense preparation.</li>
<li>Once a plot is created, <strong>you cannot “add” to the plot</strong> (but of course you can just make it again with modifications).</li>
</ul>
</div>
</div>
</section>
<section id="the-ggplot2-system" class="level2">
<h2 class="anchored" data-anchor-id="the-ggplot2-system">The ggplot2 System</h2>
<p>The <strong>ggplot2 plotting system</strong> attempts to split the difference between base and lattice in a number of ways.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Taking cues from lattice, the ggplot2 system automatically deals with spacings, text, titles but also allows you to annotate by “adding” to a plot.</p>
</div>
</div>
<p>The ggplot2 system is implemented in the <code>ggplot2</code> package (part of the <code>tidyverse</code> package), which is available from CRAN (it does not come with R).</p>
<p>You can install it from CRAN via</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>)</span></code></pre></div>
</div>
<p>and then load it into R via the <code>library()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span></code></pre></div>
</div>
<p>Superficially, the <code>ggplot2</code> functions are similar to <code>lattice</code>, but the system is generally easier and more intuitive to use.</p>
<p>The defaults used in <code>ggplot2</code> make many choices for you, but you can still customize plots to your heart’s desire.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>A typical plot with the <code>ggplot2</code> package looks as follows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(mpg)</span>
<span id="cb8-3">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-plotting-systems/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="576"></p>
<figcaption class="figure-caption">ggplot2 plot</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>There are additional functions in <code>ggplot2</code> that allow you to make arbitrarily sophisticated plots.</p>
<p>We will discuss more about this in the next lecture.</p>


</section>
</section>

 ]]></description>
  <category>module 3</category>
  <category>week 3</category>
  <category>R</category>
  <category>programming</category>
  <category>ggplot2</category>
  <category>data viz</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-plotting-systems/index.html</guid>
  <pubDate>Tue, 13 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>The ggplot2 plotting system: qplot()</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index.html</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>“The greatest value of a picture is when it forces us to notice what we never expected to see.” —John Tukey</p>
</blockquote>
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://r4ds.had.co.nz/data-visualisation" class="uri">https://r4ds.had.co.nz/data-visualisation</a></li>
<li><a href="http://vita.had.co.nz/papers/layered-grammar.pdf" class="uri">http://vita.had.co.nz/papers/layered-grammar.pdf</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-the-ggplot2-plotting-system-part-1" class="uri">https://rdpeng.github.io/Biostat776/lecture-the-ggplot2-plotting-system-part-1</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Recognize the difference between <em>aesthetics</em> and <em>geoms</em></li>
<li>Become familiar with different types of plots (e.g.&nbsp;scatterplots, boxplots, and histograms)</li>
<li>Be able to facet plots into a grid</li>
</ul>
</div>
</div>
</section>
<section id="the-ggplot2-plotting-system" class="level1">
<h1>The ggplot2 Plotting System</h1>
<p>The <code>ggplot2</code> package in R is <strong>an implementation of <em>The Grammar of Graphics</em></strong> as described by Leland Wilkinson in his book. The <strong>package was originally written by Hadley Wickham</strong> while he was a graduate student at Iowa State University (he still actively maintains the package).</p>
<p>The package implements what might be considered a third graphics system for R (along with <code>base</code> graphics and <code>lattice</code>).</p>
<p>The package is available from <a href="http://cran.r-project.org/package=ggplot2">CRAN</a> via <code>install.packages()</code>; the latest version of the source can be found on the package’s <a href="https://github.com/hadley/ggplot2">GitHub Repository</a>. Documentation of the package can be found at <a href="https://ggplot2.tidyverse.org">the tidyverse web site</a>.</p>
<p>The <strong>grammar of graphics</strong> represents <strong>an abstraction of graphics ideas and objects</strong>.</p>
<p>You can think of this as <strong>developing the verbs, nouns, and adjectives for data graphics</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Developing such a <strong>grammar allows for a “theory” of graphics</strong> on which to build new graphics and graphics objects.</p>
<p>To quote from Hadley Wickham’s book on <code>ggplot2</code>, we want to “shorten the distance from mind to page”. In summary,</p>
<blockquote class="blockquote">
<p>“…the grammar tells us that a statistical graphic is a <strong>mapping</strong> from data to <strong>aesthetic</strong> attributes (colour, shape, size) of <strong>geometric</strong> objects (points, lines, bars). The plot may also contain statistical transformations of the data and is drawn on a specific coordinate system” – from <em>ggplot2</em> book</p>
</blockquote>
</div>
</div>
<p>You might ask yourself “Why do we need a grammar of graphics?”.</p>
<p>Well, for much the same reasons that <strong>having a grammar is useful for spoken languages</strong>. The grammar allows for</p>
<ul>
<li>A more compact summary of the base components of a language</li>
<li>An extension of the language to handle situations that we have not before seen</li>
</ul>
<p>If you think about making a plot with the base graphics system, the plot is <strong>constructed by calling a series of functions that either create or annotate a plot</strong>. There’s <strong>no convenient agreed-upon way to describe the plot</strong>, except to just recite the series of R functions that were called to create the thing in the first place.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Consider the following plot made using base graphics previously.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(airquality, { </span>
<span id="cb1-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(Temp, Ozone)</span>
<span id="cb1-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loess.smooth</span>(Temp, Ozone))</span>
<span id="cb1-4">})</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="480"></p>
<figcaption class="figure-caption">Scatterplot of Temperature and Ozone in New York (base graphics)</figcaption>
</figure>
</div>
</div>
</div>
<p>How would one <strong>describe the creation of this plot</strong>?</p>
<p>Well, we could say that we called the <code>plot()</code> function and then added a loess smoother by calling the <code>lines()</code> function on the output of <code>loess.smooth()</code>.</p>
<p>While the base plotting system is convenient and it often mirrors how we think of building plots and analyzing data, there are <strong>drawbacks</strong>:</p>
<ul>
<li>You cannot go back once plot has started (e.g.&nbsp;to adjust margins), so there is in fact a need to plan in advance.</li>
<li>It is difficult to “translate” a plot to others because there is no formal graphical language; each plot is just a series of R commands.</li>
</ul>
</div>
</div>
<p>Here is the same plot made using <code>ggplot2</code> in the <code>tidyverse</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-2">airquality <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(Temp, Ozone)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loess"</span>, </span>
<span id="cb2-6">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Scatterplot of Temperature and Ozone in New York (ggplot2)</figcaption>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The output is roughly equivalent and the amount of code is similar, but <code>ggplot2</code> allows for a more elegant way of expressing the components of the plot.</p>
<p>In this case, the plot is a <strong>dataset</strong> (<code>airquality</code>) with <strong>aesthetic mappings</strong> (visual properties of the objects in your plot) derived from the <code>Temp</code> and <code>Ozone</code> variables, a set of <strong>points</strong>, and a <strong>smoother</strong>.</p>
</div>
</div>
<p>In a sense, the <code>ggplot2</code> system takes many of the cues from the base plotting system and from the <code>lattice</code> plotting systems, and formalizes the cues a bit.</p>
<p>It <strong>automatically handles things like margins and spacing</strong>, and also has the concept of “themes” which <strong>provide a default set of plotting symbols and colors</strong> (which are all customizable).</p>
<p>While <code>ggplot2</code> bears a superficial similarity to <code>lattice</code>, <code>ggplot2</code> is generally easier and more intuitive to use.</p>
<section id="the-basics-qplot" class="level2">
<h2 class="anchored" data-anchor-id="the-basics-qplot">The Basics: <code>qplot()</code></h2>
<p>The <code>qplot()</code> function in <code>ggplot2</code> is meant to get you going <strong>q</strong>uickly.</p>
<p>It works much like the <code>plot()</code> function in base graphics system. It <strong>looks for variables to plot within a data frame</strong>, similar to lattice, or in the parent environment.</p>
<p>In general, it is good to get used to putting your data in a data frame and then passing it to <code>qplot()</code>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>qplot()</code> function is <strong>somewhat discouraged</strong> in <code>ggplot2</code> now and new users are encouraged to use the more general <code>ggplot()</code> function (more details in the next lesson).</p>
<p>However, the <code>qplot()</code> function is still useful and may be easier to use if transitioning from the base plotting system or a different statistical package.</p>
</div>
</div>
<p>Plots are made up of</p>
<ul>
<li><strong>aesthetics</strong> (e.g.&nbsp;size, shape, color)</li>
<li><strong>geoms</strong> (e.g.&nbsp;points, lines)</li>
</ul>
<p>Factors play an important role for indicating subsets of the data (if they are to have different properties) so they should be <strong>labeled</strong> properly.</p>
<p>The <code>qplot()</code> hides much of what goes on underneath, which is okay for most operations, <code>ggplot()</code> is the core function and is very flexible for doing things <code>qplot()</code> cannot do.</p>
</section>
<section id="before-you-start-label-your-data" class="level2">
<h2 class="anchored" data-anchor-id="before-you-start-label-your-data">Before you start: label your data</h2>
<p>One thing that is always true, but is particularly useful when using <code>ggplot2</code>, is that you should always <strong>use informative and descriptive labels on your data</strong>.</p>
<p>More generally, your data should have appropriate <strong>metadata</strong> so that you can quickly look at a dataset and know</p>
<ul>
<li>what are variables?</li>
<li>what do the values of each variable mean?</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Pro tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><strong>Each column</strong> of a data frame should <strong>have a meaningful (but concise) variable name</strong> that accurately reflects the data stored in that column</li>
<li>Non-numeric or <strong>categorical variables should be coded as factor variables</strong> and have meaningful labels for each level of the factor.
<ul>
<li>Might be common to code a binary variable as a “0” or a “1”, but the problem is that from quickly looking at the data, it’s impossible to know whether which level of that variable is represented by a “0” or a “1”.</li>
<li>Much better to simply label each observation as what they are.</li>
<li>If a variable represents temperature categories, it might be better to use “cold”, “mild”, and “hot” rather than “1”, “2”, and “3”.</li>
</ul></li>
</ul>
</div>
</div>
<p>While it is sometimes a pain to make sure all of your data are properly labeled, this <strong>investment in time can pay dividends down the road</strong> when you’re trying to figure out what you were plotting.</p>
<p>In other words, including the proper metadata can make your exploratory plots essentially self-documenting.</p>
</section>
<section id="ggplot2-hello-world" class="level2">
<h2 class="anchored" data-anchor-id="ggplot2-hello-world">ggplot2 “Hello, world!”</h2>
<p>This example dataset comes with the <code>ggplot2</code> package and contains data on the fuel economy of 38 popular car models from 1999 to 2008.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this loads the ggplot2 R package</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library(ggplot2) # an alternative way to just load the ggplot2 R package</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(mpg)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 234
Columns: 11
$ manufacturer &lt;chr&gt; "audi", "audi", "audi", "audi", "audi", "audi", "audi", "…
$ model        &lt;chr&gt; "a4", "a4", "a4", "a4", "a4", "a4", "a4", "a4 quattro", "…
$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…
$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…
$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …
$ trans        &lt;chr&gt; "auto(l5)", "manual(m5)", "manual(m6)", "auto(av)", "auto…
$ drv          &lt;chr&gt; "f", "f", "f", "f", "f", "f", "f", "4", "4", "4", "4", "4…
$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…
$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…
$ fl           &lt;chr&gt; "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p…
$ class        &lt;chr&gt; "compact", "compact", "compact", "compact", "compact", "c…</code></pre>
</div>
</div>
<p>You can see from the <code>glimpse()</code> (part of the <code>dplyr</code> package) output that all of the categorical variables (like “manufacturer” or “class”) are **appropriately coded with meaningful label*s**.</p>
<p>This will come in handy when <code>qplot()</code> has to label different aspects of a plot.</p>
<p>Also note that all of the <strong>columns/variables have meaningful names</strong> (if sometimes abbreviated), rather than names like “X1”, and “X2”, etc.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>We can <strong>make a quick scatterplot</strong> using <code>qplot()</code> of the engine displacement (<code>displ</code>) and the highway miles per gallon (<code>hwy</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> displ, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Plot of engine displacement and highway mileage using the mtcars dataset</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>It has a <em>very</em> similar feeling to <code>plot()</code> in base R.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the call to <code>qplot()</code> you <strong>must specify the <code>data</code> argument</strong> so that <code>qplot()</code> knows where to look up the variables.</p>
<p>You must also specify <code>x</code> and <code>y</code>, but hopefully that part is obvious.</p>
</div>
</div>
</section>
<section id="modifying-aesthetics" class="level2">
<h2 class="anchored" data-anchor-id="modifying-aesthetics">Modifying aesthetics</h2>
<p>We can introduce a third variable into the plot by <strong>modifying the color</strong> of the points based on the value of that third variable.</p>
<p>Color (or colour) is one type of <strong>aesthetic</strong> and using the <code>ggplot2</code> language:</p>
<blockquote class="blockquote">
<p>“the color of each point can be mapped to a variable”</p>
</blockquote>
<p>This sounds technical, but let’s give an example.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>We map the <code>color</code> argument to the <code>drv</code> variable, which indicates whether a car is front wheel drive, rear wheel drive, or 4-wheel drive.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> drv)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Engine displacement and highway mileage by drive class</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>Now we can see that the front wheel drive cars tend to have lower displacement relative to the 4-wheel or rear wheel drive cars.</p>
<p>Also, it’s clear that the 4-wheel drive cars have the lowest highway gas mileage.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>x</code> argument and <code>y</code> argument are aesthetics too, and they got mapped to the <code>displ</code> and <code>hwy</code> variables, respectively.</p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the above plot, I did not specify the <code>x</code> and <code>y</code> variable. What happens when you run these two code chunks. What’s the difference?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> drv)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> displ, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> drv)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(hwy, displ, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> drv)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> displ, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> drv)</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s try mapping colors in another dataset, namely the <a href="https://allisonhorst.github.io/palmerpenguins/">palmerpenguins</a> dataset. These data contain observations for 344 penguins. There are 3 different species of penguins in this dataset, collected from 3 islands in the Palmer Archipelago, Antarctica.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/https:/allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption class="figure-caption">Palmer penguins</figcaption>
</figure>
</div>
</div>
</div>
<p>[<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 344
Columns: 8
$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…
$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…</code></pre>
</div>
</div>
<p>If we wanted to count the number of penguins for each of the three species, we can use the <code>count()</code> function in <code>dplyr</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  species       n
  &lt;fct&gt;     &lt;int&gt;
1 Adelie      152
2 Chinstrap    68
3 Gentoo      124</code></pre>
</div>
</div>
</div>
</div>
<p>For example, we see there are a total of 152 Adelie penguins in the <code>palmerpenguins</code> dataset.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>If we wanted to use <code>qplot()</code> to map <code>flipper_length_mm</code> and <code>bill_length_mm</code> to the x and y coordinates, what would we do?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span></code></pre></div>
</div>
<p>Now try mapping color to the <code>species</code> variable on top of the code you just wrote:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="adding-a-geom" class="level2">
<h2 class="anchored" data-anchor-id="adding-a-geom">Adding a geom</h2>
<p>Sometimes it is nice to <strong>add a smoother</strong> to a scatterplot to highlight any trends.</p>
<p>Trends can be difficult to see if the data are very noisy or there are many data points obscuring the view.</p>
<p>A smoother is a <strong>type of “geom”</strong> that you can add along with your data points.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"point"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"smooth"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Engine displacement and highway mileage w/smoother</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>Here it seems that engine displacement and highway mileage have a nonlinear U-shaped relationship, but from the previous plot we know that this is largely due to confounding by the drive class of the car.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Previously, we did not have to specify <code>geom = "point"</code> because that was done automatically.</p>
<p>But if you want the smoother overlaid with the points, then you need to specify both explicitly.</p>
</div>
</div>
<p>Look at what happens if we <em>do not</em> include the <code>point</code> geom.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"smooth"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Engine displacement and highway mileage w/smoother</figcaption>
</figure>
</div>
</div>
</div>
<p>Sometimes that is the plot you want to show, but in this case it might make more sense to show the data along with the smoother.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s <strong>add a smoother</strong> to our <code>palmerpenguins</code> dataset example.</p>
<p>Using the code we previously wrote mapping variables to points and color, add a “point” and “smooth” geom:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="histograms-and-boxplots" class="level2">
<h2 class="anchored" data-anchor-id="histograms-and-boxplots">Histograms and boxplots</h2>
<p>The <code>qplot()</code> function can be used to be used to plot 1-dimensional data too.</p>
<p>By <strong>specifying a single variable</strong>, <code>qplot()</code> will by default make a <strong>histogram</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>We can make a histogram of the highway mileage data and stratify on the drive class. So technically this is three histograms on top of each other.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> drv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Histogram of highway mileage by drive class</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Notice, I used <code>fill</code> here to map color to the <code>drv</code> variable. Why is this? What happens when you use <code>color</code> instead?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span></code></pre></div>
</div>
</div>
</div>
<p>Having the different colors for each drive class is nice, but the three histograms can be a bit difficult to separate out.</p>
<p><strong>Side-by-side boxplots</strong> are one solution to this problem.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(drv, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boxplot"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Boxplots of highway mileage by drive class</figcaption>
</figure>
</div>
</div>
</div>
<p>Another solution is to plot the histograms in separate panels using facets.</p>
</section>
<section id="facets" class="level2">
<h2 class="anchored" data-anchor-id="facets">Facets</h2>
<p><strong>Facets</strong> are a way to <strong>create multiple panels of plots based on the levels of categorical variable</strong>.</p>
<p>Here, we want to see a histogram of the highway mileages and the categorical variable is the drive class variable. We can do that using the <code>facets</code> argument to <code>qplot()</code>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>facets</code> argument <strong>expects a formula type of input</strong>, with a <code>~</code> separating the left hand side variable and the right hand side variable.</p>
<ul>
<li>The <strong>left hand side</strong> variable indicates how the rows of the panels should be divided</li>
<li>The <strong>right hand side</strong> variable indicates how the columns of the panels should be divided</li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here, we just want three rows of histograms (and just one column), one for each drive class, so we specify <code>drv</code> on the left hand side and <code>.</code> on the right hand side indicating that there’s no variable there (it’s empty).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">facets =</span> drv <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid figure-img" width="480"></p>
<figcaption class="figure-caption">Histogram of highway mileage by drive class</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>We could also look at <strong>more data using facets</strong>, so instead of histograms we could look at scatter plots of engine displacement and highway mileage by drive class.</p>
<p>Here, we put the <code>drv</code> variable on the right hand side to indicate that we want a column for each drive class (as opposed to splitting by rows like we did above).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">facets =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> drv)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid figure-img" width="576"></p>
<figcaption class="figure-caption">Engine displacement and highway mileage by drive class</figcaption>
</figure>
</div>
</div>
</div>
<p>What if you wanted to <strong>add a smoother to each one of those panels</strong>? Simple, you literally just add the smoother as another <strong>geom</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">facets =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> drv) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid figure-img" width="576"></p>
<figcaption class="figure-caption">Engine displacement and highway mileage by drive class w/smoother</figcaption>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>We used a different type of smoother above.</p>
<p>Here, we add a <strong>linear regression line</strong> (a type of smoother) to each group to see if there’s any difference.</p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s facet our <code>palmerpenguins</code> dataset example and explore different types of plots.</p>
<p>Building off the code we previously wrote, perform the following tasks:</p>
<ul>
<li>Facet the plot based on <code>species</code> with the the three species along rows.</li>
<li>Add a linear regression line to each the types of <code>species</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span></code></pre></div>
</div>
<p>Next, make a histogram of the <code>body_mass_g</code> for each of the species colored by the three species.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>The <code>qplot()</code> function in <code>ggplot2</code> is the analog of <code>plot()</code> in base graphics but with many built-in features that the traditionaly <code>plot()</code> does not provide. The syntax is somewhere in between the base and lattice graphics system. The <code>qplot()</code> function is useful for quickly putting data on the page/screen, but for ultimate customization, it may make more sense to use some of the lower level functions that we discuss later in the next lesson.</p>
</section>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="case-study-maacs-cohort" class="level3">
<h3 class="anchored" data-anchor-id="case-study-maacs-cohort">Case Study: MAACS Cohort</h3>
<details>
<summary>
Click here for case study practicing the <code>qplot()</code> function.
</summary>
<p>This case study will use data based on the Mouse Allergen and Asthma Cohort Study (MAACS). This study was aimed at characterizing the indoor (home) environment and its relationship with asthma morbidity amonst children aged 5–17 living in Baltimore, MD. The children all had persistent asthma, defined as having had an exacerbation in the past year. A representative publication of results from this study can be found in this paper by <a href="https://pubmed.ncbi.nlm.nih.gov/23403052/">Lu, et al.</a></p>
<div class="keyideas">
<p>Because the individual-level data for this study are protected by various U.S. privacy laws, we cannot make those data available. For the purposes of this lesson, we have simulated data that share many of the same features of the original data, but do not contain any of the actual measurements or values contained in the original dataset.</p>
</div>
<p>Here is a snapshot of what the data look like.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>here() starts at /Users/stephaniehicks/Documents/github/teaching/jhustatcomputing2022</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">maacs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maacs_sim.csv"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"icnn"</span>)</span>
<span id="cb33-2">maacs</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 750 × 4
      id mopos  pm25    eno
   &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;
 1     1 yes    6.01  28.8 
 2     2 no    25.2   17.7 
 3     3 yes   21.8   43.6 
 4     4 no    13.4  288.  
 5     5 no    49.4    7.60
 6     6 no    43.4   12.0 
 7     7 yes   33.0   79.2 
 8     8 yes   32.7   34.2 
 9     9 yes   52.2   12.1 
10    10 yes   51.9   65.0 
# … with 740 more rows</code></pre>
</div>
</div>
<p>The key variables are:</p>
<ul>
<li><p><code>mopos</code>: an indicator of whether the subject is allergic to mouse allergen (yes/no)</p></li>
<li><p><code>pm25</code>: average level of PM2.5 over the course of 7 days (micrograms per cubic meter)</p></li>
<li><p><code>eno</code>: exhaled nitric oxide</p></li>
</ul>
<p>The outcome of interest for this analysis will be exhaled nitric oxide (eNO), which is a measure of pulmonary inflamation. We can get a sense of how eNO is distributed in this population by making a quick histogram of the variable. Here, we take the log of eNO because some right-skew in the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(eno), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> maacs)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Histogram of log eNO</figcaption>
</figure>
</div>
</div>
</div>
<p>A quick glance suggests that the histogram is a bit “fat”, suggesting that there might be multiple groups of people being lumped together. We can stratify the histogram by whether they are allergic to mouse.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(eno), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> maacs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> mopos)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-29-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Histogram of log eNO by mouse allergic status</figcaption>
</figure>
</div>
</div>
</div>
<p>We can see from this plot that the non-allergic subjects are shifted slightly to the left, indicating a lower eNO and less pulmonary inflammation. That said, there is significant overlap between the two groups.</p>
<p>An alternative to histograms is a density smoother, which sometimes can be easier to visualize when there are multiple groups. Here is a density smooth of the entire study population.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(eno), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> maacs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"density"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-30-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Density smooth of log eNO</figcaption>
</figure>
</div>
</div>
</div>
<p>And here are the densities straitified by allergic status. We can map the color aesthetic to the <code>mopos</code> variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(eno), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> maacs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"density"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> mopos)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-31-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Density smooth of log eNO by mouse allergic status</figcaption>
</figure>
</div>
</div>
</div>
<p>These tell the same story as the stratified histograms, which should come as no surprise.</p>
<p>Now we can examine the indoor environment and its relationship to eNO. Here, we use the level of indoor PM2.5 as a measure of indoor environment air quality. We can make a simple scatterplot of PM2.5 and eNO.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(pm25), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(eno), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> maacs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"point"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"smooth"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-32-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">eNO and PM2.5</figcaption>
</figure>
</div>
</div>
</div>
<p>The relationship appears modest at best, as there is substantial noise in the data. However, one question that we might be interested in is whether allergic individuals are perhaps more sensitive to PM2.5 inhalation than non-allergic individuals. To examine that question we can stratify the data into two groups.</p>
<p>This first plot uses different plot symbols for the two groups and overlays them on a single canvas. We can do this by mapping the <code>mopos</code> variable to the <code>shape</code> aesthetic.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(pm25), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(eno), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> maacs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> mopos)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-33-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">eNO and PM2.5 by mouse allergic status</figcaption>
</figure>
</div>
</div>
</div>
<p>Because there is substantial overlap in the data it is a bit challenging to discern the circles from the triangles. Part of the reason might be that all of the symbols are the same color (black).</p>
<p>We can plot each group a different color to see if that helps.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(pm25), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(eno), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> maacs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> mopos)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-34-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">eNO and PM2.5 by mouse allergic status</figcaption>
</figure>
</div>
</div>
</div>
<p>This is slightly better but the substantial overlap makes it difficult to discern any trends in the data. For this we need to add a smoother of some sort. Here we add a linear regression line (a type of smoother) to each group to see if there’s any difference.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(pm25), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(eno), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> maacs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> mopos) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb45-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Here we see quite clearly that the red group and the green group exhibit rather different relationships between PM2.5 and eNO. For the non-allergic individuals, there appears to be a slightly negative relationship between PM2.5 and eNO and for the allergic individuals, there is a positive relationship. This suggests a strong interaction between PM2.5 and allergic status, an hypothesis perhaps worth following up on in greater detail than this brief exploratory analysis.</p>
<p>Another, and perhaps more clear, way to visualize this interaction is to use separate panels for the non-allergic and allergic individuals using the <code>facets</code> argument to <code>qplot()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(pm25), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(eno), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> maacs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">facets =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> mopos) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-36-1.png" class="img-fluid" width="864"></p>
</div>
</div>
</details>
</section>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>What is gone wrong with this code? Why are the points not blue?</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> displ, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index_files/figure-html/unnamed-chunk-37-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ol start="2" type="1">
<li><p>Which variables in <code>mpg</code> are categorical? Which variables are continuous? (Hint: type <code>?mpg</code> to read the documentation for the dataset). How can you see this information when you run <code>mpg</code>?</p></li>
<li><p>Map a continuous variable to <code>color</code>, <code>size</code>, and <code>shape</code> aesthetics. How do these aesthetics behave differently for categorical vs.&nbsp;continuous variables?</p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://r4ds.had.co.nz/data-visualisation" class="uri">https://r4ds.had.co.nz/data-visualisation</a></li>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-the-ggplot2-plotting-system-part-1" class="uri">https://rdpeng.github.io/Biostat776/lecture-the-ggplot2-plotting-system-part-1</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 3</category>
  <category>week 3</category>
  <category>R</category>
  <category>programming</category>
  <category>ggplot2</category>
  <category>data viz</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-13-ggplot2-plotting-system-part-1/index.html</guid>
  <pubDate>Tue, 13 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Joining data in R</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-08-joining-data-in-r/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://r4ds.had.co.nz/relational-data" class="uri">https://r4ds.had.co.nz/relational-data</a></li>
<li><a href="https://rafalab.github.io/dsbook/joining-tables" class="uri">https://rafalab.github.io/dsbook/joining-tables</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-joining-data-in-r-basics" class="uri">https://rdpeng.github.io/Biostat776/lecture-joining-data-in-r-basics</a></li>
<li><a href="https://r4ds.had.co.nz/relational-data" class="uri">https://r4ds.had.co.nz/relational-data</a></li>
<li><a href="https://rafalab.github.io/dsbook/joining-tables" class="uri">https://rafalab.github.io/dsbook/joining-tables</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to define relational data and keys</li>
<li>Be able to define the three types of join functions for relational data</li>
<li>Be able to implement mutational join functions</li>
</ul>
</div>
</div>
</section>
<section id="relational-data" class="level1">
<h1>Relational data</h1>
<p>Data analyses rarely involve only a single table of data.</p>
<p>Typically you have many tables of data, and you <strong>must combine the datasets</strong> to answer the questions that you are interested in.</p>
<p>Collectively, <strong>multiple tables of data are called relational data</strong> because it is the <em>relations</em>, not just the individual datasets, that are important.</p>
<p>Relations are <strong>always defined between a pair of tables</strong>. All other relations are built up from this simple idea: the relations of three or more tables are always a property of the relations between each pair.</p>
<p>Sometimes both elements of a pair can be the same table! This is needed if, for example, you have a table of people, and each person has a reference to their parents.</p>
<p>To work with relational data you <strong>need verbs that work with pairs of tables</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Three important families of verbs
</div>
</div>
<div class="callout-body-container callout-body">
<p>There are three families of verbs designed to work with relational data:</p>
<ul>
<li><a href="https://r4ds.had.co.nz/relational-data.html#mutating-joins"><strong>Mutating joins</strong></a>: A mutating join allows you to <strong>combine variables from two tables</strong>. It first matches observations by their keys, then copies across variables from one table to the other on the right side of the table (similar to <code>mutate()</code>). We will discuss a few of these below.
<ul>
<li>See Section&nbsp;4 for Table of mutating joins.</li>
</ul></li>
<li><a href="https://r4ds.had.co.nz/relational-data.html#filtering-joins"><strong>Filtering joins</strong></a>: Filtering joins <strong>match observations</strong> in the same way as mutating joins, <strong>but affect the observations, not the variables</strong> (i.e.&nbsp;filter observations from one data frame based on whether or not they match an observation in the other).
<ul>
<li>Two types: <code>semi_join(x, y)</code> and <code>anti_join(x, y)</code>.</li>
</ul></li>
<li><a href="https://r4ds.had.co.nz/relational-data.html#set-operations"><strong>Set operations</strong></a>: Treat <strong>observations as if they were set elements</strong>. Typically used less frequently, but occasionally useful when you want to break a single complex filter into simpler pieces. All these operations work with a complete row, comparing the values of every variable. These expect the x and y inputs to have the same variables, and treat the observations like sets:
<ul>
<li>Examples of set operations: <code>intersect(x, y)</code>, <code>union(x, y)</code>, and <code>setdiff(x, y)</code>.</li>
</ul></li>
</ul>
</div>
</div>
<section id="keys" class="level2">
<h2 class="anchored" data-anchor-id="keys">Keys</h2>
<p>The <strong>variables used to connect each pair of tables</strong> are called <strong>keys</strong>. A key is a variable (or set of variables) that uniquely identifies an observation. In simple cases, a single variable is sufficient to identify an observation.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>There are two types of keys:</p>
<ul>
<li>A <strong>primary key</strong> uniquely identifies an observation in its own table.</li>
<li>A <strong>foreign key</strong> uniquely identifies an observation in another table.</li>
</ul>
</div>
</div>
<p>Let’s consider an example to help us understand the difference between a <strong>primary key</strong> and <strong>foreign key</strong>.</p>
</section>
<section id="example-of-keys" class="level2">
<h2 class="anchored" data-anchor-id="example-of-keys">Example of keys</h2>
<p>Imagine you are conduct a study and <strong>collecting data on subjects and a health outcome</strong>.</p>
<p>Often, subjects will <strong>make multiple visits</strong> (a so-called longitudinal study) and so we will record the outcome for each visit. Similarly, we may record other information about them, such as the kind of housing they live in.</p>
<section id="the-first-table" class="level3">
<h3 class="anchored" data-anchor-id="the-first-table">The first table</h3>
<p>This code creates a simple table with some made up data about some hypothetical subjects’ outcomes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"></span>
<span id="cb1-3">outcomes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb1-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb1-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">visit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb1-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outcome =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-7">)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(outcomes)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 3
  id    visit outcome
  &lt;chr&gt; &lt;int&gt;   &lt;dbl&gt;
1 a         0   3.74 
2 a         1   4.36 
3 a         2   3.23 
4 b         0   3.22 
5 b         1   0.290
6 b         2   1.33 
7 c         0   3.14 
8 c         1   3.29 
9 c         2   3.39 </code></pre>
</div>
</div>
<p>Note that subjects are labeled by a unique identifer in the <code>id</code> column.</p>
</section>
<section id="a-second-table" class="level3">
<h3 class="anchored" data-anchor-id="a-second-table">A second table</h3>
<p>Here is some code to create a second table (we will be joining the first and second tables shortly). This table contains some data about the hypothetical subjects’ housing situation by recording the type of house they live in.</p>
<div class="cell" data-exercise="true">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">subjects <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-2">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>),</span>
<span id="cb3-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">house =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"detached"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rowhouse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rowhouse"</span>)</span>
<span id="cb3-4">)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(subjects)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  id    house   
  &lt;chr&gt; &lt;chr&gt;   
1 a     detached
2 b     rowhouse
3 c     rowhouse</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is the <strong>primary key</strong> and <strong>foreign key</strong>?</p>
<ul>
<li>The <code>outcomes$id</code> is a <strong>primary key</strong> because it uniquely identifies each subject in the <code>outcomes</code> table.</li>
<li>The <code>subjects$id</code> is a <strong>foreign key</strong> because it appears in the <code>subjects</code> table where it matches each subject to a unique <code>id</code>.</li>
</ul>
</div>
</div>
</section>
</section>
</section>
<section id="sec-mutjoins" class="level1">
<h1>Mutating joins</h1>
<p>The <code>dplyr</code> package provides a set of <strong>functions for joining two data frames</strong> into a single data frame based on a set of key columns.</p>
<p>There are several functions in the <code>*_join()</code> family.</p>
<ul>
<li>These functions all merge together two data frames</li>
<li>They differ in how they handle observations that exist in one but not both data frames.</li>
</ul>
<p>Here, are the <strong>four functions from this family</strong> that you will likely use the most often:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 12%">
<col style="width: 87%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Function</th>
<th style="text-align: left;">What it includes in merged data frame</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>left_join()</code></td>
<td style="text-align: left;">Includes all observations in the left data frame, whether or not there is a match in the right data frame</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>right_join()</code></td>
<td style="text-align: left;">Includes all observations in the right data frame, whether or not there is a match in the left data frame</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>inner_join()</code></td>
<td style="text-align: left;">Includes only observations that are in both data frames</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>full_join()</code></td>
<td style="text-align: left;">Includes all observations from both data frames</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-08-joining-data-in-r/https:/d33wubrfki0l68.cloudfront.net/aeab386461820b029b7e7606ccff1286f623bae1/ef0d4/diagrams/join-venn.png" class="img-fluid"></p>
<p>[<a href="https://r4ds.had.co.nz/relational-data#relational-data">Source from R for Data Science</a>]</p>
<section id="left-join" class="level2">
<h2 class="anchored" data-anchor-id="left-join">Left Join</h2>
<p>Recall the <code>outcomes</code> and <code>subjects</code> datasets above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">outcomes</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 3
  id    visit outcome
  &lt;chr&gt; &lt;int&gt;   &lt;dbl&gt;
1 a         0   3.74 
2 a         1   4.36 
3 a         2   3.23 
4 b         0   3.22 
5 b         1   0.290
6 b         2   1.33 
7 c         0   3.14 
8 c         1   3.29 
9 c         2   3.39 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">subjects</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  id    house   
  &lt;chr&gt; &lt;chr&gt;   
1 a     detached
2 b     rowhouse
3 c     rowhouse</code></pre>
</div>
</div>
<p>Suppose we want to create a table that combines the information about houses (<code>subjects</code>) with the information about the outcomes (<code>outcomes</code>).</p>
<p>We can use the <code>left_join()</code> function to merge the <code>outcomes</code> and <code>subjects</code> tables and produce the output above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> outcomes, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> subjects, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 4
  id    visit outcome house   
  &lt;chr&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;   
1 a         0   3.74  detached
2 a         1   4.36  detached
3 a         2   3.23  detached
4 b         0   3.22  rowhouse
5 b         1   0.290 rowhouse
6 b         2   1.33  rowhouse
7 c         0   3.14  rowhouse
8 c         1   3.29  rowhouse
9 c         2   3.39  rowhouse</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>by</code> argument indicates the column (or columns) that the two tables have in common.</p>
</div>
</div>
<section id="left-join-with-incomplete-data" class="level3">
<h3 class="anchored" data-anchor-id="left-join-with-incomplete-data">Left Join with Incomplete Data</h3>
<p>In the previous examples, the <code>subjects</code> table didn’t have a <code>visit</code> column. But suppose it did? Maybe people move around during the study. We could image a table like this one.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">subjects <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb11-2">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>),</span>
<span id="cb11-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">visit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb11-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">house =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"detached"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rowhouse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rowhouse"</span>),</span>
<span id="cb11-5">)</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(subjects)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
  id    visit house   
  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;   
1 a         0 detached
2 b         1 rowhouse
3 c         0 rowhouse</code></pre>
</div>
</div>
<p>When we left joint the tables now we get:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(outcomes, subjects, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visit"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 4
  id    visit outcome house   
  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   
1 a         0   3.74  detached
2 a         1   4.36  &lt;NA&gt;    
3 a         2   3.23  &lt;NA&gt;    
4 b         0   3.22  &lt;NA&gt;    
5 b         1   0.290 rowhouse
6 b         2   1.33  &lt;NA&gt;    
7 c         0   3.14  rowhouse
8 c         1   3.29  &lt;NA&gt;    
9 c         2   3.39  &lt;NA&gt;    </code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Two things to point out here:</p>
<ol type="1">
<li><p>If we do not have information about a subject’s housing in a given visit, the <code>left_join()</code> function automatically inserts an <code>NA</code> value to indicate that it is missing.</p></li>
<li><p>We can “join” on multiple variable (e.g.&nbsp;here we joined on the <code>id</code> and the <code>visit</code> columns).</p></li>
</ol>
</div>
</div>
<p>We may even have a situation where we are missing housing data for a subject completely. The following table has no information about subject <code>a</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">subjects <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb15-2">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>),</span>
<span id="cb15-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">visit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb15-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">house =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rowhouse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rowhouse"</span>),</span>
<span id="cb15-5">)</span>
<span id="cb15-6"></span>
<span id="cb15-7">subjects</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  id    visit house   
  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;   
1 b         1 rowhouse
2 c         0 rowhouse</code></pre>
</div>
</div>
<p>But we can still join the tables together and the <code>house</code> values for subject <code>a</code> will all be <code>NA</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> outcomes, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> subjects, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visit"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 4
  id    visit outcome house   
  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   
1 a         0   3.74  &lt;NA&gt;    
2 a         1   4.36  &lt;NA&gt;    
3 a         2   3.23  &lt;NA&gt;    
4 b         0   3.22  &lt;NA&gt;    
5 b         1   0.290 rowhouse
6 b         2   1.33  &lt;NA&gt;    
7 c         0   3.14  rowhouse
8 c         1   3.29  &lt;NA&gt;    
9 c         2   3.39  &lt;NA&gt;    </code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>The bottom line for <code>left_join()</code> is that it <strong>always retains the values in the “left” argument</strong> (in this case the <code>outcomes</code> table).</p>
<ul>
<li>If there are no corresponding values in the “right” argument, <code>NA</code> values will be filled in.</li>
</ul>
</div>
</div>
</section>
</section>
<section id="inner-join" class="level2">
<h2 class="anchored" data-anchor-id="inner-join">Inner Join</h2>
<p>The <code>inner_join()</code> function only <strong>retains the rows of both tables</strong> that have corresponding values. Here we can see the difference.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> outcomes, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> subjects, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visit"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  id    visit outcome house   
  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   
1 b         1   0.290 rowhouse
2 c         0   3.14  rowhouse</code></pre>
</div>
</div>
</section>
<section id="right-join" class="level2">
<h2 class="anchored" data-anchor-id="right-join">Right Join</h2>
<p>The <code>right_join()</code> function is like the <code>left_join()</code> function except that it <strong>gives priority to the “right” hand argument</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">right_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> outcomes, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> subjects, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visit"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  id    visit outcome house   
  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   
1 b         1   0.290 rowhouse
2 c         0   3.14  rowhouse</code></pre>
</div>
</div>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<ul>
<li><p><code>left_join()</code> is useful for merging a “large” data frame with a “smaller” one while retaining all the rows of the “large” data frame</p></li>
<li><p><code>inner_join()</code> gives you the intersection of the rows between two data frames</p></li>
<li><p><code>right_join()</code> is like <code>left_join()</code> with the arguments reversed (likely only useful at the end of a pipeline)</p></li>
</ul>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>If you had three data frames to combine with a shared key, how would you join them using the verbs you now know?</p></li>
<li><p>Using <code>df1</code> and <code>df2</code> below, what is the difference between <code>inner_join(df1, df2)</code>, <code>semi_join(df1, df2)</code> and <code>anti_join(df1, df2)</code>?</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create first example data frame</span></span>
<span id="cb23-2">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb23-3">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a3"</span>))</span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create second example data frame</span></span>
<span id="cb23-5">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb23-6">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b3"</span>))</span></code></pre></div>
</div>
<ol start="3" type="1">
<li>Try changing the order from the above e.g.&nbsp;<code>inner_join(df2, df1)</code>, <code>semi_join(df2, df1)</code> and <code>anti_join(df2, df1)</code>. What changed? What did not change?</li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-joining-data-in-r-basics" class="uri">https://rdpeng.github.io/Biostat776/lecture-joining-data-in-r-basics</a></li>
<li><a href="https://r4ds.had.co.nz/relational-data" class="uri">https://r4ds.had.co.nz/relational-data</a></li>
<li><a href="https://rafalab.github.io/dsbook/joining-tables" class="uri">https://rafalab.github.io/dsbook/joining-tables</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 2</category>
  <category>week 2</category>
  <category>R</category>
  <category>programming</category>
  <category>dplyr</category>
  <category>here</category>
  <category>tidyverse</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-08-joining-data-in-r/index.html</guid>
  <pubDate>Thu, 08 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Tidy data and the Tidyverse</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-08-tidy-data-and-the-tidyverse/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<blockquote class="blockquote">
<p>“Happy families are all alike; every unhappy family is unhappy in its own way.” —- Leo Tolstoy</p>
</blockquote>
<blockquote class="blockquote">
<p>“Tidy datasets are all alike, but every messy dataset is messy in its own way.” —- Hadley Wickham</p>
</blockquote>
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://www.jstatsoft.org/article/view/v059i10">Tidy Data</a> paper published in the Journal of Statistical Software</li>
<li><a href="https://r4ds.had.co.nz/tidy-data" class="uri">https://r4ds.had.co.nz/tidy-data</a></li>
<li><a href="http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf">tidyr cheat sheet from RStudio</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-tidy-data-and-the-tidyverse" class="uri">https://rdpeng.github.io/Biostat776/lecture-tidy-data-and-the-tidyverse</a></li>
<li><a href="https://r4ds.had.co.nz/tidy-data" class="uri">https://r4ds.had.co.nz/tidy-data</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Define tidy data</li>
<li>Be able to transform non-tidy data into tidy data</li>
<li>Be able to transform wide data into long data</li>
<li>Be able to separate character columns into multiple columns</li>
<li>Be able to unite multiple character columns into one column</li>
</ul>
</div>
</div>
</section>
<section id="tidy-data" class="level1">
<h1>Tidy data</h1>
<p>As we learned in the last lesson, one unifying concept of the tidyverse is the notion of <strong>tidy data</strong>.</p>
<p>As defined by Hadley Wickham in his 2014 paper published in the <em>Journal of Statistical Software</em>, a <a href="https://www.jstatsoft.org/article/view/v059i10">tidy dataset</a> has the following properties:</p>
<ol type="1">
<li><p>Each variable forms a column.</p></li>
<li><p>Each observation forms a row.</p></li>
<li><p>Each type of observational unit forms a table.</p></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-08-tidy-data-and-the-tidyverse/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/tidydata_1.jpg" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="figure-caption">Artwork by Allison Horst on tidy data</figcaption>
</figure>
</div>
<p>[<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
<p>The <strong>purpose of defining tidy data</strong> is to highlight the fact that <strong>most data do not start out life as tidy</strong>.</p>
<p>In fact, much of the work of data analysis may involve simply making the data tidy (at least this has been our experience).</p>
<ul>
<li>Once a dataset is tidy, it <strong>can be used as input into a variety of other functions</strong> that may transform, model, or visualize the data.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>As a quick example, consider the following data illustrating <strong>religion and income survey data</strong> with the number of respondents with income range in column name.</p>
<p>This is in a classic table format:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-2">relig_income</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 18 × 11
   religion      `&lt;$10k` $10-2…¹ $20-3…² $30-4…³ $40-5…⁴ $50-7…⁵ $75-1…⁶ $100-…⁷
   &lt;chr&gt;           &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
 1 Agnostic           27      34      60      81      76     137     122     109
 2 Atheist            12      27      37      52      35      70      73      59
 3 Buddhist           27      21      30      34      33      58      62      39
 4 Catholic          418     617     732     670     638    1116     949     792
 5 Don’t know/r…      15      14      15      11      10      35      21      17
 6 Evangelical …     575     869    1064     982     881    1486     949     723
 7 Hindu               1       9       7       9      11      34      47      48
 8 Historically…     228     244     236     238     197     223     131      81
 9 Jehovah's Wi…      20      27      24      24      21      30      15      11
10 Jewish             19      19      25      25      30      95      69      87
11 Mainline Prot     289     495     619     655     651    1107     939     753
12 Mormon             29      40      48      51      56     112      85      49
13 Muslim              6       7       9      10       9      23      16       8
14 Orthodox           13      17      23      32      32      47      38      42
15 Other Christ…       9       7      11      13      13      14      18      14
16 Other Faiths       20      33      40      46      49      63      46      40
17 Other World …       5       2       3       4       2       7       3       4
18 Unaffiliated      217     299     374     365     341     528     407     321
# … with 2 more variables: `&gt;150k` &lt;dbl&gt;, `Don't know/refused` &lt;dbl&gt;, and
#   abbreviated variable names ¹​`$10-20k`, ²​`$20-30k`, ³​`$30-40k`, ⁴​`$40-50k`,
#   ⁵​`$50-75k`, ⁶​`$75-100k`, ⁷​`$100-150k`</code></pre>
</div>
</div>
</div>
</div>
<p>While this format is canonical and is useful for quickly observing the relationship between multiple variables, it is not tidy.</p>
<p><strong>This format violates the tidy form</strong> because there are variables in the columns.</p>
<ul>
<li>In this case the variables are religion, income bracket, and the number of respondents, which is the third variable, is presented inside the table.</li>
</ul>
<p>Converting this data to tidy format would give us</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb3-2"></span>
<span id="cb3-3">relig_income <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>religion, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"respondents"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">religion =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(religion), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">income =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(income))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 180 × 3
   religion income             respondents
   &lt;fct&gt;    &lt;fct&gt;                    &lt;dbl&gt;
 1 Agnostic &lt;$10k                       27
 2 Agnostic $10-20k                     34
 3 Agnostic $20-30k                     60
 4 Agnostic $30-40k                     81
 5 Agnostic $40-50k                     76
 6 Agnostic $50-75k                    137
 7 Agnostic $75-100k                   122
 8 Agnostic $100-150k                  109
 9 Agnostic &gt;150k                       84
10 Agnostic Don't know/refused          96
# … with 170 more rows</code></pre>
</div>
</div>
<p>Some of these functions you have seen before, others might be new to you. Let’s talk about each one in the context of the <code>tidyverse</code> R packages.</p>
</section>
<section id="the-tidyverse" class="level1">
<h1>The “Tidyverse”</h1>
<p>There are a number of R packages that take advantage of the tidy data form and can be used to do interesting things with data. Many (but not all) of these packages are written by Hadley Wickham and <strong>the collection of packages is often referred to as the “tidyverse”</strong> because of their <strong>dependence on and presumption of tidy data</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>A subset of the “Tidyverse” packages include:</p>
<ul>
<li><p><a href="https://cran.r-project.org/package=ggplot2">ggplot2</a>: a plotting system based on the grammar of graphics</p></li>
<li><p><a href="https://cran.r-project.org/package=magrittr%22">magrittr</a>: defines the <code>%&gt;%</code> operator for chaining functions together in a series of operations on data</p></li>
<li><p><a href="https://cran.r-project.org/package=dplyr">dplyr</a>: a suite of (fast) functions for working with data frames</p></li>
<li><p><a href="https://cran.r-project.org/package=tidyr">tidyr</a>: easily tidy data with <code>pivot_wider()</code> and <code>pivot_longer()</code> functions (also <code>separate()</code> and <code>unite()</code>)</p></li>
</ul>
<p>A complete list can be found here (<a href="https://www.tidyverse.org/packages" class="uri">https://www.tidyverse.org/packages</a>).</p>
</div>
</div>
<p>We will be using these packages quite a bit.</p>
<p>The “tidyverse” package can be used to install all of the packages in the tidyverse at once.</p>
<p>For example, instead of starting an R script with this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span></code></pre></div>
</div>
<p>You can start with this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
<p>In the example above, let’s talk about what we did using the <code>pivot_longer()</code> function.</p>
<p>We will also talk about <code>pivot_wider()</code>.</p>
<section id="pivot_longer" class="level3">
<h3 class="anchored" data-anchor-id="pivot_longer"><code>pivot_longer()</code></h3>
<p>The <code>tidyr</code> package includes functions to transfer a data frame between <em>long</em> and <em>wide</em>.</p>
<ul>
<li><strong>Wide format</strong> data tends to have different attributes or variables describing an observation placed in separate columns.</li>
<li><strong>Long format</strong> data tends to have different attributes encoded as levels of a single variable, followed by another column that contains tha values of the observation at those different levels.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the section above, we showed an example that used <code>pivot_longer()</code> to convert data into a tidy format.</p>
<p>The <strong>key problem</strong> with the tidyness of the data is that the income variables are not in their own columns, but rather are embedded in the structure of the columns.</p>
<p>To <strong>fix this</strong>, you can use the <code>pivot_longer()</code> function to <strong>gather values spread across several columns into a single column</strong>, here with the column names gathered into an <code>income</code> column.</p>
<p><strong>Note</strong>: when gathering, exclude any columns that you do not want “gathered” (<code>religion</code> in this case) by including the column names with a the minus sign in the <code>pivot_longer()</code> function.</p>
<p>For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gather everything EXCEPT religion to tidy data</span></span>
<span id="cb7-2">relig_income <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>religion, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"respondents"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 180 × 3
   religion income             respondents
   &lt;chr&gt;    &lt;chr&gt;                    &lt;dbl&gt;
 1 Agnostic &lt;$10k                       27
 2 Agnostic $10-20k                     34
 3 Agnostic $20-30k                     60
 4 Agnostic $30-40k                     81
 5 Agnostic $40-50k                     76
 6 Agnostic $50-75k                    137
 7 Agnostic $75-100k                   122
 8 Agnostic $100-150k                  109
 9 Agnostic &gt;150k                       84
10 Agnostic Don't know/refused          96
# … with 170 more rows</code></pre>
</div>
</div>
</div>
</div>
<p>Even if your data is in a tidy format, <code>pivot_longer()</code> is occasionally useful for pulling data together to take advantage of faceting, or plotting separate plots based on a grouping variable. We will talk more about that in a future lecture.</p>
</section>
<section id="pivot_wider" class="level3">
<h3 class="anchored" data-anchor-id="pivot_wider"><code>pivot_wider()</code></h3>
<p>The <code>pivot_wider()</code> function is less commonly needed to tidy data. It can, however, be useful for creating summary tables.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>You use the <code>summarize()</code> function in <code>dplyr</code> to summarize the total number of respondents per income category.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">relig_income <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>religion, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"respondents"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">religion =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(religion), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">income =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(income)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(income) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_respondents =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(respondents)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, </span>
<span id="cb9-7">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_respondents"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-8">  knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 11%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 10%">
<col style="width: 21%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: right;">&lt;$10k</th>
<th style="text-align: right;">&gt;150k</th>
<th style="text-align: right;">$10-20k</th>
<th style="text-align: right;">$100-150k</th>
<th style="text-align: right;">$20-30k</th>
<th style="text-align: right;">$30-40k</th>
<th style="text-align: right;">$40-50k</th>
<th style="text-align: right;">$50-75k</th>
<th style="text-align: right;">$75-100k</th>
<th style="text-align: right;">Don’t know/refused</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1930</td>
<td style="text-align: right;">2608</td>
<td style="text-align: right;">2781</td>
<td style="text-align: right;">3197</td>
<td style="text-align: right;">3357</td>
<td style="text-align: right;">3302</td>
<td style="text-align: right;">3085</td>
<td style="text-align: right;">5185</td>
<td style="text-align: right;">3990</td>
<td style="text-align: right;">6121</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Notice in this example how <code>pivot_wider()</code> has been used at the <strong>very end of the code sequence</strong> to convert the summarized data into a shape that <strong>offers a better tabular presentation for a report</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the <code>pivot_wider()</code> call, you first specify the name of the column to use for the new column names (<code>income</code> in this example) and then specify the column to use for the cell values (<code>total_respondents</code> here).</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example of <code>pivot_longer()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let’s try another dataset. This data contain an excerpt of the <a href="https://cran.r-project.org/web/packages/gapminder/README.html#gapminder">Gapminder data</a> on life expectancy, GDP per capita, and population by country.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gapminder)</span>
<span id="cb10-2">gapminder</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,704 × 6
   country     continent  year lifeExp      pop gdpPercap
   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;
 1 Afghanistan Asia       1952    28.8  8425333      779.
 2 Afghanistan Asia       1957    30.3  9240934      821.
 3 Afghanistan Asia       1962    32.0 10267083      853.
 4 Afghanistan Asia       1967    34.0 11537966      836.
 5 Afghanistan Asia       1972    36.1 13079460      740.
 6 Afghanistan Asia       1977    38.4 14880372      786.
 7 Afghanistan Asia       1982    39.9 12881816      978.
 8 Afghanistan Asia       1987    40.8 13867957      852.
 9 Afghanistan Asia       1992    41.7 16317921      649.
10 Afghanistan Asia       1997    41.8 22227415      635.
# … with 1,694 more rows</code></pre>
</div>
</div>
<p>If we wanted to make <code>lifeExp</code>, <code>pop</code> and <code>gdpPercap</code> (all measurements that we observe) go from a wide table into a long table, what would we do?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself</span></span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>One more! Try using <code>pivot_longer()</code> to convert the the following data that contains made-up revenues for three companies by quarter for years 2006 to 2009.</p>
<p>Afterward, use <code>group_by()</code> and <code>summarize()</code> to calculate the average revenue for each company across all years and all quarters.</p>
<p><strong>Bonus</strong>: Calculate a mean revenue for each company AND each year (averaged across all 4 quarters).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb13-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"company"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), </span>
<span id="cb13-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2006</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2009</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb13-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1"</span>    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),</span>
<span id="cb13-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2"</span>    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),</span>
<span id="cb13-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q3"</span>    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),</span>
<span id="cb13-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q4"</span>    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),</span>
<span id="cb13-8">)</span>
<span id="cb13-9">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 12 × 6
   company  year    Q1    Q2    Q3    Q4
     &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;
 1       1  2006    94    95    50    87
 2       1  2007    73    16    86    82
 3       1  2008    64    50    85    61
 4       1  2009     6     4    87     1
 5       2  2006    88    24    74    52
 6       2  2007    32    98    52    94
 7       2  2008     4    42    79     3
 8       2  2009    23    97    71    76
 9       3  2006     1    75    97    66
10       3  2007    30    87    58     5
11       3  2008    17    91    61    70
12       3  2009    14    12     1    60</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try it yourself </span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="separate-and-unite" class="level3">
<h3 class="anchored" data-anchor-id="separate-and-unite"><code>separate()</code> and <code>unite()</code></h3>
<p>The same <code>tidyr</code> package also contains two useful functions:</p>
<ul>
<li><code>unite()</code>: combine contents of two or more columns into a single column</li>
<li><code>separate()</code>: separate contents of a column into two or more columns</li>
</ul>
<p>First, we combine the first three columns into one new column using <code>unite()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">gapminder <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unite</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country_continent_year"</span>, </span>
<span id="cb16-3">        country<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>year, </span>
<span id="cb16-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,704 × 4
   country_continent_year lifeExp      pop gdpPercap
   &lt;chr&gt;                    &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;
 1 Afghanistan_Asia_1952     28.8  8425333      779.
 2 Afghanistan_Asia_1957     30.3  9240934      821.
 3 Afghanistan_Asia_1962     32.0 10267083      853.
 4 Afghanistan_Asia_1967     34.0 11537966      836.
 5 Afghanistan_Asia_1972     36.1 13079460      740.
 6 Afghanistan_Asia_1977     38.4 14880372      786.
 7 Afghanistan_Asia_1982     39.9 12881816      978.
 8 Afghanistan_Asia_1987     40.8 13867957      852.
 9 Afghanistan_Asia_1992     41.7 16317921      649.
10 Afghanistan_Asia_1997     41.8 22227415      635.
# … with 1,694 more rows</code></pre>
</div>
</div>
<p>Next, we show how to separate the columns into three separate columns using <code>separate()</code> using the <code>col</code>, <code>into</code> and <code>sep</code> arguments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">gapminder <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unite</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country_continent_year"</span>, </span>
<span id="cb18-3">        country<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>year, </span>
<span id="cb18-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country_continent_year"</span>, </span>
<span id="cb18-6">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">into=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continent"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>), </span>
<span id="cb18-7">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,704 × 6
   country     continent year  lifeExp      pop gdpPercap
   &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;
 1 Afghanistan Asia      1952     28.8  8425333      779.
 2 Afghanistan Asia      1957     30.3  9240934      821.
 3 Afghanistan Asia      1962     32.0 10267083      853.
 4 Afghanistan Asia      1967     34.0 11537966      836.
 5 Afghanistan Asia      1972     36.1 13079460      740.
 6 Afghanistan Asia      1977     38.4 14880372      786.
 7 Afghanistan Asia      1982     39.9 12881816      978.
 8 Afghanistan Asia      1987     40.8 13867957      852.
 9 Afghanistan Asia      1992     41.7 16317921      649.
10 Afghanistan Asia      1997     41.8 22227415      635.
# … with 1,694 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Using prose, describe how the variables and observations are organised in a tidy dataset versus an non-tidy dataset.</p></li>
<li><p>What do the extra and fill arguments do in <code>separate()</code>? Experiment with the various options for the following two toy datasets.</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a,b,c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d,e,f,g"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h,i,j"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"three"</span>))</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a,b,c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d,e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f,g,i"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"three"</span>))</span></code></pre></div>
</div>
<ol start="3" type="1">
<li><p>Both <code>unite()</code> and <code>separate()</code> have a remove argument. What does it do? Why would you set it to FALSE?</p></li>
<li><p>Compare and contrast <code>separate()</code> and <code>extract()</code>. Why are there three variations of separation (by position, by separator, and with groups), but only one <code>unite()</code>?</p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://www.jstatsoft.org/article/view/v059i10">Tidy Data</a> paper published in the Journal of Statistical Software</li>
<li>https://r4ds.had.co.nz/tidy-data.html</li>
<li><a href="http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf">tidyr cheat sheet from RStudio</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 2</category>
  <category>week 2</category>
  <category>R</category>
  <category>programming</category>
  <category>tidyr</category>
  <category>here</category>
  <category>tidyverse</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-08-tidy-data-and-the-tidyverse/index.html</guid>
  <pubDate>Thu, 08 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Managing data frames with the Tidyverse</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-06-managing-data-frames-with-tidyverse/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://r4ds.had.co.nz/tibbles" class="uri">https://r4ds.had.co.nz/tibbles</a></li>
<li><a href="https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling" class="uri">https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling</a></li>
<li><a href="http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf">dplyr cheat sheet from RStudio</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-managing-data-frames-with-the-tidyverse" class="uri">https://rdpeng.github.io/Biostat776/lecture-managing-data-frames-with-the-tidyverse</a></li>
<li><a href="https://jhudatascience.org/tidyversecourse/get-data.html#tibbles" class="uri">https://jhudatascience.org/tidyversecourse/get-data.html#tibbles</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Understand the advantages of a <code>tibble</code> and <code>data.frame</code> data objects in R</li>
<li>Learn about the dplyr R package to manage data frames</li>
<li>Recognize the key verbs to manage data frames in dplyr</li>
<li>Use the “pipe” operator to combine verbs together</li>
</ul>
</div>
</div>
</section>
<section id="data-frames" class="level1">
<h1>Data Frames</h1>
<p>The <strong>data frame</strong> (or <code>data.frame</code>) is a <strong>key data structure</strong> in statistics and in R.</p>
<p>The basic structure of a data frame is that there is <strong>one observation per row and each column represents a variable, a measure, feature, or characteristic of that observation</strong>.</p>
<p>R has an internal implementation of data frames that is likely the one you will use most often. However, there are packages on CRAN that implement data frames via things like relational databases that allow you to operate on very, very large data frames (but we will not discuss them here).</p>
<p>Given the importance of managing data frames, it is <strong>important that we have good tools for dealing with them.</strong></p>
<p>For example, <strong>operations</strong> like filtering rows, re-ordering rows, and selecting columns, can often be tedious operations in R whose syntax is not very intuitive. The <code>dplyr</code> package is designed to mitigate a lot of these problems and to provide a highly optimized set of routines specifically for dealing with data frames.</p>
<section id="tibbles" class="level2">
<h2 class="anchored" data-anchor-id="tibbles">Tibbles</h2>
<p>Another type of data structure that we need to discuss is called the <strong>tibble</strong>! It’s best to think of tibbles as an updated and stylish version of the <code>data.frame</code>.</p>
<p>Tibbles are what tidyverse packages work with most seamlessly. Now, that <strong>does not mean tidyverse packages <em>require</em> tibbles</strong>.</p>
<p>In fact, they still work with <code>data.frames</code>, but the more you work with tidyverse and tidyverse-adjacent packages, the more you will see the advantages of using tibbles.</p>
<p>Before we go any further, tibbles <em>are</em> data frames, but they have some new bells and whistles to make your life easier.</p>
<section id="how-tibbles-differ-from-data.frame" class="level3">
<h3 class="anchored" data-anchor-id="how-tibbles-differ-from-data.frame">How tibbles differ from <code>data.frame</code></h3>
<p>There are a number of differences between tibbles and <code>data.frames</code>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>To see a full vignette about tibbles and how they differ from data.frame, you will want to execute <code>vignette("tibble")</code> and read through that vignette.</p>
</div>
</div>
<p>We will summarize some of the most important points here:</p>
<ul>
<li><strong>Input type remains unchanged</strong> - <code>data.frame</code> is notorious for treating strings as factors; this will not happen with tibbles</li>
<li><strong>Variable names remain unchanged</strong> - In base R, creating <code>data.frames</code> will remove spaces from names, converting them to periods or add “x” before numeric column names. Creating tibbles will not change variable (column) names.</li>
<li><strong>There are no <code>row.names()</code> for a tibble</strong> - Tidy data requires that variables be stored in a consistent way, removing the need for row names.</li>
<li><strong>Tibbles print first ten rows and columns that fit on one screen</strong> - Printing a tibble to screen will never print the entire huge data frame out. By default, it just shows what fits to your screen.</li>
</ul>
</section>
</section>
<section id="creating-a-tibble" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-tibble">Creating a tibble</h2>
<p>The tibble package is part of the <code>tidyverse</code> and can thus be loaded in (once installed) using:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
<section id="as_tibble" class="level3">
<h3 class="anchored" data-anchor-id="as_tibble"><code>as_tibble()</code></h3>
<p>Since many packages use the historical <code>data.frame</code> from base R, you will often find yourself in the situation that you have a <code>data.frame</code> and want to convert that <code>data.frame</code> to a <code>tibbl</code>e.</p>
<p>To do so, the <code>as_tibble()</code> function is exactly what you are looking for.</p>
<p>For the example, here we use a dataset (<code>chicago.rds</code>) containing air pollution and temperature data for the city of Chicago in the U.S.</p>
<p>The dataset is available in the <code>/data</code> repository. You can load the data into R using the <code>readRDS()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>here() starts at /Users/stephaniehicks/Documents/github/teaching/jhustatcomputing2022</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">chicago <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chicago.rds"</span>))</span></code></pre></div>
</div>
<p>You can see some basic characteristics of the dataset with the <code>dim()</code> and <code>str()</code> functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(chicago)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 6940    8</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(chicago)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   6940 obs. of  8 variables:
 $ city      : chr  "chic" "chic" "chic" "chic" ...
 $ tmpd      : num  31.5 33 33 29 32 40 34.5 29 26.5 32.5 ...
 $ dptp      : num  31.5 29.9 27.4 28.6 28.9 ...
 $ date      : Date, format: "1987-01-01" "1987-01-02" ...
 $ pm25tmean2: num  NA NA NA NA NA NA NA NA NA NA ...
 $ pm10tmean2: num  34 NA 34.2 47 NA ...
 $ o3tmean2  : num  4.25 3.3 3.33 4.38 4.75 ...
 $ no2tmean2 : num  20 23.2 23.8 30.4 30.3 ...</code></pre>
</div>
</div>
<p>We see this data structure is a <code>data.frame</code> with 6940 observations and 8 variables.</p>
<p>To convert this <code>data.frame</code> to a tibble you would use the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(chicago))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [6,940 × 8] (S3: tbl_df/tbl/data.frame)
 $ city      : chr [1:6940] "chic" "chic" "chic" "chic" ...
 $ tmpd      : num [1:6940] 31.5 33 33 29 32 40 34.5 29 26.5 32.5 ...
 $ dptp      : num [1:6940] 31.5 29.9 27.4 28.6 28.9 ...
 $ date      : Date[1:6940], format: "1987-01-01" "1987-01-02" ...
 $ pm25tmean2: num [1:6940] NA NA NA NA NA NA NA NA NA NA ...
 $ pm10tmean2: num [1:6940] 34 NA 34.2 47 NA ...
 $ o3tmean2  : num [1:6940] 4.25 3.3 3.33 4.38 4.75 ...
 $ no2tmean2 : num [1:6940] 20 23.2 23.8 30.4 30.3 ...</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Tibbles, by default, <strong>only print the first ten rows to screen</strong>.</p>
<p>If you were to print the <code>data.frame</code> <code>chicago</code> to screen, all 6940 rows would be displayed. When working with large <code>data.frames</code>, this <strong>default behavior can be incredibly frustrating</strong>.</p>
<p>Using tibbles removes this frustration because of the default settings for tibble printing.</p>
</div>
</div>
<p>Additionally, you will note that the <strong>type of the variable is printed for each variable in the tibble</strong>. This helpful feature is another added bonus of tibbles relative to <code>data.frame</code>.</p>
<section id="want-to-see-more-of-the-tibble" class="level4">
<h4 class="anchored" data-anchor-id="want-to-see-more-of-the-tibble">Want to see more of the tibble?</h4>
<p>If you <em>do</em> want to see more rows from the tibble, there are a few options!</p>
<ol type="1">
<li>The <code>View()</code> function in RStudio is incredibly helpful. The input to this function is the <code>data.frame</code> or tibble you would like to see.</li>
</ol>
<p>Specifically, <code>View(chicago)</code> would provide you, the viewer, with a scrollable view (in a new tab) of the complete dataset.</p>
<ol start="2" type="1">
<li>Use the fact that <code>print()</code> enables you to specify how many rows and columns you would like to display.</li>
</ol>
<p>Here, we again display the <code>chicago</code> data.frame as a tibble but specify that we would only like to see 5 rows. The <code>width = Inf</code> argument specifies that we would like to see all the possible columns. Here, there are only 8, but for larger datasets, this can be helpful to specify.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(chicago) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6,940 × 8
  city   tmpd  dptp date       pm25tmean2 pm10tmean2 o3tmean2 no2tmean2
  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt;          &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;
1 chic   31.5  31.5 1987-01-01         NA       34       4.25      20.0
2 chic   33    29.9 1987-01-02         NA       NA       3.30      23.2
3 chic   33    27.4 1987-01-03         NA       34.2     3.33      23.8
4 chic   29    28.6 1987-01-04         NA       47       4.38      30.4
5 chic   32    28.9 1987-01-05         NA       NA       4.75      30.3
# … with 6,935 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="tibble" class="level3">
<h3 class="anchored" data-anchor-id="tibble"><code>tibble()</code></h3>
<p>Alternatively, you can <strong>create a tibble on the fly</strong> by using <code>tibble()</code> and specifying the information you would like stored in each column.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you provide a single value, this value will be repeated across all rows of the tibble. This is referred to as “recycling inputs of length 1.”</p>
<p>In the example here, we see that the column <code>c</code> will contain the value ‘1’ across all rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb13-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb13-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> (a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb13-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 4
      a     b     c     z
  &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;
1     1     6     1    50
2     2     7     1    82
3     3     8     1   122
4     4     9     1   170
5     5    10     1   226</code></pre>
</div>
</div>
</div>
</div>
<p>The <code>tibble()</code> function allows you to quickly generate tibbles and even allows you to <strong>reference columns within the tibble you are creating</strong>, as seen in column z of the example above.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Tibbles can have column names that are not allowed</strong> in <code>data.frame</code>.</p>
<p>In the example below, we see that to utilize a nontraditional variable name, you surround the column name with backticks.</p>
<p>Note that to refer to such columns in other tidyverse packages, you willl continue to use backticks surrounding the variable name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb15-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">two words</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb15-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">12</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>,</span>
<span id="cb15-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"smile"</span>,</span>
<span id="cb15-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 3
  `two words` `12`    `:)` 
        &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;
1           1 numeric smile
2           2 numeric smile
3           3 numeric smile
4           4 numeric smile
5           5 numeric smile</code></pre>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="subsetting-tibbles" class="level2">
<h2 class="anchored" data-anchor-id="subsetting-tibbles">Subsetting tibbles</h2>
<p>Subsetting tibbles also differs slightly from how subsetting occurs with <code>data.frame</code>.</p>
<p>When it comes to tibbles,</p>
<ul>
<li><code>[[</code> can subset by name or position</li>
<li><code>$</code> only subsets by name</li>
</ul>
<p>For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb17-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb17-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb17-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb17-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> (a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb17-6">)</span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract by name using $ or [[]]</span></span>
<span id="cb17-9">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  50  82 122 170 226</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  50  82 122 170 226</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract by position requires [[]]</span></span>
<span id="cb21-2">df[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  50  82 122 170 226</code></pre>
</div>
</div>
<p>Having now discussed tibbles, which are the type of object most tidyverse and tidyverse-adjacent packages work best with, we now know the goal.</p>
<p>In many cases, <strong>tibbles are ultimately what we want to work with in R</strong>.</p>
<p>However, <strong>data are stored in many different formats outside of R</strong>. We will spend the rest of this lesson discussing wrangling functions that work either a <code>data.frame</code> or <code>tibble</code>.</p>
</section>
</section>
<section id="the-dplyr-package" class="level1">
<h1>The <code>dplyr</code> Package</h1>
<p>The <code>dplyr</code> package was developed by Posit (formely RStudio) and is <strong>an optimized and distilled</strong> version of the older <code>plyr</code> <strong>package for data manipulation or wrangling</strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-06-managing-data-frames-with-tidyverse/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_wrangling.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="figure-caption">Artwork by Allison Horst on the dplyr package</figcaption>
</figure>
</div>
<p>[<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
<p>The <code>dplyr</code> package does not provide any “new” functionality to R per se, in the sense that everything <code>dplyr</code> does could already be done with base R, but it <strong>greatly</strong> simplifies existing functionality in R.</p>
<p>One important contribution of the <code>dplyr</code> package is that it <strong>provides a “grammar” (in particular, verbs) for data manipulation and for operating on data frames</strong>.</p>
<p>With this grammar, you can sensibly communicate what it is that you are doing to a data frame that other people can understand (assuming they also know the grammar). This is useful because it <strong>provides an abstraction for data manipulation that previously did not exist</strong>.</p>
<p>Another useful contribution is that the <code>dplyr</code> functions are <strong>very</strong> fast, as many key operations are coded in C++.</p>
<section id="dplyr-grammar" class="level3">
<h3 class="anchored" data-anchor-id="dplyr-grammar"><code>dplyr</code> grammar</h3>
<p>Some of the key “verbs” provided by the <code>dplyr</code> package are</p>
<ul>
<li><p><code>select()</code>: return a subset of the columns of a data frame, using a flexible notation</p></li>
<li><p><code>filter()</code>: extract a subset of rows from a data frame based on logical conditions</p></li>
<li><p><code>arrange()</code>: reorder rows of a data frame</p></li>
<li><p><code>rename()</code>: rename variables in a data frame</p></li>
<li><p><code>mutate()</code>: add new variables/columns or transform existing variables</p></li>
<li><p><code>summarise()</code> / <code>summarize()</code>: generate summary statistics of different variables in the data frame, possibly within strata</p></li>
<li><p><code>%&gt;%</code>: the “pipe” operator is used to connect multiple verb actions together into a pipeline</p></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>dplyr</code> package as a number of its own data types that it takes advantage of.</p>
<p>For example, there is a handy <code>print()</code> method that prevents you from printing a lot of data to the console. Most of the time, these additional data types are transparent to the user and do not need to be worried about.</p>
</div>
</div>
</section>
<section id="dplyr-functions" class="level3">
<h3 class="anchored" data-anchor-id="dplyr-functions"><code>dplyr</code> functions</h3>
<p>All of the functions that we will discuss here will have a few common characteristics. In particular,</p>
<ol type="1">
<li><p>The <strong>first argument</strong> is a data frame type object.</p></li>
<li><p>The <strong>subsequent arguments</strong> describe what to do with the data frame specified in the first argument, and you can refer to columns in the data frame directly (without using the <code>$</code> operator, just use the column names).</p></li>
<li><p>The <strong>return result</strong> of a function is a new data frame.</p></li>
<li><p>Data frames must be <strong>properly formatted</strong> and annotated for this to all be useful. In particular, the data must be <a href="http://www.jstatsoft.org/v59/i10/paper">tidy</a>. In short, there should be one observation per row, and each column should represent a feature or characteristic of that observation.</p></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-06-managing-data-frames-with-tidyverse/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/tidydata_1.jpg" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="figure-caption">Artwork by Allison Horst on tidy data</figcaption>
</figure>
</div>
<p>[<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
</section>
<section id="dplyr-installation" class="level3">
<h3 class="anchored" data-anchor-id="dplyr-installation"><code>dplyr</code> installation</h3>
<p>The <code>dplyr</code> package can be installed from CRAN or from GitHub using the <code>devtools</code> package and the <code>install_github()</code> function. The GitHub repository will usually contain the latest updates to the package and the development version.</p>
<p>To install from CRAN, just run</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>)</span></code></pre></div>
</div>
<p>The <code>dplyr</code> package is also installed when you install the <code>tidyverse</code> meta-package.</p>
<p>After installing the package it is important that you load it into your R session with the <code>library()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
</div>
<p>You may get some warnings when the package is loaded because there are functions in the <code>dplyr</code> package that have the same name as functions in other packages. For now you can ignore the warnings.</p>
</section>
<section id="select" class="level3">
<h3 class="anchored" data-anchor-id="select"><code>select()</code></h3>
<p>We will continue to use the <code>chicago</code> dataset containing air pollution and temperature data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">chicago <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(chicago)</span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(chicago)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [6,940 × 8] (S3: tbl_df/tbl/data.frame)
 $ city      : chr [1:6940] "chic" "chic" "chic" "chic" ...
 $ tmpd      : num [1:6940] 31.5 33 33 29 32 40 34.5 29 26.5 32.5 ...
 $ dptp      : num [1:6940] 31.5 29.9 27.4 28.6 28.9 ...
 $ date      : Date[1:6940], format: "1987-01-01" "1987-01-02" ...
 $ pm25tmean2: num [1:6940] NA NA NA NA NA NA NA NA NA NA ...
 $ pm10tmean2: num [1:6940] 34 NA 34.2 47 NA ...
 $ o3tmean2  : num [1:6940] 4.25 3.3 3.33 4.38 4.75 ...
 $ no2tmean2 : num [1:6940] 20 23.2 23.8 30.4 30.3 ...</code></pre>
</div>
</div>
<p>The <code>select()</code> function can be used to <strong>select columns of a data frame</strong> that you want to focus on.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Suppose we wanted to take the first 3 columns only. There are a few ways to do this.</p>
<p>We could for example use numerical indices:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(chicago)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "city" "tmpd" "dptp"</code></pre>
</div>
</div>
<p>But we can also use the names directly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">subset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(chicago, city<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>dptp)</span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(subset)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
  city   tmpd  dptp
  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;
1 chic   31.5  31.5
2 chic   33    29.9
3 chic   33    27.4
4 chic   29    28.6
5 chic   32    28.9
6 chic   40    35.1</code></pre>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>:</code> normally cannot be used with names or strings, but inside the <code>select()</code> function you can use it to specify a range of variable names.</p>
</div>
</div>
<p>You can also <strong>omit</strong> variables using the <code>select()</code> function by using the negative sign. With <code>select()</code> you can do</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(chicago, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(city<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>dptp))</span></code></pre></div>
</div>
<p>which indicates that we should include every variable <em>except</em> the variables <code>city</code> through <code>dptp</code>. The equivalent code in base R would be</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"city"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(chicago))</span>
<span id="cb32-2">j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dptp"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(chicago))</span>
<span id="cb32-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(chicago[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>j)])</span></code></pre></div>
</div>
<p>Not super intuitive, right?</p>
<p>The <code>select()</code> function also allows a special syntax that allows you to specify variable names based on patterns. So, for example, if you wanted to keep every variable that ends with a “2”, we could do</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">subset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(chicago, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>))</span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(subset)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [6,940 × 4] (S3: tbl_df/tbl/data.frame)
 $ pm25tmean2: num [1:6940] NA NA NA NA NA NA NA NA NA NA ...
 $ pm10tmean2: num [1:6940] 34 NA 34.2 47 NA ...
 $ o3tmean2  : num [1:6940] 4.25 3.3 3.33 4.38 4.75 ...
 $ no2tmean2 : num [1:6940] 20 23.2 23.8 30.4 30.3 ...</code></pre>
</div>
</div>
<p>Or if we wanted to keep every variable that starts with a “d”, we could do</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">subset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(chicago, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>))</span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(subset)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [6,940 × 2] (S3: tbl_df/tbl/data.frame)
 $ dptp: num [1:6940] 31.5 29.9 27.4 28.6 28.9 ...
 $ date: Date[1:6940], format: "1987-01-01" "1987-01-02" ...</code></pre>
</div>
</div>
<p>You can also use more general regular expressions if necessary. See the help page (<code>?select</code>) for more details.</p>
</section>
<section id="filter" class="level3">
<h3 class="anchored" data-anchor-id="filter"><code>filter()</code></h3>
<p>The <code>filter()</code> function is used to <strong>extract subsets of rows</strong> from a data frame. This function is similar to the existing <code>subset()</code> function in R but is quite a bit faster in my experience.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-06-managing-data-frames-with-tidyverse/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_filter.jpg" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="figure-caption">Artwork by Allison Horst on filter() function</figcaption>
</figure>
</div>
<p>[<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Suppose we wanted to extract the rows of the <code>chicago</code> data frame where the levels of PM2.5 are greater than 30 (which is a reasonably high level), we could do</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">chic.f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(chicago, pm25tmean2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb37-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(chic.f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [194 × 8] (S3: tbl_df/tbl/data.frame)
 $ city      : chr [1:194] "chic" "chic" "chic" "chic" ...
 $ tmpd      : num [1:194] 23 28 55 59 57 57 75 61 73 78 ...
 $ dptp      : num [1:194] 21.9 25.8 51.3 53.7 52 56 65.8 59 60.3 67.1 ...
 $ date      : Date[1:194], format: "1998-01-17" "1998-01-23" ...
 $ pm25tmean2: num [1:194] 38.1 34 39.4 35.4 33.3 ...
 $ pm10tmean2: num [1:194] 32.5 38.7 34 28.5 35 ...
 $ o3tmean2  : num [1:194] 3.18 1.75 10.79 14.3 20.66 ...
 $ no2tmean2 : num [1:194] 25.3 29.4 25.3 31.4 26.8 ...</code></pre>
</div>
</div>
</div>
</div>
<p>You can see that there are now only 194 rows in the data frame and the distribution of the <code>pm25tmean2</code> values is.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(chic.f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pm25tmean2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  30.05   32.12   35.04   36.63   39.53   61.50 </code></pre>
</div>
</div>
<p>We can place an arbitrarily complex logical sequence inside of <code>filter()</code>, so we could for example extract the rows where PM2.5 is greater than 30 <em>and</em> temperature is greater than 80 degrees Fahrenheit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">chic.f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(chicago, pm25tmean2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> tmpd <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb41-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(chic.f, date, tmpd, pm25tmean2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 17 × 3
   date        tmpd pm25tmean2
   &lt;date&gt;     &lt;dbl&gt;      &lt;dbl&gt;
 1 1998-08-23    81       39.6
 2 1998-09-06    81       31.5
 3 2001-07-20    82       32.3
 4 2001-08-01    84       43.7
 5 2001-08-08    85       38.8
 6 2001-08-09    84       38.2
 7 2002-06-20    82       33  
 8 2002-06-23    82       42.5
 9 2002-07-08    81       33.1
10 2002-07-18    82       38.8
11 2003-06-25    82       33.9
12 2003-07-04    84       32.9
13 2005-06-24    86       31.9
14 2005-06-27    82       51.5
15 2005-06-28    85       31.2
16 2005-07-17    84       32.7
17 2005-08-03    84       37.9</code></pre>
</div>
</div>
<p>Now there are only 17 observations where both of those conditions are met.</p>
<p>Other logical operators you should be aware of include:</p>
<table class="table">
<colgroup>
<col style="width: 15%">
<col style="width: 37%">
<col style="width: 46%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: right;">Operator</th>
<th style="text-align: right;">Meaning</th>
<th style="text-align: right;">Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;"><code>==</code></td>
<td style="text-align: right;">Equals</td>
<td style="text-align: right;"><code>city == chic</code></td>
</tr>
<tr class="even">
<td style="text-align: right;"><code>!=</code></td>
<td style="text-align: right;">Does not equal</td>
<td style="text-align: right;"><code>city != chic</code></td>
</tr>
<tr class="odd">
<td style="text-align: right;"><code>&gt;</code></td>
<td style="text-align: right;">Greater than</td>
<td style="text-align: right;"><code>tmpd &gt; 32.0</code></td>
</tr>
<tr class="even">
<td style="text-align: right;"><code>&gt;=</code></td>
<td style="text-align: right;">Greater than or equal to</td>
<td style="text-align: right;"><code>tmpd &gt;- 32.0</code></td>
</tr>
<tr class="odd">
<td style="text-align: right;"><code>&lt;</code></td>
<td style="text-align: right;">Less than</td>
<td style="text-align: right;"><code>tmpd &lt; 32.0</code></td>
</tr>
<tr class="even">
<td style="text-align: right;"><code>&lt;=</code></td>
<td style="text-align: right;">Less than or equal to</td>
<td style="text-align: right;"><code>tmpd &lt;= 32.0</code></td>
</tr>
<tr class="odd">
<td style="text-align: right;"><code>%in%</code></td>
<td style="text-align: right;">Included in</td>
<td style="text-align: right;"><code>city %in% c("chic", "bmore")</code></td>
</tr>
<tr class="even">
<td style="text-align: right;"><code>is.na()</code></td>
<td style="text-align: right;">Is a missing value</td>
<td style="text-align: right;"><code>is.na(pm10tmean2)</code></td>
</tr>
</tbody>
</table>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you are ever unsure of how to write a logical statement, but know how to write its opposite, you can use the <code>!</code> operator to negate the whole statement.</p>
<p>A common use of this is to identify observations with non-missing data (e.g., <code>!(is.na(pm10tmean2))</code>).</p>
</div>
</div>
</section>
<section id="arrange" class="level3">
<h3 class="anchored" data-anchor-id="arrange"><code>arrange()</code></h3>
<p>The <code>arrange()</code> function is used to <strong>reorder rows</strong> of a data frame according to one of the variables/columns. Reordering rows of a data frame (while preserving corresponding order of other columns) is normally a pain to do in R. The <code>arrange()</code> function simplifies the process quite a bit.</p>
<p>Here we can order the rows of the data frame by date, so that the first row is the earliest (oldest) observation and the last row is the latest (most recent) observation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">chicago <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(chicago, date)</span></code></pre></div>
</div>
<p>We can now check the first few rows</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(chicago, date, pm25tmean2), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  date       pm25tmean2
  &lt;date&gt;          &lt;dbl&gt;
1 1987-01-01         NA
2 1987-01-02         NA
3 1987-01-03         NA</code></pre>
</div>
</div>
<p>and the last few rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(chicago, date, pm25tmean2), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  date       pm25tmean2
  &lt;date&gt;          &lt;dbl&gt;
1 2005-12-29       7.45
2 2005-12-30      15.1 
3 2005-12-31      15   </code></pre>
</div>
</div>
<p>Columns can be arranged in descending order too by useing the special <code>desc()</code> operator.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">chicago <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(chicago, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(date))</span></code></pre></div>
</div>
<p>Looking at the first three and last three rows shows the dates in descending order.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(chicago, date, pm25tmean2), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  date       pm25tmean2
  &lt;date&gt;          &lt;dbl&gt;
1 2005-12-31      15   
2 2005-12-30      15.1 
3 2005-12-29       7.45</code></pre>
</div>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(chicago, date, pm25tmean2), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  date       pm25tmean2
  &lt;date&gt;          &lt;dbl&gt;
1 1987-01-03         NA
2 1987-01-02         NA
3 1987-01-01         NA</code></pre>
</div>
</div>
</section>
<section id="rename" class="level3">
<h3 class="anchored" data-anchor-id="rename"><code>rename()</code></h3>
<p><strong>Renaming a variable</strong> in a data frame in R is surprisingly hard to do! The <code>rename()</code> function is designed to make this process easier.</p>
<p>Here you can see the names of the first five variables in the <code>chicago</code> data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(chicago[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 5
  city   tmpd  dptp date       pm25tmean2
  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt;          &lt;dbl&gt;
1 chic     35  30.1 2005-12-31      15   
2 chic     36  31   2005-12-30      15.1 
3 chic     35  29.4 2005-12-29       7.45</code></pre>
</div>
</div>
<p>The <code>dptp</code> column is supposed to represent the dew point temperature and the <code>pm25tmean2</code> column provides the PM2.5 data.</p>
<p>However, these names are pretty obscure or awkward and probably be renamed to something more sensible.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">chicago <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(chicago, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dewpoint =</span> dptp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pm25 =</span> pm25tmean2)</span>
<span id="cb55-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(chicago[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 5
  city   tmpd dewpoint date        pm25
  &lt;chr&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;date&gt;     &lt;dbl&gt;
1 chic     35     30.1 2005-12-31 15   
2 chic     36     31   2005-12-30 15.1 
3 chic     35     29.4 2005-12-29  7.45</code></pre>
</div>
</div>
<p>The syntax inside the <code>rename()</code> function is to have the new name on the left-hand side of the <code>=</code> sign and the old name on the right-hand side.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>How would you do the equivalent in base R without <code>dplyr</code>?</p>
</div>
</div>
</section>
<section id="mutate" class="level3">
<h3 class="anchored" data-anchor-id="mutate"><code>mutate()</code></h3>
<p>The <code>mutate()</code> function exists to <strong>compute transformations of variables</strong> in a data frame. Often, you want to create new variables that are derived from existing variables and <code>mutate()</code> provides a clean interface for doing that.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-06-managing-data-frames-with-tidyverse/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_mutate.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="figure-caption">Artwork by Allison Horst on mutate() function</figcaption>
</figure>
</div>
<p>[<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
<p>For example, with air pollution data, we often want to <em>detrend</em> the data by subtracting the mean from the data.</p>
<ul>
<li>That way we can look at whether a given day’s air pollution level is higher than or less than average (as opposed to looking at its absolute level).</li>
</ul>
<p>Here, we create a <code>pm25detrend</code> variable that subtracts the mean from the <code>pm25</code> variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">chicago <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(chicago, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pm25detrend =</span> pm25 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(pm25, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb57-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(chicago)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 9
  city   tmpd dewpoint date        pm25 pm10tmean2 o3tmean2 no2tmean2 pm25detr…¹
  &lt;chr&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;date&gt;     &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;
1 chic     35     30.1 2005-12-31 15          23.5     2.53      13.2      -1.23
2 chic     36     31   2005-12-30 15.1        19.2     3.03      22.8      -1.17
3 chic     35     29.4 2005-12-29  7.45       23.5     6.79      20.0      -8.78
4 chic     37     34.5 2005-12-28 17.8        27.5     3.26      19.3       1.52
5 chic     40     33.6 2005-12-27 23.6        27       4.47      23.5       7.33
6 chic     35     29.6 2005-12-26  8.4         8.5    14.0       16.8      -7.83
# … with abbreviated variable name ¹​pm25detrend</code></pre>
</div>
</div>
<p>There is also the related <code>transmute()</code> function, which does the same thing as <code>mutate()</code> but then <em>drops all non-transformed variables</em>.</p>
<p>Here, we de-trend the PM10 and ozone (O3) variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(chicago, </span>
<span id="cb59-2">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pm10detrend =</span> pm10tmean2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(pm10tmean2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb59-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">o3detrend =</span> o3tmean2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(o3tmean2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  pm10detrend o3detrend
        &lt;dbl&gt;     &lt;dbl&gt;
1      -10.4     -16.9 
2      -14.7     -16.4 
3      -10.4     -12.6 
4       -6.40    -16.2 
5       -6.90    -15.0 
6      -25.4      -5.39</code></pre>
</div>
</div>
<p>Note that there are only two columns in the transmuted data frame.</p>
</section>
<section id="group_by" class="level3">
<h3 class="anchored" data-anchor-id="group_by"><code>group_by()</code></h3>
<p>The <code>group_by()</code> function is used to <strong>generate summary statistics</strong> from the data frame within strata defined by a variable.</p>
<p>For example, in this air pollution dataset, you might want to know what the average annual level of PM2.5 is?</p>
<p>So the stratum is the year, and that is something we can derive from the <code>date</code> variable.</p>
<p><strong>In conjunction</strong> with the <code>group_by()</code> function, we often use the <code>summarize()</code> function (or <code>summarise()</code> for some parts of the world).</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <strong>general operation</strong> here is a combination of</p>
<ol type="1">
<li>Splitting a data frame into separate pieces defined by a variable or group of variables (<code>group_by()</code>)</li>
<li>Then, applying a summary function across those subsets (<code>summarize()</code>)</li>
</ol>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>First, we can create a <code>year</code> variable using <code>as.POSIXlt()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">chicago <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(chicago, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXlt</span>(date)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1900</span>)</span></code></pre></div>
</div>
<p>Now we can create a separate data frame that splits the original data frame by year.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">years <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(chicago, year)</span></code></pre></div>
</div>
<p>Finally, we compute summary statistics for each year in the data frame with the <code>summarize()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(years, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pm25 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(pm25, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb63-2">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">o3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(o3tmean2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb63-3">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(no2tmean2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 19 × 4
    year  pm25    o3   no2
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  1987 NaN    63.0  23.5
 2  1988 NaN    61.7  24.5
 3  1989 NaN    59.7  26.1
 4  1990 NaN    52.2  22.6
 5  1991 NaN    63.1  21.4
 6  1992 NaN    50.8  24.8
 7  1993 NaN    44.3  25.8
 8  1994 NaN    52.2  28.5
 9  1995 NaN    66.6  27.3
10  1996 NaN    58.4  26.4
11  1997 NaN    56.5  25.5
12  1998  18.3  50.7  24.6
13  1999  18.5  57.5  24.7
14  2000  16.9  55.8  23.5
15  2001  16.9  51.8  25.1
16  2002  15.3  54.9  22.7
17  2003  15.2  56.2  24.6
18  2004  14.6  44.5  23.4
19  2005  16.2  58.8  22.6</code></pre>
</div>
</div>
</div>
</div>
<p><code>summarize()</code> returns a data frame with <code>year</code> as the first column, and then the annual summary statistics of <code>pm25</code>, <code>o3</code>, and <code>no2</code>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
More complicated example
</div>
</div>
<div class="callout-body-container callout-body">
<p>In a slightly more complicated example, we might want to know what are the average levels of ozone (<code>o3</code>) and nitrogen dioxide (<code>no2</code>) within quintiles of <code>pm25</code>. A slicker way to do this would be through a regression model, but we can actually do this quickly with <code>group_by()</code> and <code>summarize()</code>.</p>
<p>First, we can create a categorical variable of <code>pm25</code> divided into quantiles</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">qq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(chicago<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pm25, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb65-2">chicago <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(chicago, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pm25.quint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span>(pm25, qq))</span></code></pre></div>
</div>
<p>Now we can group the data frame by the <code>pm25.quint</code> variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1">quint <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(chicago, pm25.quint)</span></code></pre></div>
</div>
<p>Finally, we can compute the mean of <code>o3</code> and <code>no2</code> within quintiles of <code>pm25</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(quint, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">o3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(o3tmean2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb67-2">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(no2tmean2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
  pm25.quint     o3   no2
  &lt;fct&gt;       &lt;dbl&gt; &lt;dbl&gt;
1 (1.7,8.7]    21.7  18.0
2 (8.7,12.4]   20.4  22.1
3 (12.4,16.7]  20.7  24.4
4 (16.7,22.6]  19.9  27.3
5 (22.6,61.5]  20.3  29.6
6 &lt;NA&gt;         18.8  25.8</code></pre>
</div>
</div>
</div>
</div>
<p>From the table, it seems there is not a strong relationship between <code>pm25</code> and <code>o3</code>, but there appears to be a positive correlation between <code>pm25</code> and <code>no2</code>.</p>
<p>More sophisticated statistical modeling can help to provide precise answers to these questions, but a simple application of <code>dplyr</code> functions can often get you most of the way there.</p>
</section>
<section id="section" class="level3">
<h3 class="anchored" data-anchor-id="section"><code>%&gt;%</code></h3>
<p>The pipeline operator <code>%&gt;%</code> is very handy for <strong>stringing together multiple <code>dplyr</code> functions in a sequence of operations</strong>.</p>
<p>Notice above that every time we wanted to apply more than one function, the sequence gets buried in a sequence of nested function calls that is difficult to read, i.e.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">third</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">second</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">first</span>(x)))</span></code></pre></div>
</div>
<p>This <strong>nesting is not a natural way</strong> to think about a sequence of operations.</p>
<p>The <code>%&gt;%</code> operator allows you to string operations in a left-to-right fashion, i.e.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">first</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> second <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> third</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Take the example that we just did in the last section.</p>
<p>That can be done with the following sequence in a single R expression.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">chicago <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb71-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXlt</span>(date)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1900</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span>    </span>
<span id="cb71-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(year) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb71-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pm25 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(pm25, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb71-5">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">o3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(o3tmean2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb71-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(no2tmean2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 19 × 4
    year  pm25    o3   no2
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  1987 NaN    63.0  23.5
 2  1988 NaN    61.7  24.5
 3  1989 NaN    59.7  26.1
 4  1990 NaN    52.2  22.6
 5  1991 NaN    63.1  21.4
 6  1992 NaN    50.8  24.8
 7  1993 NaN    44.3  25.8
 8  1994 NaN    52.2  28.5
 9  1995 NaN    66.6  27.3
10  1996 NaN    58.4  26.4
11  1997 NaN    56.5  25.5
12  1998  18.3  50.7  24.6
13  1999  18.5  57.5  24.7
14  2000  16.9  55.8  23.5
15  2001  16.9  51.8  25.1
16  2002  15.3  54.9  22.7
17  2003  15.2  56.2  24.6
18  2004  14.6  44.5  23.4
19  2005  16.2  58.8  22.6</code></pre>
</div>
</div>
</div>
</div>
<p>This way we do not have to create a set of temporary variables along the way or create a massive nested sequence of function calls.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the above code, I pass the <code>chicago</code> data frame to the first call to <code>mutate()</code>, but then afterwards I do not have to pass the first argument to <code>group_by()</code> or <code>summarize()</code>.</p>
<p>Once you travel down the pipeline with <code>%&gt;%</code>, the first argument is taken to be the output of the previous element in the pipeline.</p>
</div>
</div>
<p>Another example might be computing the average pollutant level by month. This could be useful to see if there are any seasonal trends in the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(chicago, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">month =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXlt</span>(date)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mon <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb73-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(month) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb73-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pm25 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(pm25, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb73-4">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">o3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(o3tmean2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb73-5">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(no2tmean2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 12 × 4
   month  pm25    o3   no2
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     1  17.8  28.2  25.4
 2     2  20.4  37.4  26.8
 3     3  17.4  39.0  26.8
 4     4  13.9  47.9  25.0
 5     5  14.1  52.8  24.2
 6     6  15.9  66.6  25.0
 7     7  16.6  59.5  22.4
 8     8  16.9  54.0  23.0
 9     9  15.9  57.5  24.5
10    10  14.2  47.1  24.2
11    11  15.2  29.5  23.6
12    12  17.5  27.7  24.5</code></pre>
</div>
</div>
<p>Here, we can see that <code>o3</code> tends to be low in the winter months and high in the summer while <code>no2</code> is higher in the winter and lower in the summer.</p>
</section>
<section id="slice_" class="level3">
<h3 class="anchored" data-anchor-id="slice_"><code>slice_*()</code></h3>
<p>The <code>slice_sample()</code> function of the <code>dplyr</code> package will allow you to see a <strong>sample of random rows</strong> in random order.</p>
<p>The number of rows to show is specified by the <code>n</code> argument.</p>
<ul>
<li>This can be useful if you <strong>do not want to print the entire tibble</strong>, but you want to get a greater sense of the values.</li>
<li>This is a <strong>good option for data analysis reports</strong>, where printing the entire tibble would not be appropriate if the tibble is quite large.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(chicago, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 11
   city   tmpd dewpoint date        pm25 pm10tme…¹ o3tme…² no2tm…³ pm25d…⁴  year
   &lt;chr&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;date&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
 1 chic   45.5     40.8 1995-10-28  NA        14      7.06    22.5   NA     1995
 2 chic   37       36.2 1999-02-08  27.6      29.5    4.43    29.7   11.4   1999
 3 chic   24       17.5 1988-03-14  NA        27     26.1     15.4   NA     1988
 4 chic   70       62.6 1987-08-20  NA        49     30.5     26.7   NA     1987
 5 chic   29       23.1 2005-02-22  22.8      28     11.6     32.1    6.57  2005
 6 chic   74       64.1 1992-07-26  NA        35     20.3     20.8   NA     1992
 7 chic   75       64.2 2000-08-28  23.7      37.3   31.3     20.6    7.46  2000
 8 chic   31       21.9 2001-12-09  19.8      23.2    5.64    26.4    3.58  2001
 9 chic   28       16.9 1992-11-14  NA        18.7    7.67    21.8   NA     1992
10 chic   62       50.4 2001-11-01  15.1      83     25.6     25.2   -1.13  2001
# … with 1 more variable: pm25.quint &lt;fct&gt;, and abbreviated variable names
#   ¹​pm10tmean2, ²​o3tmean2, ³​no2tmean2, ⁴​pm25detrend</code></pre>
</div>
</div>
</div>
</div>
<p>You can also use <code>slice_head()</code> or <code>slice_tail()</code> to take a look at the top rows or bottom rows of your tibble. Again the number of rows can be specified with the <code>n</code> argument.</p>
<p>This will show the first 5 rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_head</span>(chicago, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 11
  city   tmpd dewpoint date        pm25 pm10tmean2 o3tme…¹ no2tm…² pm25d…³  year
  &lt;chr&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;date&gt;     &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
1 chic     35     30.1 2005-12-31 15          23.5    2.53    13.2   -1.23  2005
2 chic     36     31   2005-12-30 15.1        19.2    3.03    22.8   -1.17  2005
3 chic     35     29.4 2005-12-29  7.45       23.5    6.79    20.0   -8.78  2005
4 chic     37     34.5 2005-12-28 17.8        27.5    3.26    19.3    1.52  2005
5 chic     40     33.6 2005-12-27 23.6        27      4.47    23.5    7.33  2005
# … with 1 more variable: pm25.quint &lt;fct&gt;, and abbreviated variable names
#   ¹​o3tmean2, ²​no2tmean2, ³​pm25detrend</code></pre>
</div>
</div>
<p>This will show the last 5 rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_tail</span>(chicago, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 11
  city   tmpd dewpoint date        pm25 pm10tmean2 o3tme…¹ no2tm…² pm25d…³  year
  &lt;chr&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;date&gt;     &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
1 chic   32       28.9 1987-01-05    NA       NA      4.75    30.3      NA  1987
2 chic   29       28.6 1987-01-04    NA       47      4.38    30.4      NA  1987
3 chic   33       27.4 1987-01-03    NA       34.2    3.33    23.8      NA  1987
4 chic   33       29.9 1987-01-02    NA       NA      3.30    23.2      NA  1987
5 chic   31.5     31.5 1987-01-01    NA       34      4.25    20.0      NA  1987
# … with 1 more variable: pm25.quint &lt;fct&gt;, and abbreviated variable names
#   ¹​o3tmean2, ²​no2tmean2, ³​pm25detrend</code></pre>
</div>
</div>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>The <code>dplyr</code> pacfkage provides a concise set of operations for managing data frames. With these functions we can do a number of complex operations in just a few lines of code. In particular, we can often conduct the beginnings of an exploratory analysis with the powerful combination of <code>group_by()</code> and <code>summarize()</code>.</p>
<p>Once you learn the <code>dplyr</code> grammar there are a few additional benefits</p>
<ul>
<li><p><code>dplyr</code> can work with other data frame “back ends” such as SQL databases. There is an SQL interface for relational databases via the DBI package</p></li>
<li><p><code>dplyr</code> can be integrated with the <code>data.table</code> package for large fast tables</p></li>
</ul>
<p>The <code>dplyr</code> package is handy way to both simplify and speed up your data frame management code. It is rare that you get such a combination at the same time!</p>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>How can you tell if an object is a tibble?</li>
<li>What option controls how many additional column names are printed at the footer of a tibble?</li>
<li>Using the <code>trees</code> dataset in base R (this dataset stores the girth, height, and volume for Black Cherry Trees) and using the pipe operator: (i) convert the <code>data.frame</code> to a tibble, (ii) filter for rows with a tree height of greater than 70, and (iii) order rows by <code>Volume</code> (smallest to largest).</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(trees)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Girth Height Volume
1   8.3     70   10.3
2   8.6     65   10.3
3   8.8     63   10.2
4  10.5     72   16.4
5  10.7     81   18.8
6  10.8     83   19.7</code></pre>
</div>
</div>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://r4ds.had.co.nz/tibbles.html" class="uri">https://r4ds.had.co.nz/tibbles.html</a></li>
<li><a href="https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling" class="uri">https://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling</a></li>
<li><a href="http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf">dplyr cheat sheet from RStudio</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 2</category>
  <category>week 2</category>
  <category>R</category>
  <category>programming</category>
  <category>dplyr</category>
  <category>here</category>
  <category>tibble</category>
  <category>tidyverse</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-06-managing-data-frames-with-tidyverse/index.html</guid>
  <pubDate>Tue, 06 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Reading and Writing data</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-06-reading-and-writing-data/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<blockquote class="blockquote">
<p>“When writing code, you’re always collaborating with future-you; and past-you doesn’t respond to emails”. —<em>Hadley Wickham</em></p>
</blockquote>
<p>[<a href="https://fivebooks.com/best-books/computer-science-data-science-hadley-wickham/">Source</a>]</p>
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://rdpeng.github.io/Biostat776/lecture-getting-and-cleaning-data" class="uri">https://rdpeng.github.io/Biostat776/lecture-getting-and-cleaning-data</a></li>
<li><a href="https://jhudatascience.org/tidyversecourse/get-data" class="uri">https://jhudatascience.org/tidyversecourse/get-data</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-getting-and-cleaning-data" class="uri">https://rdpeng.github.io/Biostat776/lecture-getting-and-cleaning-data</a></li>
<li><a href="https://r4ds.had.co.nz/data-import" class="uri">https://r4ds.had.co.nz/data-import</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Know difference between relative vs absolute paths</li>
<li>Be able to read and write text / csv files in R</li>
<li>Be able to read and write R data objects in R</li>
<li>Be able to calculate memory requirements for R objects</li>
<li>Use modern R packages for reading and writing data</li>
</ul>
</div>
</div>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This lesson introduces <strong>ways to read and write data</strong> (e.g.&nbsp;<code>.txt</code> and <code>.csv</code> files) using base R functions as well as more modern R packages, such as <code>readr</code>, which is typically <a href="https://r4ds.had.co.nz/data-import.html#compared-to-base-r">10x faster than base R</a>.</p>
<p>We will also briefly describe different ways for reading and writing other data types such as, Excel files, google spreadsheets, or SQL databases.</p>
</section>
<section id="relative-versus-absolute-paths" class="level1">
<h1>Relative versus absolute paths</h1>
<p>When you are starting a data analysis, you can create a new <code>.Rproj</code> file that asks RStudio to change the path (location on your computer) to the <code>.Rproj</code> location.</p>
<p>Let’s try this out. In RStudio, click <code>Project: (None)</code> in the top right corner and <code>New Project</code>.</p>
<p>After opening up a <code>.Rproj</code> file, you can test this by</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span></code></pre></div>
</div>
<p>When you open up someone else’s R code or analysis, you might also see the</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>()</span></code></pre></div>
</div>
<p>function being used which explicitly tells R to change the absolute path or absolute location of which directory to move into.</p>
<p>For example, say I want to clone a GitHub repo from my colleague Brian, which has 100 R script files, and in every one of those files at the top is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:\Users\Brian\path\only</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">hat\Brian\has"</span>)</span></code></pre></div>
</div>
<p>The problem is, if I want to use his code, I will need to go and hand-edit every single one of those paths (<code>C:\Users\Brian\path\only\that\Brian\has</code>) to the path that I want to use on my computer or wherever I saved the folder on my computer (e.g.&nbsp;<code>/Users/Stephanie/Documents/path/only/I/have</code>).</p>
<ol type="1">
<li>This is an unsustainable practice.</li>
<li>I can go in and manually edit the path, but this assumes I know how to set a working directory. Not everyone does.</li>
</ol>
<p>So instead of absolute paths:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/bcaffo/data"</span>)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Desktop/files/data"</span>)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Users</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Michelle</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Downloads"</span>)</span></code></pre></div>
</div>
<p>A better idea is to use relative paths:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../data"</span>)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../files"</span>)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">mp"</span>)</span></code></pre></div>
</div>
<p>Within R, an even better idea is to use the <a href="https://github.com/r-lib/here">here</a> R package will recognize the top-level directory of a Git repo and supports building all paths relative to that. For more on project-oriented workflow suggestions, read <a href="https://www.tidyverse.org/articles/2017/12/workflow-vs-script/">this post</a> from Jenny Bryan.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-06-reading-and-writing-data/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/cracked_setwd.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="figure-caption">Artwork by Allison Horst on setwd() function</figcaption>
</figure>
</div>
<p>[<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
<section id="the-here-package" class="level3">
<h3 class="anchored" data-anchor-id="the-here-package">The <code>here</code> package</h3>
<p>In her post, Jenny Bryan writes</p>
<blockquote class="blockquote">
<p>“I suggest organizing each data analysis into a project: a folder on your computer that holds all the files relevant to that particular piece of work.”</p>
</blockquote>
<p>Instead of using <code>setwd()</code> at the top your <code>.R</code> or <code>.Rmd</code> file, she suggests:</p>
<ul>
<li>Organize each logical project into a folder on your computer.</li>
<li>Make sure the top-level folder advertises itself as such. This can be as simple as having an empty file named <code>.here</code>. Or, if you use RStudio and/or Git, those both leave characteristic files behind that will get the job done.</li>
<li>Use the <code>here()</code> function from the <code>here</code> package to build the path when you read or write a file. Create paths relative to the top-level directory.</li>
<li>Whenever you work on this project, launch the R process from the project’s top-level directory. If you launch R from the shell, <code>cd</code> to the correct folder first.</li>
</ul>
<p>Let’s test this out. We can use <code>getwd()</code> to see our current working directory path and the files available using <code>list.files()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/Users/stephaniehicks/Documents/github/teaching/jhustatcomputing2022/posts/2022-09-06-reading-and-writing-data"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "index.qmd"       "index.rmarkdown"</code></pre>
</div>
</div>
<p>OK so our current location is in the reading and writing lectures sub-folder of the <code>jhustatcomputing2022</code> course repository. Let’s try using the <code>here</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "_freeze"                    "_post_template.qmd"        
 [3] "_quarto.yml"                "_site"                     
 [5] "data"                       "images"                    
 [7] "index.qmd"                  "jhustatcomputing2022.Rproj"
 [9] "lectures.qmd"               "posts"                     
[11] "profile.jpg"                "projects"                  
[13] "projects.qmd"               "README.md"                 
[15] "resources.qmd"              "schedule.qmd"              
[17] "scripts"                    "styles.css"                
[19] "syllabus.qmd"               "videos"                    </code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2016-07-19.csv.bz2" "chicago.rds"        "chocolate.RDS"     
[4] "team_standings.csv"</code></pre>
</div>
</div>
<p>Now we see that using the <code>here::here()</code> function is a <em>relative</em> path (relative to the <code>.Rproj</code> file in our <code>jhustatcomputing2022</code> repository. We also see there is are two <code>.csv</code> files in the <code>data</code> folder. We will learn how to read those files into R in the next section.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-06-reading-and-writing-data/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/here.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="figure-caption">Artwork by Allison Horst on here package</figcaption>
</figure>
</div>
<p>[<strong>Source</strong>: <a href="https://github.com/allisonhorst/stats-illustrations">Artwork by Allison Horst</a>]</p>
</section>
<section id="finding-and-creating-files-locally" class="level3">
<h3 class="anchored" data-anchor-id="finding-and-creating-files-locally">Finding and creating files locally</h3>
<p>One last thing. If you want to download a file, one way to use the <code>file.exists()</code>, <code>dir.create()</code> and <code>list.files()</code> functions.</p>
<ul>
<li><code>file.exists(here("my", "relative", "path"))</code>: logical test if the file exists</li>
<li><code>dir.create(here("my", "relative", "path"))</code>: create a folder</li>
<li><code>list.files(here("my", "relative", "path"))</code>: list contents of folder</li>
<li><code>file.create(here("my", "relative", "path"))</code>: create a file</li>
<li><code>file.remove(here("my", "relative", "path"))</code>: delete a file</li>
</ul>
<p>For example, I can put all this together by</p>
<ol type="1">
<li>Checking to see if a file exists in my path. If not, then</li>
<li>Create a directory in that path.</li>
<li>List the files in the path.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relative"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path"</span>))){</span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relative"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path"</span>))</span>
<span id="cb14-3">}</span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relative"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path"</span>))</span></code></pre></div>
</div>
<p>Let’s put relative paths to use while reading and writing data.</p>
</section>
</section>
<section id="reading-data-in-base-r" class="level1">
<h1>Reading data in base R</h1>
<p>In this section, we’re going to demonstrate the essential functions you need to know to read and write (or save) data in R.</p>
<section id="txt-or-csv" class="level2">
<h2 class="anchored" data-anchor-id="txt-or-csv">txt or csv</h2>
<p>There are a few primary functions reading data from base R.</p>
<ul>
<li><code>read.table()</code>, <code>read.csv()</code>: for reading tabular data</li>
<li><code>readLines()</code>: for reading lines of a text file</li>
</ul>
<p>There are analogous functions for writing data to files</p>
<ul>
<li><code>write.table()</code>: for writing tabular data to text files (i.e.&nbsp;CSV) or connections</li>
<li><code>writeLines()</code>: for writing character data line-by-line to a file or connection</li>
</ul>
<p>Let’s try reading some data into R with the <code>read.csv()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"team_standings.csv"</span>))</span>
<span id="cb15-2">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Standing         Team
1         1        Spain
2         2  Netherlands
3         3      Germany
4         4      Uruguay
5         5    Argentina
6         6       Brazil
7         7        Ghana
8         8     Paraguay
9         9        Japan
10       10        Chile
11       11     Portugal
12       12          USA
13       13      England
14       14       Mexico
15       15  South Korea
16       16     Slovakia
17       17  Ivory Coast
18       18     Slovenia
19       19  Switzerland
20       20 South Africa
21       21    Australia
22       22  New Zealand
23       23       Serbia
24       24      Denmark
25       25       Greece
26       26        Italy
27       27      Nigeria
28       28      Algeria
29       29       France
30       30     Honduras
31       31     Cameroon
32       32  North Korea</code></pre>
</div>
</div>
<p>We can use the <code>$</code> symbol to pick out a specific column:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Team</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "Spain"        "Netherlands"  "Germany"      "Uruguay"      "Argentina"   
 [6] "Brazil"       "Ghana"        "Paraguay"     "Japan"        "Chile"       
[11] "Portugal"     "USA"          "England"      "Mexico"       "South Korea" 
[16] "Slovakia"     "Ivory Coast"  "Slovenia"     "Switzerland"  "South Africa"
[21] "Australia"    "New Zealand"  "Serbia"       "Denmark"      "Greece"      
[26] "Italy"        "Nigeria"      "Algeria"      "France"       "Honduras"    
[31] "Cameroon"     "North Korea" </code></pre>
</div>
</div>
<p>We can also ask for the full paths for specific files</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"team_standings.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/Users/stephaniehicks/Documents/github/teaching/jhustatcomputing2022/data/team_standings.csv"</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>What happens when you use <code>readLines()</code> function with the <code>team_standings.csv</code> data?</li>
<li>How would you only read in the first 5 lines?</li>
</ul>
</div>
</div>
</section>
<section id="r-code" class="level2">
<h2 class="anchored" data-anchor-id="r-code">R code</h2>
<p>Sometimes, someone will give you a file that ends in a <code>.R</code>.</p>
<p>This is what’s called an <strong>R script file</strong>. It may contain code someone has written (maybe even you!), for example, a function that you can use with your data. In this case, you want the function available for you to use.</p>
<p>To use the function, <strong>you have to first, read in the function from R script file into R</strong>.</p>
<p>You can check to see if the function already is loaded in R by looking at the Environment tab.</p>
<p>The function you want to use is</p>
<ul>
<li><code>source()</code>: for reading in R code files</li>
</ul>
<p>For example, it might be something like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'functions.R'</span>))</span></code></pre></div>
</div>
</section>
<section id="r-objects" class="level2">
<h2 class="anchored" data-anchor-id="r-objects">R objects</h2>
<p>Alternatively, you might be interested in reading and writing R objects.</p>
<p>Writing data in e.g.&nbsp;<code>.txt</code>, <code>.csv</code> or Excel file formats is good if you want to open these files with other analysis software, such as Excel. However, these formats do not preserve data structures, such as column data types (numeric, character or factor). In order to do that, the data should be written out in a R data format.</p>
<p>There are several types R data file formats to be aware of:</p>
<ul>
<li><code>.RData</code>: Stores <strong>multiple</strong> R objects</li>
<li><code>.Rda</code>: This is short for <code>.RData</code> and is equivalent.</li>
<li><code>.Rds</code>: Stores a <strong>single</strong> R object</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Why is saving data in as a R object useful?</strong></p>
<p>Saving data into R data formats can <strong>typically</strong> reduce considerably the size of large files by compression.</p>
</div>
</div>
<p>Next, we will learn how to read and save</p>
<ol type="1">
<li>A single R object</li>
<li>Multiple R objects</li>
<li>Your entire work space in a specified file</li>
</ol>
<section id="reading-in-data-from-files" class="level3">
<h3 class="anchored" data-anchor-id="reading-in-data-from-files">Reading in data from files</h3>
<ul>
<li><code>load()</code>: for reading in single or multiple R objects (opposite of <code>save()</code>) with a <code>.Rda</code> or <code>.RData</code> file format (objects must be same name)</li>
<li><code>readRDS()</code>: for reading in a single object with a <code>.Rds</code> file format (can rename objects)</li>
<li><code>unserialize()</code>: for reading single R objects in binary form</li>
</ul>
</section>
<section id="writing-data-to-files" class="level3">
<h3 class="anchored" data-anchor-id="writing-data-to-files">Writing data to files</h3>
<ul>
<li><code>save()</code>: for saving an arbitrary number of R objects in binary format (possibly compressed) to a file.</li>
<li><code>saveRDS()</code>: for saving a single object</li>
<li><code>serialize()</code>: for converting an R object into a binary format for outputting to a connection (or file).</li>
<li><code>save.image()</code>: short for ‘save my current workspace’; while this <strong>sounds</strong> nice, it’s not terribly useful for reproducibility (hence not suggested); it’s also what happens when you try to quit R and it asks if you want to save your work space.</li>
</ul>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-06-reading-and-writing-data/http:/www.sthda.com/sthda/RDoc/images/save-data-into-r-data-formats.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Save data into R data file formats: RDS and RDATA</figcaption>
</figure>
</div>
</div>
</div>
<p>[<a href="http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata">Source</a>]</p>
</section>
<section id="example" class="level3">
<h3 class="anchored" data-anchor-id="example">Example</h3>
<p>Let’s try an example. Let’s save a vector of length 5 into the two file formats.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">save</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x.Rda"</span>))</span>
<span id="cb22-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x.Rds"</span>))</span>
<span id="cb22-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2016-07-19.csv.bz2" "chicago.rds"        "chocolate.RDS"     
[4] "team_standings.csv" "x.Rda"              "x.Rds"             </code></pre>
</div>
</div>
<p>Here we assign the imported data to an object using <code>readRDS()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">new_x1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x.Rds"</span>))</span>
<span id="cb24-2">new_x1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4 5</code></pre>
</div>
</div>
<p>Here we assign the imported data to an object using <code>load()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">new_x2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x.Rda"</span>))</span>
<span id="cb26-2">new_x2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "x"</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>load()</code> simply returns the name of the objects loaded. Not the values.</p>
</div>
</div>
<p>Let’s clean up our space.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.remove</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x.Rda"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.remove</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x.Rds"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(x)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>What do you think this code will do?</p>
<p><strong>Hint</strong>: change <code>eval=TRUE</code> to see result</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb33-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb33-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">save</span>(x,y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x.Rda"</span>))</span>
<span id="cb33-4">new_x2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x.Rda"</span>))</span></code></pre></div>
</div>
<p>When you are done:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.remove</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x.Rda"</span>))</span></code></pre></div>
</div>
</div>
</div>
</section>
</section>
<section id="other-data-types" class="level2">
<h2 class="anchored" data-anchor-id="other-data-types">Other data types</h2>
<p>Now, there are of course, many R packages that have been developed to read in all kinds of other datasets, and you may need to resort to one of these packages if you are working in a specific area.</p>
<p>For example, check out</p>
<ul>
<li><a href="https://github.com/r-dbi/DBI"><code>DBI</code></a> for relational databases</li>
<li><a href="https://haven.tidyverse.org"><code>haven</code></a> for SPSS, Stata, and SAS data</li>
<li><a href="https://github.com/r-lib/httr"><code>httr</code></a> for web APIs</li>
<li><a href="https://readxl.tidyverse.org"><code>readxl</code></a> for <code>.xls</code> and <code>.xlsx</code> sheets</li>
<li><a href="https://googlesheets4.tidyverse.org"><code>googlesheets4</code></a> for Google Sheets</li>
<li><a href="https://googledrive.tidyverse.org"><code>googledrive</code></a> for Google Drive files</li>
<li><a href="https://github.com/tidyverse/rvest"><code>rvest</code></a> for web scraping</li>
<li><a href="https://github.com/jeroen/jsonlite#jsonlite"><code>jsonlite</code></a> for JSON</li>
<li><a href="https://github.com/r-lib/xml2"><code>xml2</code></a> for XML.</li>
</ul>
</section>
<section id="reading-data-files-with-read.table" class="level2">
<h2 class="anchored" data-anchor-id="reading-data-files-with-read.table">Reading data files with <code>read.table()</code></h2>
<details>
<summary>
For details on reading data with <code>read.table()</code>, click here.
</summary>
<p>The <code>read.table()</code> function is one of the most commonly used functions for reading data. The help file for <code>read.table()</code> is worth reading in its entirety if only because the function gets used a lot (run <code>?read.table</code> in R).</p>
<p><strong>I know, I know</strong>, everyone always says to read the help file, but this one is actually worth reading.</p>
<p>The <code>read.table()</code> function has a few important arguments:</p>
<ul>
<li><code>file</code>, the name of a file, or a connection</li>
<li><code>header</code>, logical indicating if the file has a header line</li>
<li><code>sep</code>, a string indicating how the columns are separated</li>
<li><code>colClasses</code>, a character vector indicating the class of each column in the dataset</li>
<li><code>nrows</code>, the number of rows in the dataset. By default <code>read.table()</code> reads an entire file.</li>
<li><code>comment.char</code>, a character string indicating the comment character. This defaults to <code>"#"</code>. If there are no commented lines in your file, it’s worth setting this to be the empty string <code>""</code>.</li>
<li><code>skip</code>, the number of lines to skip from the beginning</li>
<li><code>stringsAsFactors</code>, should character variables be coded as factors? This defaults to <code>FALSE</code>. However, back in the “old days”, it defaulted to <code>TRUE</code>. The reason for this was because, if you had data that were stored as strings, it was because those strings represented levels of a categorical variable. Now, we have lots of data that is text data and they do not always represent categorical variables. So you may want to set this to be <code>FALSE</code> in those cases. If you <em>always</em> want this to be <code>FALSE</code>, you can set a global option via <code>options(stringsAsFactors = FALSE)</code>.</li>
</ul>
<p>I’ve never seen so much heat generated on discussion forums about an R function argument than the <code>stringsAsFactors</code> argument. <strong>Seriously</strong>.</p>
<p>For small to moderately sized datasets, you can usually call <code>read.table()</code> without specifying any other arguments</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.table</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo.txt"</span>)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>foo.txt</code> is not a real dataset here. It is only used as an example for how to use <code>read.table()</code></p>
</div>
</div>
<p>In this case, R will automatically:</p>
<ul>
<li>skip lines that begin with a #</li>
<li>figure out how many rows there are (and how much memory needs to be allocated)</li>
<li>figure what type of variable is in each column of the table.</li>
</ul>
<p>Telling R all these things directly makes R run faster and more efficiently.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>read.csv()</code> function is identical to <code>read.table()</code> except that some of the defaults are set differently (like the <code>sep</code> argument).</p>
</div>
</div>
</details>
</section>
<section id="reading-in-larger-datasets-with-read.table" class="level2">
<h2 class="anchored" data-anchor-id="reading-in-larger-datasets-with-read.table">Reading in larger datasets with <code>read.table()</code></h2>
<details>
<summary>
For details on reading larger datasets with <code>read.table()</code>, click here.
</summary>
<p>With much larger datasets, there are a few things that you can do that will make your life easier and will prevent R from choking.</p>
<ul>
<li>Read the help page for <code>read.table()</code>, which contains many hints</li>
<li>Make a rough calculation of the memory required to store your dataset (see the next section for an example of how to do this). If the dataset is larger than the amount of RAM on your computer, you can probably stop right here.</li>
<li>Set <code>comment.char = ""</code> if there are no commented lines in your file.</li>
<li>Use the <code>colClasses</code> argument. Specifying this option instead of using the default can make <code>read.table()</code> run MUCH faster, often twice as fast. In order to use this option, you have to know the class of each column in your data frame. If all of the columns are “numeric”, for example, then you can just set <code>colClasses = "numeric"</code>. A quick an dirty way to figure out the classes of each column is the following:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">initial <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.table</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datatable.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb36-2">classes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(initial, class)</span>
<span id="cb36-3">tabAll <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.table</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datatable.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colClasses =</span> classes)</span></code></pre></div>
</div>
<p><strong>Note</strong>: <code>datatable.txt</code> is not a real dataset here. It is only used as an example for how to use <code>read.table()</code>.</p>
<ul>
<li>Set <code>nrows</code>. This does not make R run faster but it helps with memory usage. A mild overestimate is okay. You can use the Unix tool <code>wc</code> to calculate the number of lines in a file.</li>
</ul>
<p>In general, when using R with larger datasets, it’s also useful to know a few things about your system.</p>
<ul>
<li>How much memory is available on your system?</li>
<li>What other applications are in use? Can you close any of them?</li>
<li>Are there other users logged into the same system?</li>
<li>What operating system ar you using? Some operating systems can limit the amount of memory a single process can access</li>
</ul>
</details>
</section>
</section>
<section id="calculating-memory-requirements-for-r-objects" class="level1">
<h1>Calculating Memory Requirements for R Objects</h1>
<p>Because <strong>R stores all of its objects in physical memory</strong>, it is important to be cognizant of how much memory is being used up by all of the data objects residing in your workspace.</p>
<p>One situation where it is particularly important to understand memory requirements is when you are reading in a new dataset into R. Fortunately, it is easy to make a back of the envelope calculation of how much memory will be required by a new dataset.</p>
<p>For example, suppose I have a data frame with 1,500,000 rows and 120 columns, all of which are numeric data. Roughly, how much memory is required to store this data frame?</p>
<p>Well, on most modern computers <a href="http://en.wikipedia.org/wiki/Double-precision_floating-point_format">double precision floating point numbers</a> are stored using 64 bits of memory, or 8 bytes. Given that information, you can do the following calculation</p>
<p>1,500,000 × 120 × 8 bytes/numeric = 1,440,000,000 bytes</p>
<p>= 1,440,000,000 / 2<sup>20</sup> bytes/MB</p>
<p>= 1,373.29 MB</p>
<p>= 1.34 GB</p>
<p>So the dataset would require about 1.34 GB of RAM. Most computers these days have at least that much RAM. However, you need to be aware of</p>
<ul>
<li>what other programs might be running on your computer, using up RAM</li>
<li>what other R objects might already be taking up RAM in your workspace</li>
</ul>
<p>Reading in a large dataset for which you do not have enough RAM is one easy way to freeze up your computer (or at least your R session). This is usually an unpleasant experience that usually requires you to kill the R process, in the best case scenario, or reboot your computer, in the worst case. So make sure to do a rough calculation of memory requirements before reading in a large dataset. You’ll thank me later.</p>
</section>
<section id="using-the-readr-package" class="level1">
<h1>Using the <code>readr</code> package</h1>
<p>The <code>readr</code> package was developed by Posit (formerly known as RStudio) to deal with reading in large flat files quickly.</p>
<p>The package provides replacements for functions like <code>read.table()</code> and <code>read.csv()</code>. The analogous functions in <code>readr</code> are <code>read_table()</code> and <code>read_csv()</code>. These <strong>functions are often much faster than their base R analogues</strong> and provide a few other nice features such as progress meters.</p>
<p>For example, the package includes a variety of functions in the <code>read_*()</code> family that allow you to read in data from different formats of flat files. The following table gives a guide to several functions in the <code>read_*()</code> family.</p>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;"><code>readr</code> function</th>
<th style="text-align: left;">Use</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>read_csv()</code></td>
<td style="text-align: left;">Reads comma-separated file</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>read_csv2()</code></td>
<td style="text-align: left;">Reads semicolon-separated file</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>read_tsv()</code></td>
<td style="text-align: left;">Reads tab-separated file</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>read_delim()</code></td>
<td style="text-align: left;">General function for reading delimited files</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>read_fwf()</code></td>
<td style="text-align: left;">Reads fixed width files</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>read_log()</code></td>
<td style="text-align: left;">Reads log files</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In this code, I used the <code>kable()</code> function from the <code>knitr</code> package to create the summary table in a table format, rather than as basic R output.</p>
<p>This function is very useful <strong>for formatting basic tables in R markdown documents</strong>. For more complex tables, check out the <code>pander</code> and <code>xtable</code> packages.</p>
</div>
</div>
<p>For the most part, you can read use <code>read_table()</code> and <code>read_csv()</code> pretty much anywhere you might use <code>read.table()</code> and <code>read.csv()</code>.</p>
<p>In addition, if there are non-fatal problems that occur while reading in the data, you will <strong>get a warning and the returned data frame will have some information about which rows/observations triggered the warning</strong>.</p>
<p>This can be very helpful for “debugging” problems with your data before you get neck deep in data analysis.</p>
<section id="advantages" class="level2">
<h2 class="anchored" data-anchor-id="advantages">Advantages</h2>
<p>The advantage of the <code>read_csv()</code> function is perhaps better understood from an historical perspective.</p>
<ul>
<li>R’s built in <code>read.csv()</code> function similarly reads CSV files, but the <code>read_csv()</code> function in <code>readr</code> builds on that by <strong>removing some of the quirks and “gotchas”</strong> of <code>read.csv()</code> as well as <strong>dramatically optimizing the speed</strong> with which it can read data into R.</li>
<li>The <code>read_csv()</code> function also adds some nice user-oriented features like a progress meter and a compact method for specifying column types.</li>
</ul>
</section>
<section id="example-1" class="level2">
<h2 class="anchored" data-anchor-id="example-1">Example</h2>
<p>A typical call to <code>read_csv()</code> will look as follows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb37-2">teams <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"team_standings.csv"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 32 Columns: 2
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (1): Team
dbl (1): Standing

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">teams</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 2
   Standing Team       
      &lt;dbl&gt; &lt;chr&gt;      
 1        1 Spain      
 2        2 Netherlands
 3        3 Germany    
 4        4 Uruguay    
 5        5 Argentina  
 6        6 Brazil     
 7        7 Ghana      
 8        8 Paraguay   
 9        9 Japan      
10       10 Chile      
# … with 22 more rows</code></pre>
</div>
</div>
<p>By default, <code>read_csv()</code> will open a CSV file and read it in line-by-line. Similar to <code>read.table()</code>, you can tell the function to <code>skip</code> lines or which lines are comments:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The first line of metadata</span></span>
<span id="cb41-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  The second line of metadata</span></span>
<span id="cb41-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  x,y,z</span></span>
<span id="cb41-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  1,2,3"</span>,</span>
<span id="cb41-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skip =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 1 Columns: 3
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (3): x, y, z

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
      x     y     z
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1     1     2     3</code></pre>
</div>
</div>
<p>Alternatively, you can use the <code>comment</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# A comment I want to skip</span></span>
<span id="cb44-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  x,y,z</span></span>
<span id="cb44-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  1,2,3"</span>,</span>
<span id="cb44-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 1 Columns: 3
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (3): x, y, z

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
      x     y     z
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1     1     2     3</code></pre>
</div>
</div>
<p>It will also (<strong>by default</strong>), <strong>read in the first few rows of the table</strong> in order to figure out the type of each column (i.e.&nbsp;integer, character, etc.). From the <code>read_csv()</code> help page:</p>
<blockquote class="blockquote">
<p>If ‘NULL’, all column types will be imputed from the first 1000 rows on the input. This is convenient (and fast), but not robust. If the imputation fails, you’ll need to supply the correct types yourself.</p>
</blockquote>
<p>You can specify the type of each column with the <code>col_types</code> argument.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In general, it is a good idea to <strong>specify the column types explicitly</strong>.</p>
<p>This rules out any possible guessing errors on the part of <code>read_csv()</code>.</p>
<p>Also, specifying the column types explicitly provides a useful safety check in case anything about the dataset should change without you knowing about it.</p>
</div>
</div>
<p>Here is an example of how to specify the column types explicitly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">teams <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"team_standings.csv"</span>), </span>
<span id="cb47-2">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cc"</span>)</span></code></pre></div>
</div>
<p>Note that the <code>col_types</code> argument accepts a compact representation. Here <code>"cc"</code> indicates that the first column is <code>character</code> and the second column is <code>character</code> (there are only two columns). Using the <code>col_types</code> argument is useful because often it is not easy to automatically figure out the type of a column by looking at a few rows (especially if a column has many missing values).</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>read_csv()</code> function <strong>will also read compressed files</strong> automatically.</p>
<p>There is no need to decompress the file first or use the <code>gzfile</code> connection function.</p>
</div>
</div>
<p>The following call reads a gzip-compressed CSV file containing download logs from the RStudio CRAN mirror.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">logs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2016-07-19.csv.bz2"</span>), </span>
<span id="cb48-2">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 10 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (6): r_version, r_arch, r_os, package, version, country
dbl  (2): size, ip_id
date (1): date
time (1): time

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<p>Note that the warnings indicate that <code>read_csv()</code> may have had some difficulty identifying the type of each column. This can be solved by using the <code>col_types</code> argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">logs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2016-07-19.csv.bz2"</span>), </span>
<span id="cb50-2">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ccicccccci"</span>, </span>
<span id="cb50-3">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb50-4">logs</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 10
   date       time       size r_ver…¹ r_arch r_os  package version country ip_id
   &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;int&gt;
 1 2016-07-19 22:00:00 1.89e6 3.3.0   x86_64 ming… data.t… 1.9.6   US          1
 2 2016-07-19 22:00:05 4.54e4 3.3.1   x86_64 ming… assert… 0.1     US          2
 3 2016-07-19 22:00:03 1.43e7 3.3.1   x86_64 ming… stringi 1.1.1   DE          3
 4 2016-07-19 22:00:05 1.89e6 3.3.1   x86_64 ming… data.t… 1.9.6   US          4
 5 2016-07-19 22:00:06 3.90e5 3.3.1   x86_64 ming… foreach 1.4.3   US          4
 6 2016-07-19 22:00:08 4.88e4 3.3.1   x86_64 linu… tree    1.0-37  CO          5
 7 2016-07-19 22:00:12 5.25e2 3.3.1   x86_64 darw… surviv… 2.39-5  US          6
 8 2016-07-19 22:00:08 3.23e6 3.3.1   x86_64 ming… Rcpp    0.12.5  US          2
 9 2016-07-19 22:00:09 5.56e5 3.3.1   x86_64 ming… tibble  1.1     US          2
10 2016-07-19 22:00:10 1.52e5 3.3.1   x86_64 ming… magrit… 1.5     US          2
# … with abbreviated variable name ¹​r_version</code></pre>
</div>
</div>
<p>You can <strong>specify the column type in a more detailed fashion</strong> by using the various <code>col_*()</code> functions.</p>
<p>For example, in the log data above, the first column is actually a date, so it might make more sense to read it in as a <code>Date</code> object.</p>
<p>If we wanted to just read in that first column, we could do</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">logdates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2016-07-19.csv.bz2"</span>), </span>
<span id="cb52-2">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cols_only</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_date</span>()),</span>
<span id="cb52-3">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb52-4">logdates</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 1
   date      
   &lt;date&gt;    
 1 2016-07-19
 2 2016-07-19
 3 2016-07-19
 4 2016-07-19
 5 2016-07-19
 6 2016-07-19
 7 2016-07-19
 8 2016-07-19
 9 2016-07-19
10 2016-07-19</code></pre>
</div>
</div>
<p>Now the <code>date</code> column is stored as a <code>Date</code> object which can be used for relevant date-related computations (for example, see the <code>lubridate</code> package).</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>read_csv()</code> function has a <code>progress</code> option that defaults to TRUE.</p>
<p>This options provides a nice progress meter while the CSV file is being read.</p>
<p>However, if you are using <code>read_csv()</code> in a function, or perhaps embedding it in a loop, it is probably best to set <code>progress = FALSE</code>.</p>
</div>
</div>
</section>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>What is the point of reference for using relative paths with the <code>here::here()</code> function?</p></li>
<li><p>Why was the argument <code>stringsAsFactors=TRUE</code> historically used?</p></li>
<li><p>What is the difference between <code>.Rds</code> and <code>.Rda</code> file formats?</p></li>
<li><p>What function in <code>readr</code> would you use to read a file where fields were separated with “|”?</p></li>
</ol>
</div>
</div>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://swcarpentry.github.io/r-novice-inflammation/11-supp-read-write-csv" class="uri">https://swcarpentry.github.io/r-novice-inflammation/11-supp-read-write-csv</a></li>
<li><a href="https://support.rstudio.com/hc/en-us/articles/218611977-Importing-Data-with-the-RStudio-IDE" class="uri">https://support.rstudio.com/hc/en-us/articles/218611977-Importing-Data-with-the-RStudio-IDE</a></li>
<li><a href="https://jhudatascience.org/tidyversecourse/get-data.html" class="uri">https://jhudatascience.org/tidyversecourse/get-data.html</a></li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>module 2</category>
  <category>week 2</category>
  <category>R</category>
  <category>programming</category>
  <category>readr</category>
  <category>here</category>
  <category>tidyverse</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-06-reading-and-writing-data/index.html</guid>
  <pubDate>Tue, 06 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Literate Statistical Programming</title>
  <dc:creator>Stephanie Hicks</dc:creator>
  <link>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-01-literate-programming/index.html</link>
  <description><![CDATA[ 




<!-- Add interesting quote -->
<section id="pre-lecture-materials" class="level1">
<h1>Pre-lecture materials</h1>
<section id="read-ahead" class="level3">
<h3 class="anchored" data-anchor-id="read-ahead">Read ahead</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read ahead
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Before class, you can prepare by reading the following materials:</strong></p>
<ol type="1">
<li><a href="https://rafalab.github.io/dsbook/reproducible-projects-with-rstudio-and-r-markdown.html" class="uri">https://rafalab.github.io/dsbook/reproducible-projects-with-rstudio-and-r-markdown.html</a></li>
<li><a href="https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown" class="uri">https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown</a></li>
</ol>
</div>
</div>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Material for this lecture was borrowed and adopted from</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776/lecture-literate-statistical-programming.html" class="uri">https://rdpeng.github.io/Biostat776/lecture-literate-statistical-programming.html</a></li>
<li><a href="https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown" class="uri">https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown</a></li>
</ul>
</section>
</section>
<section id="learning-objectives" class="level1">
<h1>Learning objectives</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>At the end of this lesson you will:</strong></p>
<ul>
<li>Be able to define literate programming</li>
<li>Recognize differences between available tools to for literate programming</li>
<li>Know how to efficiently work within RStudio for efficient literate programming</li>
<li>Create a R Markdown document</li>
</ul>
</div>
</div>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>One basic idea to make writing reproducible reports easier is what’s known as <em>literate statistical programming</em> (or sometimes called <a href="http://www.r-project.org/conferences/DSC-2001/Proceedings/Rossini.pdf">literate statistical practice</a>). This comes from the idea of <a href="https://en.wikipedia.org/wiki/Literate_programming">literate programming</a> in the area of writing computer programs.</p>
<p>The idea is to <strong>think of a report or a publication as a stream of text and code</strong>.</p>
<ul>
<li><p>The text is readable by people and the code is readable by computers.</p></li>
<li><p>The analysis is described in a series of text and code chunks.</p></li>
<li><p>Each kind of code chunk will do something like load some data or compute some results.</p></li>
<li><p>Each text chunk will relay something in a human readable language.</p></li>
</ul>
<p>There might also be <strong>presentation code</strong> that formats tables and figures and there’s article text that explains what’s going on around all this code. This stream of text and code is a literate statistical program or a literate statistical analysis.</p>
<section id="weaving-and-tangling" class="level3">
<h3 class="anchored" data-anchor-id="weaving-and-tangling">Weaving and Tangling</h3>
<p>Literate programs by themselves are a bit difficult to work with, but they can be processed in two important ways.</p>
<p>Literate programs can be <strong>weaved</strong> to produce human readable documents like PDFs or HTML web pages, and they can <strong>tangled</strong> to produce machine-readable “documents”, or in other words, machine readable code.</p>
<p>The basic idea behind literate programming in order to generate the different kinds of output you might need, <strong>you only need a single source document</strong>—you can weave and tangle to get the rest.</p>
<p>In order to use a system like this you need a documentational language, that’s human readable, and you need a programming language that’s machine readable (or can be compiled/interpreted into something that’s machine readable).</p>
</section>
<section id="sweave" class="level3">
<h3 class="anchored" data-anchor-id="sweave">Sweave</h3>
<p>One of the original literate programming systems in R that was designed to do this was called Sweave. Sweave enables users to combine R code with a documentation program called LaTeX.</p>
<p><strong>Sweave files ends a <code>.Rnw</code></strong> and have R code weaved through the document:</p>
<pre><code>&lt;&lt;plot1, height=4, width=5, eval=FALSE&gt;&gt;=
data(airquality)
plot(airquality$Ozone ~ airquality$Wind)
@</code></pre>
<p>Once you have created your <code>.Rnw</code> file, Sweave will process the file, executing the R chunks and replacing them with output as appropriate before creating the PDF document.</p>
<p>It was originally developed by Fritz Leisch, who is a core member of R, and the code base is still maintained by R Core. The Sweave system comes with any installation of R.</p>
<p>There are many limitations to the original Sweave system.</p>
<ul>
<li>One of the limitations is that it is <strong>focused primarily on LaTeX</strong>, which is not a documentation language that many people are familiar with.</li>
<li>Therefore, it <strong>can be difficult to learn this type of markup language</strong> if you’re not already in a field that uses it regularly.</li>
<li>Sweave also <strong>lacks a lot of features that people find useful</strong> like caching, and multiple plots per page and mixing programming languages.</li>
</ul>
<p>Instead, folks have <strong>moved towards using something called knitr</strong>, which offers everything Sweave does, plus it extends it further.</p>
<ul>
<li>With Sweave, additional tools are required for advanced operations, whereas knitr supports more internally. We’ll discuss knitr below.</li>
</ul>
</section>
<section id="rmarkdown" class="level3">
<h3 class="anchored" data-anchor-id="rmarkdown">rmarkdown</h3>
<p>Another choice for literate programming is to build documents based on <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> language. A markdown file is a plain text file that is typically given the extension <code>.md.</code>. The <a href="https://CRAN.R-project.org/package=rmarkdown"><code>rmarkdown</code></a> R package takes a R Markdown file (<code>.Rmd</code>) and weaves together R code chunks like this:</p>
<pre><code>```{r plot1, height=4, width=5, eval=FALSE, echo=TRUE}
data(airquality)
plot(airquality$Ozone ~ airquality$Wind)
```</code></pre>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The best resource for learning about R Markdown this by Yihui Xie, J. J. Allaire, and Garrett Grolemund:</p>
<ul>
<li><a href="https://bookdown.org/yihui/rmarkdown" class="uri">https://bookdown.org/yihui/rmarkdown</a></li>
</ul>
<p>The R Markdown Cookbook by Yihui Xie, Christophe Dervieux, and Emily Riederer is really good too:</p>
<ul>
<li><a href="https://bookdown.org/yihui/rmarkdown-cookbook" class="uri">https://bookdown.org/yihui/rmarkdown-cookbook</a></li>
</ul>
<p>The authors of the 2nd book describe the motivation for the 2nd book as:</p>
<blockquote class="blockquote">
<p>“However, we have received comments from our readers and publisher that it would be beneficial to provide more practical and relatively short examples to show the interesting and useful usage of R Markdown, because it can be daunting to find out how to achieve a certain task from the aforementioned reference book (put another way, that book is too dry to read). As a result, this cookbook was born.”</p>
</blockquote>
</div>
</div>
<p>Because this is lecture is built in a <code>.qmd</code> file (which is very similar to a <code>.Rmd</code> file), let’s demonstrate how this work. I am going to change <code>eval=FALSE</code> to <code>eval=TRUE</code>.</p>
<div class="cell" height="4" width="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(airquality)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(airquality<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Ozone <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> airquality<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Wind)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-01-literate-programming/index_files/figure-html/plot2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Questions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Why do we not see the back ticks ``` anymore in the code chunk above that made the plot?</li>
<li>What do you think we should do if we want to have the code executed, but we want to hide the code that made it?</li>
</ol>
</div>
</div>
<p>Before we leave this section, I find that there is quite a bit of terminology to understand the magic behind <code>rmarkdown</code> that can be confusing, so let’s break it down:</p>
<ul>
<li><a href="https://pandoc.org">Pandoc</a>. Pandoc is a command line tool with no GUI that converts documents (e.g.&nbsp;from number of different markup formats to many other formats, such as .doc, .pdf etc). It is completely independent from R (but does come bundled with RStudio).</li>
<li><a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> (<strong>markup language</strong>). Markdown is a lightweight <a href="https://en.wikipedia.org/wiki/Markup_language">markup language</a> with plain text formatting syntax designed so that it can be converted to HTML and many other formats. A markdown file is a plain text file that is typically given the extension <code>.md.</code> It is completely independent from R.</li>
<li><a href="https://CRAN.R-project.org/package=markdown"><code>markdown</code></a> (<strong>R package</strong>). <code>markdown</code> is an R package which converts <code>.md</code> files into HTML. It is no longer recommended for use has been surpassed by <a href="https://CRAN.R-project.org/package=rmarkdown"><code>rmarkdown</code></a> (discussed below).</li>
<li>R Markdown (<strong>markup language</strong>). R Markdown is an extension of the markdown syntax. R Markdown files are plain text files that typically have the file extension <code>.Rmd</code>.</li>
<li><a href="https://CRAN.R-project.org/package=rmarkdown"><code>rmarkdown</code></a> (<strong>R package</strong>). The R package <code>rmarkdown</code> is a library that uses pandoc to process and convert <code>.Rmd</code> files into a number of different formats. This core function is <code>rmarkdown::render()</code>. <strong>Note</strong>: this package only deals with the markdown language. If the input file is e.g.&nbsp;<code>.Rhtml</code> or <code>.Rnw</code>, then you need to use <code>knitr</code> prior to calling pandoc (see below).</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Check out the R Markdown Quick Tour for more:</p>
<ul>
<li><a href="https://rmarkdown.rstudio.com/authoring_quick_tour.html" class="uri">https://rmarkdown.rstudio.com/authoring_quick_tour.html</a></li>
</ul>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-01-literate-programming/https:/github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/rmarkdown_rockstar.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="figure-caption">Artwork by Allison Horst on RMarkdown</figcaption>
</figure>
</div>
</section>
<section id="knitr" class="level3">
<h3 class="anchored" data-anchor-id="knitr">knitr</h3>
<p>One of the alternative that has come up in recent times is something called <code>knitr</code>.</p>
<ul>
<li>The <code>knitr</code> package for R takes a lot of these ideas of literate programming and updates and improves upon them.</li>
<li><code>knitr</code> still uses R as its programming language, but it allows you to mix other programming languages in.</li>
<li>You can also use a variety of documentation languages now, such as LaTeX, markdown and HTML.</li>
<li><code>knitr</code> was developed by Yihui Xie while he was a graduate student at Iowa State and it has become a very popular package for writing literate statistical programs.</li>
</ul>
<p>Knitr takes a plain text document with embedded code, executes the code and ‘knits’ the results back into the document.</p>
<p>For for example, it converts</p>
<ul>
<li>An R Markdown (<code>.Rmd)</code> file into a standard markdown file (<code>.md</code>)</li>
<li>An <code>.Rnw</code> (Sweave) file into to <code>.tex</code> format.</li>
<li>An <code>.Rhtml</code> file into to <code>.html</code>.</li>
</ul>
<p>The core function is <code>knitr::knit()</code> and by default this will look at the input document and try and guess what type it is e.g.&nbsp;<code>Rnw</code>, <code>Rmd</code> etc.</p>
<p>This core function performs three roles:</p>
<ul>
<li>A <strong>source parser</strong>, which looks at the input document and detects which parts are code that the user wants to be evaluated.</li>
<li>A <strong>code evaluator</strong>, which evaluates this code</li>
<li>An <strong>output renderer</strong>, which writes the results of evaluation back to the document in a format which is interpretable by the raw output type. For instance, if the input file is an <code>.Rmd</code>, the output render marks up the output of code evaluation in <code>.md</code> format.</li>
</ul>
<div class="cell" data-layout-align="center" data-preview="true">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-01-literate-programming/https:/d33wubrfki0l68.cloudfront.net/61d189fd9cdf955058415d3e1b28dd60e1bd7c9b/9791d/images/rmarkdownflow.png" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption class="figure-caption">Converting a Rmd file to many outputs using knitr and pandoc</figcaption>
</figure>
</div>
</div>
</div>
<p>[<a href="https://rmarkdown.rstudio.com/authoring_quick_tour.html">Source</a>]</p>
<p>As seen in the figure above, from there pandoc is used to convert e.g.&nbsp;a <code>.md</code> file into many other types of file formats into a <code>.html</code>, etc.</p>
<p>So in summary:</p>
<blockquote class="blockquote">
<p>“R Markdown stands on the shoulders of knitr and Pandoc. The former executes the computer code embedded in Markdown, and converts R Markdown to Markdown. The latter renders Markdown to the output format you want (such as PDF, HTML, Word, and so on).”</p>
</blockquote>
<p>[<a href="https://bookdown.org/yihui/rmarkdown/">Source</a>]</p>
</section>
</section>
<section id="create-and-knit-your-first-r-markdown-document" class="level1">
<h1>Create and Knit Your First R Markdown Document</h1>
<iframe width="560" height="315" src="https://www.youtube.com/embed/dY9KNat_vYs" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>When creating your first R Markdown document, in RStudio you can</p>
<ol type="1">
<li><p>Go to File &gt; New File &gt; R Markdown…</p></li>
<li><p>Feel free to edit the Title</p></li>
<li><p>Make sure to select “Default Output Format” to be HTML</p></li>
<li><p>Click “OK”. RStudio creates the R Markdown document and places some boilerplate text in there just so you can see how things are setup.</p></li>
<li><p>Click the “Knit” button (or go to File &gt; Knit Document) to make sure you can create the HTML output</p></li>
</ol>
<p>If you successfully knit your first R Markdown document, then congratulations!</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-01-literate-programming/https:/media.giphy.com/media/L4ZZNbDpOCfiX8uYSd/giphy.gif" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption class="figure-caption">Mission accomplished!</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="websites-and-books-in-r-markdown" class="level1 page-columns page-full">
<h1>Websites and Books in R Markdown</h1>
<p>Now that you are on the road to using R Markdown documents, it is important to know about other wonderful things you do with these documents. For example, let’s say you have multiple <code>.Rmd</code> documents that you want to put together into a website, blog, book, etc.</p>
<p>There are primarily two ways to build multiple <code>.Rmd</code> documents together:</p>
<ol type="1">
<li><a href="https://bookdown.org/yihui/blogdown/"><strong>blogdown</strong></a> for building websites</li>
<li><a href="https://bookdown.org/yihui/bookdown/"><strong>bookdown</strong></a> for authoring books</li>
</ol>
<p>In this section, we briefly introduce both packages, but it’s worth mentioning that the <a href="https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html"><strong>rmarkdown</strong> package also has a built-in site generator</a> to build websites.</p>
<section id="blogdown" class="level3">
<h3 class="anchored" data-anchor-id="blogdown">blogdown</h3>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-01-literate-programming/https:/bookdown.org/yihui/blogdown/images/logo.png" class="img-fluid figure-img" style="width:30.0%"></p>
<figcaption class="figure-caption">blogdown logo</figcaption>
</figure>
</div>
</div>
</div>
<p>[<a href="https://bookdown.org/yihui/bookdown/images/logo.png">Source</a>]</p>
<p>The <code>blogdown</code> R package is built on top of R Markdown, supports multi-page HTML output to write a blog post or a general page in an Rmd document, or a plain Markdown document.</p>
<ul>
<li>These source documents (e.g.&nbsp;<code>.Rmd</code> or <code>.md</code>) are built into a static website (i.e.&nbsp;a bunch of static HTML files, images and CSS files).</li>
<li>Using this folder of files, it is very easy to publish it to any web server as a website.</li>
<li>Also, it is easy to maintain because it is only a single folder.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>For example, my personal website was built in blogdown:</p>
<ul>
<li><a href="https://www.stephaniehicks.com" class="uri">https://www.stephaniehicks.com</a></li>
</ul>
<p>Other really great examples can be found here:</p>
<ul>
<li><a href="https://awesome-blogdown.com" class="uri">https://awesome-blogdown.com</a></li>
</ul>
</div>
</div>
<p>Other advantages include the content likely being reproducible, easier to maintain, and easy to convert pages to e.g.&nbsp;PDF or other formats in the future if you do not want to convert to HTML files.</p>
<p>Because it is based on the Markdown syntax, it is easy to write technical documents, including math equations, insert figures or tables with captions, cross-reference with figure or table numbers, add citations, and present theorems or proofs.</p>
<p>Here’s a video you can watch of someone making a blogdown website.</p>
<p align="center">
<iframe width="560" height="315" src="https://www.youtube.com/embed/AADnslLpzJ4" frameborder="0" allowfullscreen="">
</iframe>
</p>
<p>[<a href="https://www.youtube.com/watch?v=AADnslLpzJ4">Source</a> on YouTube]</p>
</section>
<section id="bookdown" class="level3">
<h3 class="anchored" data-anchor-id="bookdown">bookdown</h3>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-01-literate-programming/https:/bookdown.org/yihui/bookdown/images/logo.png" class="img-fluid figure-img" style="width:30.0%"></p>
<figcaption class="figure-caption">book logo</figcaption>
</figure>
</div>
</div>
</div>
<p>[<a href="https://bookdown.org/yihui/bookdown/images/logo.png">Source</a>]</p>
<p>Similar to <code>blogdown</code>, the <code>bookdown</code> R package is built on top of R Markdown, but also offers features like multi-page HTML output, numbering and cross-referencing figures/tables/sections/equations, inserting parts/appendices, and imported the GitBook style (<a href="https://www.gitbook.com" class="uri">https://www.gitbook.com</a>) to create elegant and appealing HTML book pages. Share</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>For example, the previous version of this course was built in bookdown:</p>
<ul>
<li><a href="https://rdpeng.github.io/Biostat776" class="uri">https://rdpeng.github.io/Biostat776</a></li>
</ul>
<p>Another example is the <a href="https://jhudatascience.org/tidyversecourse/">Tidyverse Skills for Data Science</a> book that the JHU Data Science Lab wrote. The github repo that contains all the <code>.Rmd</code> files can be found <a href="https://github.com/jhudsl/tidyversecourse">here</a>.</p>
<ul>
<li><a href="https://jhudatascience.org/tidyversecourse" class="uri">https://jhudatascience.org/tidyversecourse</a></li>
<li><a href="https://github.com/jhudsl/tidyversecourse" class="uri">https://github.com/jhudsl/tidyversecourse</a></li>
</ul>
</div>
</div>
<p><strong>Note</strong>: Even though the word “book” is in “bookdown”, this package is not only for books. It really can be anything that consists of multiple <code>.Rmd</code> documents meant to be read in a linear sequence such as course dissertation/thesis, handouts, study notes, a software manual, a thesis, or even a diary.</p>
<ul>
<li>https://bookdown.org/yihui/rmarkdown/basics-examples.html#examples-books</li>
</ul>
</section>
<section id="distill" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="distill">distill</h3>
<p>There is another great way to build blogs or websites using the <a href="https://rstudio.github.io/distill/">distill for R Markdown</a>.</p>
<ul>
<li><a href="https://rstudio.github.io/distill" class="uri">https://rstudio.github.io/distill</a></li>
</ul>
<p>Distill for R Markdown combines the technical authoring features of the <a href="https://github.com/distillpub/template">Distill web framework</a> (optimized for scientific and technical communication) with <a href="https://rmarkdown.rstudio.com">R Markdown</a>, enabling a fully reproducible workflow based on literate programming <span class="citation" data-cites="knuth1984">(Knuth 1984)</span>.</p>
<p>Distill articles include:</p>
<ul>
<li>Reader-friendly typography that adapts well to mobile devices.</li>
<li>Features essential to technical writing like LaTeX math, citations, and footnotes.</li>
<li>Flexible figure layout options (e.g.&nbsp;displaying figures at a larger width than the article text).</li>
<li>Attractively rendered tables with optional support for pagination.</li>
<li>Support for a wide variety of diagramming tools for illustrating concepts. The ability to incorporate JavaScript and D3-based interactive visualizations.</li>
<li>A variety of ways to publish articles, including support for publishing sets of articles as a Distill website or as a Distill blog.</li>
</ul>
<p>The course website from last year was built in Distill for R Markdown:</p>
<ul>
<li>Website: <a href="https://stephaniehicks.com/jhustatcomputing2021" class="uri">https://stephaniehicks.com/jhustatcomputing2021</a></li>
<li>Github: <a href="https://github.com/stephaniehicks/jhustatcomputing2021" class="uri">https://github.com/stephaniehicks/jhustatcomputing2021</a></li>
</ul>
<p>Some other cool things about distill is the use of footnotes and asides.</p>
<p>For example <sup>1</sup>. The number of the footnote will be automatically generated.</p>
<p>You can also optionally include notes in the gutter of the article (immediately to the right of the article text). To do this use the aside tag.</p>
<aside>
This content will appear in the gutter of the article.
</aside>
<p>You can also include figures in the gutter. Just enclose the code chunk which generates the figure in an aside tag</p>
</section>
</section>
<section id="tips-and-tricks-in-r-markdown-in-rstudio" class="level1">
<h1>Tips and tricks in R Markdown in RStudio</h1>
<p>Here are shortcuts and tips on efficiently using RStudio to improve how you write code.</p>
<section id="run-code" class="level3">
<h3 class="anchored" data-anchor-id="run-code">Run code</h3>
<p>If you want to run a code chunk:</p>
<pre><code>command + Enter on Mac
Ctrl + Enter on Windows</code></pre>
</section>
<section id="insert-a-comment-in-r-and-r-markdown" class="level3">
<h3 class="anchored" data-anchor-id="insert-a-comment-in-r-and-r-markdown">Insert a comment in R and R Markdown</h3>
<p>To insert a comment:</p>
<pre><code>command + Shift + C on Mac
Ctrl + Shift + C on Windows</code></pre>
<p>This shortcut can be used both for:</p>
<ul>
<li>R code when you want to comment your code. It will add a <code>#</code> at the beginning of the line</li>
<li>for text in R Markdown. It will add <code>&lt;!--</code> and <code>--&gt;</code> around the text</li>
</ul>
<p>Note that if you want to comment more than one line, select all the lines you want to comment then use the shortcut. If you want to uncomment a comment, apply the same shortcut.</p>
</section>
<section id="knit-a-r-markdown-document" class="level3">
<h3 class="anchored" data-anchor-id="knit-a-r-markdown-document">Knit a R Markdown document</h3>
<p>You can knit R Markdown documents by using this shortcut:</p>
<pre><code>command + Shift + K on Mac
Ctrl + Shift + K on Windows</code></pre>
</section>
<section id="code-snippets" class="level3">
<h3 class="anchored" data-anchor-id="code-snippets">Code snippets</h3>
<p>Code snippets is usually a few characters long and is used as a shortcut to insert a common piece of code. You simply type a few characters then press <code>Tab</code> and it will complete your code with a larger code. <code>Tab</code> is then used again to navigate through the code where customization is required. For instance, if you type <code>fun</code> then press <code>Tab</code>, it will auto-complete the code with the required code to create a function:</p>
<pre><code>name &lt;- function(variables) {
  
}</code></pre>
<p>Pressing <code>Tab</code> again will jump through the placeholders for you to edit it. So you can first edit the name of the function, then the variables and finally the code inside the function (try by yourself!).</p>
<p>There are many code snippets by default in RStudio. Here are the code snippets I use most often:</p>
<ul>
<li><code>lib</code> to call <code>library()</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(package)</span></code></pre></div>
</div>
<ul>
<li><code>mat</code> to create a matrix</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> rows, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> cols)</span></code></pre></div>
</div>
<ul>
<li><code>if</code>, <code>el</code>, and <code>ei</code> to create conditional expressions such as <code>if() {}</code>, <code>else {}</code> and <code>else if () {}</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (condition) {</span>
<span id="cb10-2">  </span>
<span id="cb10-3">}</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb10-6">  </span>
<span id="cb10-7">}</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (condition) {</span>
<span id="cb10-10">  </span>
<span id="cb10-11">}</span></code></pre></div>
</div>
<ul>
<li><code>fun</code> to create a function</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(variables) {</span>
<span id="cb11-2">  </span>
<span id="cb11-3">}</span></code></pre></div>
</div>
<ul>
<li><code>for</code> to create for loops</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (variable <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> vector) {</span>
<span id="cb12-2">  </span>
<span id="cb12-3">}</span></code></pre></div>
</div>
<ul>
<li><code>ts</code> to insert a comment with the current date and time (useful if you have very long code and share it with others so they see when it has been edited)</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tue Jan 21 20:20:14 2020 ------------------------------</span></span></code></pre></div>
</div>
<p>You can see all default code snippets and add yours by clicking on Tools &gt; Global Options… &gt; Code (left sidebar) &gt; Edit Snippets…</p>
</section>
<section id="ordered-list-in-r-markdown" class="level3">
<h3 class="anchored" data-anchor-id="ordered-list-in-r-markdown">Ordered list in R Markdown</h3>
<p>In R Markdown, when creating an ordered list such as this one:</p>
<ol type="1">
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3</li>
</ol>
<p>Instead of bothering with the numbers and typing</p>
<pre><code>1. Item 1
2. Item 2
3. Item 3</code></pre>
<p>you can simply type</p>
<pre><code>1. Item 1
1. Item 2
1. Item 3</code></pre>
<p>for the exact same result (try it yourself or check the code of this article!). This way you do not need to bother which number is next when creating a new item.</p>
<p>To go even further, any numeric will actually render the same result as long as the first item is the number you want to start from. For example, you could type:</p>
<pre><code>1. Item 1
7. Item 2
3. Item 3</code></pre>
<p>which renders</p>
<ol type="1">
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3</li>
</ol>
<p>However, I suggest always using the number you want to start from for all items because if you move one item at the top, the list will start with this new number. For instance, if we move <code>7. Item 2</code> from the previous list at the top, the list becomes:</p>
<pre><code>7. Item 2
1. Item 1
3. Item 3</code></pre>
<p>which incorrectly renders</p>
<ol start="7" type="1">
<li>Item 2</li>
<li>Item 1</li>
<li>Item 3</li>
</ol>
</section>
<section id="new-code-chunk-in-r-markdown" class="level3">
<h3 class="anchored" data-anchor-id="new-code-chunk-in-r-markdown">New code chunk in R Markdown</h3>
<p>When editing R Markdown documents, you will need to insert a new R code chunk many times. The following shortcuts will make your life easier:</p>
<pre><code>command + option + I on Mac (or command + alt + I depending on your keyboard)
Ctrl + ALT + I on Windows</code></pre>
</section>
<section id="reformat-code" class="level3">
<h3 class="anchored" data-anchor-id="reformat-code">Reformat code</h3>
<p>A clear and readable code is always easier and faster to read (and look more professional when sharing it to collaborators). To automatically apply the most common coding guidelines such as white spaces, indents, etc., use:</p>
<pre><code>cmd + Shift + A on Mac
Ctrl + Shift + A on Windows</code></pre>
<p>So for example the following code which does not respect the guidelines (and which is not easy to read):</p>
<pre><code>1+1
  for(i in 1:10){if(!i%%2){next}
print(i)
 }</code></pre>
<p>becomes much more neat and readable:</p>
<pre><code>1 + 1
for (i in 1:10) {
  if (!i %% 2) {
    next
  }
  print(i)
}</code></pre>
</section>
<section id="rstudio-addins" class="level3">
<h3 class="anchored" data-anchor-id="rstudio-addins">RStudio addins</h3>
<p>RStudio addins are extensions which provide a simple mechanism for executing advanced R functions from within RStudio. In simpler words, when executing an addin (by clicking a button in the Addins menu), the corresponding code is executed without you having to write the code. RStudio addins have the advantage that they allow you to execute complex and advanced code much more easily than if you would have to write it yourself.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>For more information about RStudio addins, check out</strong>:</p>
<ul>
<li><a href="https://rstudio.github.io/rstudioaddins" class="uri">https://rstudio.github.io/rstudioaddins</a></li>
<li><a href="https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown" class="uri">https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown</a></li>
</ul>
</div>
</div>
</section>
<section id="others" class="level3">
<h3 class="anchored" data-anchor-id="others">Others</h3>
<p>Similar to many other programs, you can also use:</p>
<ul>
<li><code>command + Shift + N</code> on Mac and <code>Ctrl + Shift + N</code> on Windows to open a new R Script</li>
<li><code>command + S</code> on Mac and <code>Ctrl + S</code> on Windows to save your current script or R Markdown document</li>
</ul>
<p>Check out Tools –&gt; Keyboard Shortcuts Help to see a long list of these shortcuts.</p>
</section>
</section>
<section id="post-lecture-materials" class="level1">
<h1>Post-lecture materials</h1>
<section id="final-questions" class="level3">
<h3 class="anchored" data-anchor-id="final-questions">Final Questions</h3>
<p>Here are some post-lecture questions to help you think about the material discussed.</p>
</section>
<section id="questions-1" class="level3 questions">
<h3 class="anchored" data-anchor-id="questions-1">Questions</h3>
<ol type="1">
<li><p>What is literate programming?</p></li>
<li><p>What was the first literate statistical programming tool to weave together a statistical language (R) with a markup language (LaTeX)?</p></li>
<li><p>What is <code>knitr</code> and how is different than other literate statistical programming tools?</p></li>
<li><p>Where can you find a list of other commands that help make your code writing more efficient in RStudio?</p></li>
</ol>
</section>
<section id="additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="additional-resources">Additional Resources</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://indrajeetpatil.github.io/RmarkdownTips/">RMarkdown Tips and Tricks</a> by Indrajeet Patil</li>
<li><a href="https://bookdown.org/yihui/rmarkdown" class="uri">https://bookdown.org/yihui/rmarkdown</a></li>
<li><a href="https://bookdown.org/yihui/rmarkdown-cookbook" class="uri">https://bookdown.org/yihui/rmarkdown-cookbook</a></li>
</ul>
</div>
</div>



</section>
</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-knuth1984" class="csl-entry">
Knuth, Donald E. 1984. <span>“Literate Programming.”</span> <em>Comput. J.</em> 27 (2): 97–111. <a href="https://doi.org/10.1093/comjnl/27.2.97">https://doi.org/10.1093/comjnl/27.2.97</a>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This will become a hover-able footnote↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>module 1</category>
  <category>week 1</category>
  <category>R Markdown</category>
  <category>programming</category>
  <guid>https://lcolladotor.github.io/jhustatcomputing2023/posts/2022-09-01-literate-programming/index.html</guid>
  <pubDate>Thu, 01 Sep 2022 04:00:00 GMT</pubDate>
  <media:content url="https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/rmarkdown_rockstar.png" medium="image" type="image/png"/>
</item>
</channel>
</rss>
