{
  "hash": "0d77cc9b24d472dd20c3775c580c0879",
  "result": {
    "markdown": "---\ntitle: \"22 - Factors\"\nauthor:\n  - name: Leonardo Collado Torres\n    url: http://lcolladotor.github.io/\n    affiliations:\n      - id: libd\n        name: Lieber Institute for Brain Development\n        url: https://libd.org/\n      - id: jhsph\n        name: Johns Hopkins Bloomberg School of Public Health Department of Biostatistics\n        url: https://publichealth.jhu.edu/departments/biostatistics\ndescription: \"An introduction to working categorial variables using factors in R\"\ncategories: [module 5, week 7, tidyverse, factors, categorial variables]\n---\n\n\n*This lecture, as the rest of the course, is adapted from the version [Stephanie C. Hicks](https://www.stephaniehicks.com/) designed and maintained in 2021 and 2022. Check the recent changes to this file through the [GitHub history](https://github.com/lcolladotor/jhustatcomputing/commits/main/posts/22-working-with-factors/index.qmd).*\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1.  [Wrangling Categorical Data in R](https://peerj.com/preprints/3163) by Amelia McNamara, Nicholas J Horton\n2.  <https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors>\n3.  <https://forcats.tidyverse.org>\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n-   [Wrangling Categorical Data in R](https://peerj.com/preprints/3163) by Amelia McNamara, Nicholas J Horton\n-   <https://r4ds.had.co.nz/factors>\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   How to create factors and some challenges working with them in base R\n-   An introduction to the `forcats` package in the `tidyverse` to work with **cat**egorical variables in R\n:::\n\n# Introduction\n\n**Factors** are used for working with **categorical variables**, or variables that have a fixed and known set of possible values (income bracket, U.S. state, political affiliation).\n\nFactors are **useful when**:\n\n-   You want to **include categorical variables in regression models**\n-   You want to **plot categorical data** (e.g. want to map categorical variables to aesthetic attributes)\n-   You want to **display character vectors in a non-alphabetical order**\n\n::: callout-tip\n### Example\n\nImagine that you have a variable that records month:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\n```\n:::\n\n\nUsing a string to record this variable has two problems:\n\n1.  There are only twelve possible months, and there's nothing saving you from typos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_typo <- c(\"Dec\", \"Apr\", \"Jam\", \"Mar\")\n```\n:::\n\n\n2.  It doesn't sort in a useful way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Apr\" \"Dec\" \"Jan\" \"Mar\"\n```\n:::\n:::\n\n:::\n\n## Factor basics\n\nYou can fix both of these problems with a **factor**.\n\nTo create a factor you must start by creating a list of the valid **levels**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth_levels <- c(\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n)\n```\n:::\n\n\nNow we can create a factor with the `factor()` function defining the `levels` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- factor(x, levels = month_levels)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Dec Apr Jan Mar\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n:::\n\n\nWe can see what happens if we try to **sort the factor**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Jan Mar Apr Dec\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n:::\n\n\nWe can also check the **attributes of the factor**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$levels\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n$class\n[1] \"factor\"\n```\n:::\n:::\n\n\nIf you want to access the set of levels directly, you can do so with `levels()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n```\n:::\n:::\n\n\n::: callout-tip\n### Note\n\nAny values not in the level will be silently converted to NA:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny_typo <- factor(x_typo, levels = month_levels)\ny_typo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Dec  Apr  <NA> Mar \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n:::\n\n:::\n\n## Challenges working with categorical data\n\nWorking with categorical data can really helpful in many situations, but it also be challenging.\n\nFor example,\n\n1.  What if the **original data source** for where the categorical data is getting ingested **changes**?\n    -   If a domain expert is providing spreadsheet data at regular intervals, code that worked on the initial data may not generate an error message, but could silently produce incorrect results.\n2.  What if a **new level** of a categorical data is added in an updated dataset?\n3.  When categorical data are coded with numerical values, it can be easy to **break the relationship between category numbers and category labels** without realizing it, thus losing the information encoded in a variable.\n    -   Let's consider an example of this below.\n\n::: callout-tip\n### Example\n\nConsider a set of decades,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nx1_original <- c(10, 10, 10, 50, 60, 20, 20, 40)\nx1_factor <- factor(x1_original)\nattributes(x1_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$levels\n[1] \"10\" \"20\" \"40\" \"50\" \"60\"\n\n$class\n[1] \"factor\"\n```\n:::\n\n```{.r .cell-code}\ntibble(x1_original, x1_factor) %>%\n    mutate(x1_numeric = as.numeric(x1_factor))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 Ã— 3\n  x1_original x1_factor x1_numeric\n        <dbl> <fct>          <dbl>\n1          10 10                 1\n2          10 10                 1\n3          10 10                 1\n4          50 50                 4\n5          60 60                 5\n6          20 20                 2\n7          20 20                 2\n8          40 40                 3\n```\n:::\n:::\n\n\nInstead of creating a new variable with a numeric version of the value of the factor variable `x1_factor`, the **variable loses the original numerical categories** and **creates a factor number** (i.e., 10 is mapped to 1, 20 is mapped to 2, and 40 is mapped to 3, etc).\n:::\n\nThis **result is unexpected** because `base::as.numeric()` is intended to recover numeric information by coercing a character variable.\n\n::: callout-tip\n### Example\n\nCompare the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(c(\"hello\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nas.numeric(factor(c(\"hello\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nIn the first example, R does not how to convert the character string to a numeric, so it returns a `NA`.\n\nIn the second example, it creates factor numbers and orders them according to an alphabetical order. Here is another example of this behavior:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(factor(c(\"hello\", \"goodbye\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 1\n```\n:::\n:::\n\n:::\n\nThis behavior of the `factor()` function feels unexpected at best.\n\nAnother example of **unexpected behavior** is how the function will **silently make a missing value** because the values in the data and the levels do not match.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor(\"a\", levels = \"c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] <NA>\nLevels: c\n```\n:::\n:::\n\n\nThe **unfortunate behavior of factors in R** has led to an online movement against the default behavior of many data import functions to make factors out of any variable composed as strings.\n\nThe tidyverse is part of this movement, with functions from the `readr` package defaulting to leaving strings as-is. Others used to chose to add `options(stringAsFactors = FALSE)` into their start up commands to override R's default of `stringsAsFactors = TRUE` in functions such as `read.table()`. However, that is no longer needed in recent versions of R as the default has become `stringsAsFactors = FALSE` as documented on the official R blog: <https://blog.r-project.org/2020/02/16/stringsasfactors/>.\n\n## Factors when modeling data\n\nSo if factors are so troublesome, what's the point of them in the first place?\n\nFactors are **still necessary for some data analytic tasks**. The most salient case is in **statistical modeling**.\n\nWhen you pass a factor variable into `lm()` or `glm()`, R automatically creates indicator (or more colloquially 'dummy') variables for each of the levels and picks one as a reference group.\n\nFor simple cases, this behavior can also be **achieved with a character vector**.\n\nHowever, to choose **which level to use as a reference level** or to order classes, factors must be used.\n\n::: callout-tip\n### Example\n\nConsider a vector of character strings with three income levels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincome_level <- c(\n    rep(\"low\", 10),\n    rep(\"medium\", 10),\n    rep(\"high\", 10)\n)\nincome_level\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"low\"    \"low\"    \"low\"    \"low\"    \"low\"    \"low\"    \"low\"    \"low\"   \n [9] \"low\"    \"low\"    \"medium\" \"medium\" \"medium\" \"medium\" \"medium\" \"medium\"\n[17] \"medium\" \"medium\" \"medium\" \"medium\" \"high\"   \"high\"   \"high\"   \"high\"  \n[25] \"high\"   \"high\"   \"high\"   \"high\"   \"high\"   \"high\"  \n```\n:::\n:::\n\n\nHere, it **might make sense to use the lowest income level (low) as the reference** class so that all the other coefficients can be interpreted in comparison to it.\n\nHowever, R would use **high as the reference** by default because 'h' comes before 'l' in the alphabet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- factor(income_level)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] low    low    low    low    low    low    low    low    low    low   \n[11] medium medium medium medium medium medium medium medium medium medium\n[21] high   high   high   high   high   high   high   high   high   high  \nLevels: high low medium\n```\n:::\n\n```{.r .cell-code}\ny <- rnorm(30) # generate some random obs from a normal dist\nlm(y ~ x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = y ~ x)\n\nCoefficients:\n(Intercept)         xlow      xmedium  \n     0.9746      -1.2440      -1.1909  \n```\n:::\n:::\n\n:::\n\n## Memory req for factors and character strings\n\nConsider a large character string such as `income_level` corresponding to a categorical variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincome_level <- c(\n    rep(\"low\", 10000),\n    rep(\"medium\", 10000),\n    rep(\"high\", 10000)\n)\n```\n:::\n\n\nIn early versions of R, storing categorical data as a factor variable was considerably more efficient than storing the same data as strings, because factor variables only store the factor labels once.\n\nHowever, R now uses a global string pool, so each unique string is only stored once, which means storage is now less of an issue.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformat(object.size(income_level), units = \"Kb\") # size of the character string\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"234.6 Kb\"\n```\n:::\n\n```{.r .cell-code}\nformat(object.size(factor(income_level)), units = \"Kb\") # size of the factor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"117.8 Kb\"\n```\n:::\n:::\n\n\n## Summary\n\nFactors can be really useful in many data analytic tasks, but the base R functions to work with factors can lead to some unexpected behavior that can catch new R users.\n\nLet's introduce a package to make wrangling factors easier.\n\n# `forcats`\n\nNext, we will introduce the `forcats` package, which is part of the core `tidyverse`, but can also be loaded directly\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"forcats\")\n```\n:::\n\n\nIt provides tools for dealing with **cat**egorical variables (and it's an anagram of factors!) using a wide range of helpers for working with factors.\n\n## General Social Survey\n\nFor the rest of this lecture, we are going to use the `gss_cat` dataset that is installed when you load `forcats`.\n\nIt's a sample of data from the [General Social Survey](https://gss.norc.org), a long-running US survey conducted by the independent research organization NORC at the University of Chicago.\n\nThe **survey has thousands of questions**, so in `gss_cat`.\n\nI have selected a handful that will illustrate some common challenges you will encounter when working with factors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 21,483 Ã— 9\n    year marital         age race  rincome        partyid    relig denom tvhours\n   <int> <fct>         <int> <fct> <fct>          <fct>      <fct> <fct>   <int>\n 1  2000 Never married    26 White $8000 to 9999  Ind,near â€¦ Protâ€¦ Soutâ€¦      12\n 2  2000 Divorced         48 White $8000 to 9999  Not str râ€¦ Protâ€¦ Baptâ€¦      NA\n 3  2000 Widowed          67 White Not applicable Independeâ€¦ Protâ€¦ No dâ€¦       2\n 4  2000 Never married    39 White Not applicable Ind,near â€¦ Orthâ€¦ Not â€¦       4\n 5  2000 Divorced         25 White Not applicable Not str dâ€¦ None  Not â€¦       1\n 6  2000 Married          25 White $20000 - 24999 Strong deâ€¦ Protâ€¦ Soutâ€¦      NA\n 7  2000 Never married    36 White $25000 or more Not str râ€¦ Chriâ€¦ Not â€¦       3\n 8  2000 Divorced         44 White $7000 to 7999  Ind,near â€¦ Protâ€¦ Luthâ€¦      NA\n 9  2000 Married          44 White $25000 or more Not str dâ€¦ Protâ€¦ Other       0\n10  2000 Married          47 White $25000 or more Strong reâ€¦ Protâ€¦ Soutâ€¦       3\n# â„¹ 21,473 more rows\n```\n:::\n:::\n\n\n::: callout-tip\n### Pro-tip\n\nSince this dataset is provided by a package, you can get more information about the variables with `?gss_cat`.\n:::\n\nWhen factors are stored in a `tibble`, you cannot see their levels so easily. One way to view them is with `count()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>%\n    count(race)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 2\n  race      n\n  <fct> <int>\n1 Other  1959\n2 Black  3129\n3 White 16395\n```\n:::\n:::\n\n\nOr with a bar chart using the `geom_bar()` geom:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>%\n    ggplot(aes(x = race)) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){fig-alt='A bar chart showing the distribution of race. There are ~2000 records with race \"Other\", 3000 with race \"Black\", and other 15,000 with race \"White\".' width=672}\n:::\n:::\n\n\n::: callout-tip\n### Important\n\nWhen **working with factors**, the **two most common operations** are\n\n1.  Changing the **order** of the levels\n2.  Changing the **values** of the levels\n:::\n\nThose operations are described in the sections below.\n\n## Modifying factor order\n\nIt's often useful to **change the order of the factor levels** in a visualization.\n\nLet's explore the `relig` (religion) factor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>%\n    count(relig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 Ã— 2\n   relig                       n\n   <fct>                   <int>\n 1 No answer                  93\n 2 Don't know                 15\n 3 Inter-nondenominational   109\n 4 Native american            23\n 5 Christian                 689\n 6 Orthodox-christian         95\n 7 Moslem/islam              104\n 8 Other eastern              32\n 9 Hinduism                   71\n10 Buddhism                  147\n11 Other                     224\n12 None                     3523\n13 Jewish                    388\n14 Catholic                 5124\n15 Protestant              10846\n```\n:::\n:::\n\n\nWe see there are 15 categories in the `gss_cat` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(gss_cat$relig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$levels\n [1] \"No answer\"               \"Don't know\"             \n [3] \"Inter-nondenominational\" \"Native american\"        \n [5] \"Christian\"               \"Orthodox-christian\"     \n [7] \"Moslem/islam\"            \"Other eastern\"          \n [9] \"Hinduism\"                \"Buddhism\"               \n[11] \"Other\"                   \"None\"                   \n[13] \"Jewish\"                  \"Catholic\"               \n[15] \"Protestant\"              \"Not applicable\"         \n\n$class\n[1] \"factor\"\n```\n:::\n:::\n\n\nThe first level is \"No answer\" followed by \"Don't know\", and so on.\n\nImagine you want to explore the average number of hours spent watching TV (`tvhours`) per day across religions (`relig`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_summary <- gss_cat %>%\n    group_by(relig) %>%\n    summarise(\n        tvhours = mean(tvhours, na.rm = TRUE),\n        n = n()\n    )\n\nrelig_summary %>%\n    ggplot(aes(x = tvhours, y = relig)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){fig-alt='A scatterplot of with tvhours on the x-axis and religion on the y-axis. The y-axis is ordered seemingly aribtrarily making it hard to get any sense of overall pattern.' width=672}\n:::\n:::\n\n\nThe y-axis lists the levels of the `relig` factor in the order of the levels.\n\nHowever, it is **hard to read this plot** because **there's no overall pattern**.\n\n### `fct_reorder`\n\nWe can improve it by **reordering the levels** of `relig` using `fct_reorder()`. `fct_reorder(.f, .x, .fun)` takes three arguments:\n\n-   `.f`, the factor whose levels you want to modify.\n-   `.x`, a numeric vector that you want to use to reorder the levels.\n-   Optionally, `.fun`, a function that's used if there are multiple values of `x` for each value of `f`. The default value is `median`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_summary %>%\n    ggplot(aes(\n        x = tvhours,\n        y = fct_reorder(.f = relig, .x = tvhours)\n    )) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){fig-alt='The same scatterplot as above, but now the religion is displayed in increasing order of tvhours. \"Other eastern\" has the fewest tvhours under 2, and \"Don\\'t know\" has the highest (over 5).' width=672}\n:::\n:::\n\n\n**Reordering** religion makes it **much easier to see** that people in the \"Don't know\" category watch much more TV, and Hinduism & Other Eastern religions watch much less.\n\nAs you start making more complicated transformations, I recommend moving them out of `aes()` and into a separate `mutate()` step.\n\n::: callout-tip\n### Example\n\nYou could rewrite the plot above as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_summary %>%\n    mutate(relig = fct_reorder(relig, tvhours)) %>%\n    ggplot(aes(x = tvhours, y = relig)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n:::\n\n::: callout-tip\n### Another example\n\nWhat if we create a similar plot looking at how average age varies across reported income level?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrincome_summary <-\n    gss_cat %>%\n    group_by(rincome) %>%\n    summarise(\n        age = mean(age, na.rm = TRUE),\n        n = n()\n    )\n\n## Original rincome order\nrincome_summary %>%\n    ggplot(aes(x = age, y = rincome)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){fig-alt='A scatterplot with age on the x-axis and income on the y-axis. Income has been reordered in order of average age which doesn\\'t make much sense. One section of the y-axis goes from $6000-6999, then <$1000, then $8000-9999.' width=672}\n:::\n\n```{.r .cell-code}\n## rincome re-ordered by age's values\nrincome_summary %>%\n    ggplot(aes(x = age, y = fct_reorder(.f = rincome, .x = age))) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-2.png){fig-alt='A scatterplot with age on the x-axis and income on the y-axis. Income has been reordered in order of average age which doesn\\'t make much sense. One section of the y-axis goes from $6000-6999, then <$1000, then $8000-9999.' width=672}\n:::\n:::\n\n\nHere, arbitrarily reordering the levels isn't a good idea! That's because `rincome` already has a principled order that we shouldn't mess with.\n:::\n\n::: callout-tip\n### Pro-tip\n\nReserve `fct_reorder()` for factors whose levels are arbitrarily ordered.\n:::\n\n::: callout-note\n### Question\n\nLet's practice `fct_reorder()`. Using the `palmerpenguins` dataset,\n\n1.  Calculate the average `bill_length_mm` for each species\n2.  Create a scatter plot showing the average for each species.\\\n3.  Go back and reorder the factor `species` based on the average bill length from largest to smallest.\n4.  Now order it from smallest to largest\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 Ã— 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# â„¹ 334 more rows\n# â„¹ 2 more variables: sex <fct>, year <int>\n```\n:::\n\n```{.r .cell-code}\n## Try it out\n```\n:::\n\n:::\n\n### `fct_relevel`\n\nHowever, it does make sense to pull \"Not applicable\" to the front with the other special levels.\n\nYou can use `fct_relevel()`.\n\nIt takes a factor, `f`, and then any number of levels that you want to move to the front of the line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrincome_summary %>%\n    ggplot(aes(age, fct_relevel(rincome, \"Not applicable\"))) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){fig-alt='The same scatterplot but now \"Not Applicable\" is displayed at the bottom of the y-axis. Generally there is a positive association between income and age, and the income band with the highest average age is \"Not applicable\".' width=672}\n:::\n:::\n\n\n::: callout-tip\n### Note\n\nAny levels not mentioned in `fct_relevel` will be left in their existing order.\n:::\n\nAnother type of reordering is useful when you are coloring the lines on a plot. `fct_reorder2(f, x, y)` reorders the factor `f` by the `y` values associated with the largest `x` values.\n\nThis makes the plot easier to read because the colors of the line at the far right of the plot will line up with the legend.\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nby_age <-\n    gss_cat %>%\n    filter(!is.na(age)) %>%\n    count(age, marital) %>%\n    group_by(age) %>%\n    mutate(prop = n / sum(n))\n\nby_age %>%\n    ggplot(aes(age, prop, colour = marital)) +\n    geom_line(na.rm = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){fig-alt='- A line plot with age on the x-axis and proportion on the y-axis.\n  There is one line for each category of marital status: no answer,\n  never married, separated, divorced, widowed, and married. It is\n  a little hard to read the plot because the order of the legend is\n  unrelated to the lines on the plot.\n- Rearranging the legend makes the plot easier to read because the\n  legend colours now match the order of the lines on the far right\n  of the plot. You can see some unsuprising patterns: the proportion\n  never marred decreases with age, married forms an upside down U\n  shape, and widowed starts off low but increases steeply after age\n  60.' width=384}\n:::\n\n```{.r .cell-code}\nby_age %>%\n    ggplot(aes(age, prop, colour = fct_reorder2(marital, age, prop))) +\n    geom_line() +\n    labs(colour = \"marital\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-2.png){fig-alt='- A line plot with age on the x-axis and proportion on the y-axis.\n  There is one line for each category of marital status: no answer,\n  never married, separated, divorced, widowed, and married. It is\n  a little hard to read the plot because the order of the legend is\n  unrelated to the lines on the plot.\n- Rearranging the legend makes the plot easier to read because the\n  legend colours now match the order of the lines on the far right\n  of the plot. You can see some unsuprising patterns: the proportion\n  never marred decreases with age, married forms an upside down U\n  shape, and widowed starts off low but increases steeply after age\n  60.' width=384}\n:::\n:::\n\n\n### `fct_infreq`\n\nFinally, for bar plots, you can use `fct_infreq()` to order levels in decreasing frequency: this is the simplest type of reordering because it doesn't need any extra variables. Combine it with `fct_rev()` if you want them in increasing frequency so that in the bar plot largest values are on the right, not the left.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>%\n    mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%\n    ggplot(aes(marital)) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){fig-alt='A bar char of marital status ordered in from least to most common: no answer (~0), separated (~1,000), widowed (~2,000), divorced (~3,000), never married (~5,000), married (~10,000).' width=672}\n:::\n:::\n\n\n## Modifying factor levels\n\nMore powerful than changing the orders of the levels is changing their values. This allows you to clarify labels for publication, and collapse levels for high-level displays.\n\n### `fct_recode`\n\nThe most general and powerful tool is `fct_recode()`. It allows you to recode, or change, the value of each level. For example, take the `gss_cat$partyid`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>%\n    count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 Ã— 2\n   partyid                n\n   <fct>              <int>\n 1 No answer            154\n 2 Don't know             1\n 3 Other party          393\n 4 Strong republican   2314\n 5 Not str republican  3032\n 6 Ind,near rep        1791\n 7 Independent         4119\n 8 Ind,near dem        2499\n 9 Not str democrat    3690\n10 Strong democrat     3490\n```\n:::\n:::\n\n\nThe **levels are terse and inconsistent**.\n\nLet's tweak them to be longer and use a parallel construction.\n\nLike most rename and recoding functions in the tidyverse:\n\n-   the **new values go on the left**\n-   the **old values go on the right**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>%\n    mutate(partyid = fct_recode(partyid,\n        \"Republican, strong\"    = \"Strong republican\",\n        \"Republican, weak\"      = \"Not str republican\",\n        \"Independent, near rep\" = \"Ind,near rep\",\n        \"Independent, near dem\" = \"Ind,near dem\",\n        \"Democrat, weak\"        = \"Not str democrat\",\n        \"Democrat, strong\"      = \"Strong democrat\"\n    )) %>%\n    count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 Ã— 2\n   partyid                   n\n   <fct>                 <int>\n 1 No answer               154\n 2 Don't know                1\n 3 Other party             393\n 4 Republican, strong     2314\n 5 Republican, weak       3032\n 6 Independent, near rep  1791\n 7 Independent            4119\n 8 Independent, near dem  2499\n 9 Democrat, weak         3690\n10 Democrat, strong       3490\n```\n:::\n:::\n\n\n::: callout-tip\n### Note\n\n`fct_recode()` will leave the levels that aren't explicitly mentioned as is, and will warn you if you accidentally refer to a level that doesn't exist.\n:::\n\nTo combine groups, you can assign multiple old levels to the same new level:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>%\n    mutate(partyid = fct_recode(partyid,\n        \"Republican, strong\"    = \"Strong republican\",\n        \"Republican, weak\"      = \"Not str republican\",\n        \"Independent, near rep\" = \"Ind,near rep\",\n        \"Independent, near dem\" = \"Ind,near dem\",\n        \"Democrat, weak\"        = \"Not str democrat\",\n        \"Democrat, strong\"      = \"Strong democrat\",\n        \"Other\"                 = \"No answer\",\n        \"Other\"                 = \"Don't know\",\n        \"Other\"                 = \"Other party\"\n    )) %>%\n    count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 Ã— 2\n  partyid                   n\n  <fct>                 <int>\n1 Other                   548\n2 Republican, strong     2314\n3 Republican, weak       3032\n4 Independent, near rep  1791\n5 Independent            4119\n6 Independent, near dem  2499\n7 Democrat, weak         3690\n8 Democrat, strong       3490\n```\n:::\n:::\n\n\nUse this technique with care: if you group together categories that are truly different you will end up with misleading results.\n\n### `fct_collapse`\n\nIf you want to collapse a lot of levels, `fct_collapse()` is a useful variant of `fct_recode()`.\n\nFor **each new variable**, you can **provide a vector of old levels**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>%\n    mutate(partyid = fct_collapse(partyid,\n        \"other\" = c(\"No answer\", \"Don't know\", \"Other party\"),\n        \"rep\" = c(\"Strong republican\", \"Not str republican\"),\n        \"ind\" = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),\n        \"dem\" = c(\"Not str democrat\", \"Strong democrat\")\n    )) %>%\n    count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 Ã— 2\n  partyid     n\n  <fct>   <int>\n1 other     548\n2 rep      5346\n3 ind      8409\n4 dem      7180\n```\n:::\n:::\n\n\n### `fct_lump_*`\n\nSometimes you **just want to lump together the small groups** to make a plot or table simpler.\n\nThat's the **job of the `fct_lump_*()` family of functions**.\n\n`fct_lump_lowfreq()` is a simple starting point that progressively lumps the smallest groups categories into \"Other\", always keeping \"Other\" as the smallest category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>%\n    mutate(relig = fct_lump_lowfreq(relig)) %>%\n    count(relig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 Ã— 2\n  relig          n\n  <fct>      <int>\n1 Protestant 10846\n2 Other      10637\n```\n:::\n:::\n\n\nIn this case it's not very helpful: it is true that the majority of Americans in this survey are Protestant, but we'd probably like to see some more details!\n\nInstead, we can use the `fct_lump_n()` to **specify that we want exactly 10 groups**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>%\n    mutate(relig = fct_lump_n(relig, n = 10)) %>%\n    count(relig, sort = TRUE) %>%\n    print(n = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 Ã— 2\n   relig                       n\n   <fct>                   <int>\n 1 Protestant              10846\n 2 Catholic                 5124\n 3 None                     3523\n 4 Christian                 689\n 5 Other                     458\n 6 Jewish                    388\n 7 Buddhism                  147\n 8 Inter-nondenominational   109\n 9 Moslem/islam              104\n10 Orthodox-christian         95\n```\n:::\n:::\n\n\nRead the documentation to learn about `fct_lump_min()` and `fct_lump_prop()` which are useful in other cases.\n\n## Ordered factors\n\nThere's a **special type of factor** that needs to be mentioned briefly: ordered factors.\n\n**Ordered factors**, created with `ordered()`, imply a strict ordering and equal distance between levels:\n\nThe **first level** is \"less than\" the **second level** by the same amount that the second level is \"less than\" the **third level**, and so on...\n\nYou can recognize them when printing because they use `<` between the factor levels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nordered(c(\"a\", \"b\", \"c\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] a b c\nLevels: a < b < c\n```\n:::\n:::\n\n\nHowever, in practice, `ordered()` factors **behave very similarly to regular factors**.\n\n# Post-lecture materials\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1.  Explore the distribution of `rincome` (reported income). What makes the default bar chart hard to understand? How could you improve the plot?\n\n2.  What is the most common `relig` in this survey? What's the most common `partyid`?\n\n3.  Which `relig` does `denom` (denomination) apply to? How can you find out with a table? How can you find out with a visualization?\n\n4.  There are some suspiciously high numbers in `tvhours`. Is the mean a good summary?\n\n5.  For each factor in `gss_cat` identify whether the order of the levels is arbitrary or principled.\n\n6.  Why did moving \"Not applicable\" to the front of the levels move it to the bottom of the plot?\n\n7.  How have the proportions of people identifying as Democrat, Republican, and Independent changed over time?\n\n8.  How could you collapse `rincome` into a small set of categories?\n\n9.  Notice there are 9 groups (excluding other) in the `fct_lump` example above. Why not 10? (Hint: type `?fct_lump`, and find the default for the argument `other_level` is \"Other\".)\n:::\n\n### Additional Resources\n\n::: callout-tip\n-   <https://r4ds.had.co.nz/factors>\n-   [Wrangling Categorical Data in R](https://peerj.com/preprints/3163) by Amelia McNamara, Nicholas J Horton\n-   <https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors>\n-   <https://forcats.tidyverse.org>\n:::\n\n# R session information\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(width = 120)\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nâ”€ Session info â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.6\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/New_York\n date     2023-10-02\n pandoc   3.1.5 @ /opt/homebrew/bin/ (via rmarkdown)\n\nâ”€ Packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n package        * version date (UTC) lib source\n cli              3.6.1   2023-03-23 [1] CRAN (R 4.3.0)\n colorout         1.3-0   2023-09-28 [1] Github (jalvesaq/colorout@8384882)\n colorspace       2.1-0   2023-01-23 [1] CRAN (R 4.3.0)\n digest           0.6.33  2023-07-07 [1] CRAN (R 4.3.0)\n dplyr          * 1.1.3   2023-09-03 [1] CRAN (R 4.3.0)\n evaluate         0.21    2023-05-05 [1] CRAN (R 4.3.0)\n fansi            1.0.4   2023-01-22 [1] CRAN (R 4.3.0)\n farver           2.1.1   2022-07-06 [1] CRAN (R 4.3.0)\n fastmap          1.1.1   2023-02-24 [1] CRAN (R 4.3.0)\n forcats        * 1.0.0   2023-01-29 [1] CRAN (R 4.3.0)\n generics         0.1.3   2022-07-05 [1] CRAN (R 4.3.0)\n ggplot2        * 3.4.3   2023-08-14 [1] CRAN (R 4.3.0)\n glue             1.6.2   2022-02-24 [1] CRAN (R 4.3.0)\n gtable           0.3.4   2023-08-21 [1] CRAN (R 4.3.0)\n hms              1.1.3   2023-03-21 [1] CRAN (R 4.3.0)\n htmltools        0.5.6   2023-08-10 [1] CRAN (R 4.3.0)\n htmlwidgets      1.6.2   2023-03-17 [1] CRAN (R 4.3.0)\n jsonlite         1.8.7   2023-06-29 [1] CRAN (R 4.3.0)\n knitr            1.44    2023-09-11 [1] CRAN (R 4.3.0)\n labeling         0.4.3   2023-08-29 [1] CRAN (R 4.3.0)\n lifecycle        1.0.3   2022-10-07 [1] CRAN (R 4.3.0)\n lubridate      * 1.9.2   2023-02-10 [1] CRAN (R 4.3.0)\n magrittr         2.0.3   2022-03-30 [1] CRAN (R 4.3.0)\n munsell          0.5.0   2018-06-12 [1] CRAN (R 4.3.0)\n palmerpenguins * 0.1.1   2022-08-15 [1] CRAN (R 4.3.0)\n pillar           1.9.0   2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig        2.0.3   2019-09-22 [1] CRAN (R 4.3.0)\n purrr          * 1.0.2   2023-08-10 [1] CRAN (R 4.3.0)\n R6               2.5.1   2021-08-19 [1] CRAN (R 4.3.0)\n readr          * 2.1.4   2023-02-10 [1] CRAN (R 4.3.0)\n rlang            1.1.1   2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown        2.24    2023-08-14 [1] CRAN (R 4.3.1)\n rstudioapi       0.15.0  2023-07-07 [1] CRAN (R 4.3.0)\n scales           1.2.1   2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo      1.2.2   2021-12-06 [1] CRAN (R 4.3.0)\n stringi          1.7.12  2023-01-11 [1] CRAN (R 4.3.0)\n stringr        * 1.5.0   2022-12-02 [1] CRAN (R 4.3.0)\n tibble         * 3.2.1   2023-03-20 [1] CRAN (R 4.3.0)\n tidyr          * 1.3.0   2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect       1.2.0   2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse      * 2.0.0   2023-02-22 [1] CRAN (R 4.3.0)\n timechange       0.2.0   2023-01-11 [1] CRAN (R 4.3.0)\n tzdb             0.4.0   2023-05-12 [1] CRAN (R 4.3.0)\n utf8             1.2.3   2023-01-31 [1] CRAN (R 4.3.0)\n vctrs            0.6.3   2023-06-14 [1] CRAN (R 4.3.0)\n withr            2.5.0   2022-03-03 [1] CRAN (R 4.3.0)\n xfun             0.40    2023-08-09 [1] CRAN (R 4.3.0)\n yaml             2.3.7   2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}