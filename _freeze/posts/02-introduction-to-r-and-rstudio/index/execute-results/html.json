{
  "hash": "5ba4dca443337c86e30c6e59aa2c70e8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"02 - Introduction to R and RStudio!\"\nauthor:\n  - name: Leonardo Collado Torres\n    url: http://lcolladotor.github.io/\n    affiliations:\n      - id: libd\n        name: Lieber Institute for Brain Development\n        url: https://libd.org/\n      - id: jhsph\n        name: Johns Hopkins Bloomberg School of Public Health Department of Biostatistics\n        url: https://publichealth.jhu.edu/departments/biostatistics\ndescription: \"Let's dig into the R programming language and the RStudio integrated developer environment\"\nimage: https://github.com/njtierney/rmd4sci/raw/master/figs/rstudio-screenshot.png\ncategories: [module 1, week 1, R, programming, RStudio]\n---\n\n\n*This lecture, as the rest of the course, is adapted from the version [Stephanie C. Hicks](https://www.stephaniehicks.com/) designed and maintained in 2021 and 2022. Check the recent changes to this file through the [GitHub history](https://github.com/lcolladotor/jhustatcomputing/commits/main/posts/02-introduction-to-r-and-rstudio/index.qmd).*\n\n> There are only two kinds of languages: the ones people complain about and the ones nobody uses. ---*Bjarne Stroustrup*\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n### Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1.  [An overview and history of R](https://rdpeng.github.io/Biostat776/lecture-introduction-and-overview.html) from Roger Peng\n2.  [Installing R and RStudio](https://rafalab.github.io/dsbook/installing-r-rstudio.html) from Rafael Irizarry\n3.  [Getting Started in R and RStudio](https://rafalab.github.io/dsbook/getting-started.html) from Rafael Irizarry\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n-   <https://rdpeng.github.io/Biostat776/lecture-introduction-and-overview.html>\n-   <https://rafalab.github.io/dsbook>\n-   <https://rmd4sci.njtierney.com>\n-   <https://andreashandel.github.io/MADAcourse>\n\n# Learning objectives\n\n::: callout-note\n## Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Learn about (some of) the history of R.\n-   Identify some of the strengths and weaknesses of R.\n-   Install R and Rstudio on your computer.\n-   Know how to install and load R packages.\n:::\n\n# Overview and history of R\n\nBelow is a very quick introduction to R, to get you set up and running. We'll go deeper into R and coding later.\n\n### tl;dr (R in a nutshell)\n\nLike every programming language, R has its advantages and disadvantages. If you search the internet, you will quickly discover lots of folks with opinions about R. Some of the features that are useful to know are:\n\n-   R is open-source, freely accessible, and cross-platform (multiple OS).\n-   R is a [\"high-level\" programming language](https://en.wikipedia.org/wiki/High-level_programming_language), relatively easy to learn.\n    -   While \"Low-level\" programming languages (e.g. Fortran, C, etc) often have more efficient code, they can also be harder to learn because it is designed to be close to a machine language.\n    -   In contrast, high-level languages deal more with variables, objects, functions, loops, and other abstract CS concepts with a focus on usability over optimal program efficiency.\n-   R is great for statistics, data analysis, websites, web apps, data visualizations, and so much more!\n-   R integrates easily with document preparation systems like $\\LaTeX$, but R files can also be used to create `.docx`, `.pdf`, `.html`, `.ppt` files with integrated R code output and graphics.\n-   The R Community is very dynamic, helpful and welcoming.\n    -   Check out the [#rstats](https://twitter.com/search?q=%23rstats) or [#rtistry](https://twitter.com/search?q=%23rtistry) on Twitter, [TidyTuesday](https://www.tidytuesday.com) podcast and community activity in the [R4DS Online Learning Community](https://www.rfordatasci.com), and [r/rstats](https://www.reddit.com/r/rstats/) subreddit.\n    -   If you are looking for more local resources, check out [R-Ladies Baltimore](https://www.meetup.com/rladies-baltimore/).\n-   Through R packages, it is easy to get lots of state-of-the-art algorithms.\n-   Documentation and help files for R are generally good.\n\nWhile we use R in this course, it is not the only option to analyze data. Maybe the most similar to R, and widely used, is Python, which is also free. There is also commercial software that can be used to analyze data (e.g., Matlab, Mathematica, Tableau, SAS, SPSS). Other more general programming languages are suitable for certain types of analyses as well (e.g., C, Fortran, Perl, Java, Julia).\n\nDepending on your future needs or jobs, you might have to learn one or several of those additional languages. The good news is that even though those languages are all different, they all share general ways of thinking and structuring code. So once you understand a specific concept (e.g., variables, loops, branching statements or functions), it applies to all those languages. Thus, learning a new programming language is much easier once you already know one. And R is a good one to get started with.\n\nWith the skills gained in this course, hopefully you will find R a fun and useful programming language for your future projects.\n\n![Artwork by Allison Horst on learning R](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/r_first_then.png){width=\"80%\"}\n\n\\[**Source**: [Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\\]\n\n### Basic Features of R\n\nToday R runs on almost any standard computing platform and operating system. Its open source nature means that anyone is free to adapt the software to whatever platform they choose. Indeed, R has been reported to be running on modern tablets, phones, PDAs, and game consoles.\n\nOne nice feature that R shares with many popular open source projects is frequent releases. These days there is a major annual release, typically at the end of April, where major new features are incorporated and released to the public. Throughout the year, smaller-scale bugfix releases will be made as needed. The frequent releases and regular release cycle indicates active development of the software and ensures that bugs will be addressed in a timely manner. Of course, while the core developers control the primary source tree for R, many people around the world make contributions in the form of new feature, bug fixes, or both.\n\nAnother key advantage that R has over many other statistical packages (even today) is its sophisticated graphics capabilities. R's ability to create \"publication quality\" graphics has existed since the very beginning and has generally been better than competing packages. Today, with many more visualization packages available than before, that trend continues. R's *base* graphics system allows for very fine control over essentially every aspect of a plot or graph. Other newer graphics systems, like `lattice` (not as used nowadays) and `ggplot2` (very widely used now) allow for complex and sophisticated visualizations of high-dimensional data.\n\nR has maintained the original S philosophy (see box below), which is that **it provides a language that is both useful for interactive work, but contains a powerful programming language for developing new tools**. This allows the user, who takes existing tools and applies them to data, to slowly but surely become a developer who is creating new tools.\n\n::: callout-tip\nFor a great discussion on an overview and history of R and the S programming language, read through [this chapter](https://rdpeng.github.io/Biostat776/lecture-introduction-and-overview.html) from Roger D. Peng.\n:::\n\nFinally, one of the joys of using R has nothing to do with the language itself, but rather with the active and vibrant user community. In many ways, a language is successful inasmuch as it creates a platform with which many people can create new things. R is that platform and thousands of people around the world have come together to make contributions to R, to develop packages, and help each other use R for all kinds of applications. The R-help and R-devel mailing lists have been highly active for over a decade now and there is considerable activity on web sites like GitHub, [Posit (RStudio) Community](https://community.rstudio.com/), [Bioconductor Support](https://support.bioconductor.org/), Stack Overflow, Twitter [#rstats](https://twitter.com/search?q=%23rstats), [#rtistry](https://twitter.com/search?q=%23rtistry), and [Reddit](https://www.reddit.com/r/rstats/).\n\n### Free Software\n\nA major advantage that R has over many other statistical packages and is that it's free in the sense of free software (it's also free in the sense of free beer). The copyright for the primary source code for R is held by the [R Foundation](http://www.r-project.org/foundation/) and is published under the [GNU General Public License version 2.0](http://www.gnu.org/licenses/gpl-2.0.html).\n\nAccording to the Free Software Foundation, with *free software*, you are granted the following [four freedoms](http://www.gnu.org/philosophy/free-sw.html)\n\n-   The freedom to run the program, for any purpose (freedom 0).\n\n-   The freedom to study how the program works, and adapt it to your needs (freedom 1). Access to the source code is a precondition for this.\n\n-   The freedom to redistribute copies so you can help your neighbor (freedom 2).\n\n-   The freedom to improve the program, and release your improvements to the public, so that the whole community benefits (freedom 3). Access to the source code is a precondition for this.\n\n::: callout-tip\nYou can visit the [Free Software Foundation's web site](http://www.fsf.org) to learn a lot more about free software. The Free Software Foundation was founded by Richard Stallman in 1985 and [Stallman's personal web site](https://stallman.org) is an interesting read if you happen to have some spare time.\n:::\n\n### Design of the R System\n\nThe primary R system is available from the [Comprehensive R Archive Network](http://cran.r-project.org), also known as CRAN. CRAN also hosts many add-on packages that can be used to extend the functionality of R.\n\nThe R system is divided into 2 conceptual parts:\n\n1.  The \"base\" R system that you download from CRAN:\n\n-   [Linux](http://cran.r-project.org/bin/linux/)\n-   [Windows](http://cran.r-project.org/bin/windows/)\n-   [Mac](http://cran.r-project.org/bin/macosx/)\n\n2.  Everything else.\n\nR functionality is divided into a number of *packages*.\n\n-   The \"base\" R system contains, among other things, the `base` package which is required to run R and contains the most fundamental functions.\n\n-   The other packages contained in the \"base\" system include `utils`, `stats`, `datasets`, `graphics`, `grDevices`, `grid`, `methods`, `tools`, `parallel`, `compiler`, `splines`, `tcltk`, `stats4`.\n\n-   There are also \"Recommended\" packages: `boot`, `class`, `cluster`, `codetools`, `foreign`, `KernSmooth`, `lattice`, `mgcv`, `nlme`, `rpart`, `survival`, `MASS`, `spatial`, `nnet`, `Matrix`.\n\nWhen you download a fresh installation of R from CRAN, you get all of the above, which represents a substantial amount of functionality. However, there are many other packages available:\n\n-   There are over 21,163 packages on CRAN that have been developed by users and programmers around the world.\n\n-   There are also over 2,300 packages associated with the [Bioconductor project](http://bioconductor.org).\n\n-   People often make packages available on GitHub (very common) and their personal websites (not so common nowadays); there is no reliable way to keep track of how many packages are available in this fashion.\n\n![Slide from 2012 by Roger D. Peng](/images/140.776_2012_websites.png){fig-alt=\"Screenshot from a slide from 2012 showing that R developers share their packages on personal websites\" fig-align=\"center\"}\n\n::: callout-note\n## Questions\n\n1.  How many R packages are on CRAN today?\n2.  How many R packages are on Bioconductor today?\n3.  How many R packages are on GitHub today?\n:::\n\nWant to learn more about Bioconductor? Check this video:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/c0Ch_sXiGDQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\n\n</iframe>\n\n### Limitations of R\n\nNo programming language or statistical analysis system is perfect. R certainly has a number of drawbacks. For starters, R is essentially based on **almost 50 year old technology**, going back to the original S system developed at Bell Labs. There was originally little built in support for dynamic or 3-D graphics (but things have improved greatly since the \"old days\").\n\nAnother commonly cited limitation of R is that **objects must generally be stored in physical memory** (though this is increasingly not true anymore). This is in part due to the scoping rules of the language, but R generally is more of a memory hog than other statistical packages. However, there have been a number of advancements to deal with this, both in the R core and also in a number of packages developed by contributors. Also, computing power and capacity has continued to grow over time and amount of physical memory that can be installed on even a consumer-level laptop is substantial. While we will likely never have enough physical memory on a computer to handle the increasingly large datasets that are being generated, the situation has gotten quite a bit easier over time.\n\nAt a higher level one \"limitation\" of R is that **its functionality is based on consumer demand and (voluntary) user contributions**. If no one feels like implementing your favorite method, then it's *your* job to implement it (or you need to pay someone to do it). The capabilities of the R system generally reflect the interests of the R user community. As the community has ballooned in size over the past 10 years, the capabilities have similarly increased. When I first started using R, there was very little in the way of functionality for the physical sciences (physics, astronomy, etc.). However, now some of those communities have adopted R and we are seeing more code being written for those kinds of applications.\n\n# Using R and RStudio\n\n> If R is the engine and bare bones of your car, then RStudio is like the rest of the car. The engine is super critical part of your car. But in order to make things properly functional, you need to have a steering wheel, comfy seats, a radio, rear and side view mirrors, storage, and seatbelts. --- *Nicholas Tierney*\n\n\\[[Source](https://rmd4sci.njtierney.com)\\]\n\nThe RStudio layout has the following features:\n\n-   On the upper left, something called a Rmarkdown script\n-   On the lower left, the R console\n-   On the lower right, the view for files, plots, packages, help, and viewer.\n-   On the upper right, the environment / history pane\n\n![A screenshot of the RStudio integrated developer environment (IDE) -- aka the working environment](https://github.com/njtierney/rmd4sci/raw/master/figs/rstudio-screenshot.png)\n\nThe R console is the bit where you can run your code. This is where the R code in your Rmarkdown document gets sent to run (we'll learn about these files later).\n\nThe file/plot/pkg viewer is a handy browser for your current files, like Finder, or File Explorer, plots are where your plots appear, you can view packages, see the help files. And the environment / history pane contains the list of things you have created, and the past commands that you have run.\n\n### Installing R and RStudio\n\n-   If you have not already, [install R first](http://cran.r-project.org). If you already have R installed, make sure it is a fairly recent version, version 4.4.1 or newer. If yours is older that version 4.3.0, I suggest you update (install a new R version).\n-   Once you have R installed, install the free version of [RStudio Desktop](https://www.rstudio.com/products/rstudio/download/). Again, make sure it's a recent version.\n\n::: callout-tip\nInstalling R and RStudio should be fairly straightforward. However, a great set of detailed instructions is in Rafael Irizarry's `dsbook`\n\n-   <https://rafalab.github.io/dsbook/installing-r-rstudio.html>\n:::\n\nIf things don't work, ask for help in the Courseplus discussion board.\n\nI have both a macOS and a winOS computer, and have used Linux (Ubuntu) in the past too, but I might be more limited in how much I can help you on Linux.\n\n### RStudio default options\n\nTo first get set up, I highly recommend changing the following setting\n\nTools \\> Global Options (or `Cmd + ,` on macOS)\n\nUnder the **General** tab:\n\n-   For **workspace**\n    -   Uncheck restore .RData into workspace at startup\n    -   Save workspace to .RData on exit : \"Never\"\n-   For **History**\n    -   Uncheck \"Always save history (even when not saving .RData)\n    -   Uncheck \"Remove duplicate entries in history\"\n\nThis means that you won't save the objects and other things that you create in your R session and reload them. This is important for two reasons\n\n1.  **Reproducibility**: you don't want to have objects from last week cluttering your session\n2.  **Privacy**: you don't want to save private data or other things to your session. You only want to read these in.\n\nYour \"history\" is the commands that you have entered into R.\n\nAdditionally, not saving your history means that you won't be relying on things that you typed in the last session, which is a good habit to get into!\n\n### Installing and loading R packages\n\nAs we discussed, most of the functionality and features in R come in the form of add-on packages. There are tens of thousands of packages available, some big, some small, some well documented, some not. We will be using many different packages in this course. Of course, you are free to install and use any package you come across for any of the assignments.\n\nThe \"official\" place for packages is the [CRAN website](https://cran.r-project.org/web/packages/available_packages_by_name.html). If you are interested in packages on a specific topic, the [CRAN task views](http://cran.r-project.org/web/views/) provide curated descriptions of packages sorted by topic.\n\nTo install an R package from CRAN, one can simply call the `install.packages()` function and pass the name of the package as an argument. For example, to install the `ggplot2` package from CRAN: open RStudio,go to the R prompt (the `>` symbol) in the lower-left corner and type\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\n\n## Below is an example for installing more than one package at a time:\n\n## Install R packages for project 0\ninstall.packages(\n    c(\"postcards\", \"usethis\", \"gitcreds\")\n)\n```\n:::\n\n\nand the appropriate version of the package will be installed.\n\nOften, a package needs other packages to work (called dependencies), and they are installed automatically. It usually does not matter if you use a single or double quotation mark around the name of the package.\n\n::: callout-note\n## Questions\n\n1.  As you installed the `ggplot2` package, what other packages were installed?\n2.  What happens if you tried to install `GGplot2`?\n:::\n\nIt could be that you already have all packages required by `ggplot2` installed. In that case, you will not see any other packages installed. To see which of the packages above `ggplot2` needs (and thus installs if it is not present), type into the R console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntools::package_dependencies(\"ggplot2\")\n```\n:::\n\n\nIn RStudio, you can also install (and update/remove) packages by clicking on the 'Packages' tab in the bottom right window.\n\nIt is very common these days for packages to be developed on GitHub. It is possible to install packages from GitHub directly. Those usually contain the latest version of the package, with features that might not be available yet on the CRAN website. Sometimes, in early development stages, a package is only on GitHub until the developer(s) feel it is good enough for CRAN submission. So installing from GitHub gives you the latest. The downside is that packages under development can often be buggy and not working right. To install packages from GitHub, you need to install the `remotes` package and then use the following function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github()\n```\n:::\n\n\nWe will not do that now, but it is quite likely that at one point later in this course we will.\n\nYou only need to install a package once, unless you upgrade/re-install R. Once installed, you still need to load the package before you can use it. That has to happen every time you start a new R session. You do that using the `library()` command. For instance to load the `ggplot2` package, type\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"ggplot2\")\n```\n:::\n\n\nYou may or may not see a short message on the screen. Some packages show messages when you load them, and others do not.\n\nThis was a quick overview of R packages. We will use a lot of them, so you will get used to them rather quickly.\n\n### Getting started in RStudio\n\nWhile one can use R and do pretty much every task, including all the ones we cover in this class, without using RStudio, RStudio is very useful, has lots of features that make your R coding life easier and has become pretty much the default integrated development environment (IDE) for R. Since RStudio has lots of features, it takes time to learn them. A good resource to learn more about RStudio are the [R Studio Essentials](https://resources.rstudio.com/) collection of videos.\n\n::: callout-tip\nFor more information on setting up and getting started with R, RStudio, and R packages, read the Getting Started chapter in the `dsbook`:\n\n-   <https://rafalab.github.io/dsbook/getting-started.html>\n\nThis chapter gives some tips, shortcuts, and ideas that might be of interest even to those of you who already have R and/or RStudio experience.\n:::\n\n# Post-lecture materials\n\n### Links to inspiring use cases\n\n-   [RStudio Conf 2019](https://www.rstudio.com/resources/rstudioconf-2019/) talk by [Brooke Watson Madubuonwu](https://x.com/brookLYNevery1) on \"[R at the ACLU: Joining tables to to reunite families](https://posit.co/resources/videos/r-at-the-aclu-joining-tables-to-to-reunite-families/)\"\n\n-   [RStudio Conf 2020](https://resources.rstudio.com/resources/rstudioconf-2020/) talk by [María Teresa Ortíz Mancera](https://x.com/TeresaOM) on \"[Mexican electoral quick count night with R](https://posit.co/resources/videos/mexican-electoral-quick-count-night-with-r-maria-ortiz-mancera/)\"\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: callout-note\n## Questions\n\n1.  If a software company asks you, as a requirement for using their software, to sign a license that restricts you from using their software to commit illegal activities, is this consistent with the \"Four Freedoms\" of Free Software?\n\n2.  What is an R package and what is it used for?\n\n3.  What function in R can be used to install packages from CRAN?\n\n4.  What is a limitation of the current R system?\n:::\n\n### Additional Resources\n\n::: callout-tip\n-   [R for Data Science (2e)](https://r4ds.hadley.nz/) by Wickham & Grolemund (2017, 2e is from July 18th 2023). Covers most of the basics of using R for data analysis.\n\n-   [Advanced R](https://adv-r.hadley.nz) by Wickham (2014). Covers a number of areas including object-oriented, programming, functional programming, profiling and other advanced topics.\n\n-   [RStudio IDE cheatsheet](https://github.com/rstudio/cheatsheets/raw/main/rstudio-ide.pdf)\n:::\n\n# R session information\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(width = 120)\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       macOS Sonoma 14.5\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/New_York\n date     2024-08-27\n pandoc   3.2 @ /opt/homebrew/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.3   2024-06-21 [1] CRAN (R 4.4.0)\n colorout    * 1.3-0.2 2024-05-03 [1] Github (jalvesaq/colorout@c6113a2)\n digest        0.6.36  2024-06-23 [1] CRAN (R 4.4.0)\n evaluate      0.24.0  2024-06-10 [1] CRAN (R 4.4.0)\n fastmap       1.2.0   2024-05-15 [1] CRAN (R 4.4.0)\n htmltools     0.5.8.1 2024-04-04 [1] CRAN (R 4.4.0)\n htmlwidgets   1.6.4   2023-12-06 [1] CRAN (R 4.4.0)\n jsonlite      1.8.8   2023-12-04 [1] CRAN (R 4.4.0)\n knitr         1.48    2024-07-07 [1] CRAN (R 4.4.0)\n rlang         1.1.4   2024-06-04 [1] CRAN (R 4.4.0)\n rmarkdown     2.27    2024-05-17 [1] CRAN (R 4.4.0)\n rstudioapi    0.16.0  2024-03-24 [1] CRAN (R 4.4.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.4.0)\n xfun          0.46    2024-07-18 [1] CRAN (R 4.4.0)\n yaml          2.3.10  2024-07-26 [1] CRAN (R 4.4.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}