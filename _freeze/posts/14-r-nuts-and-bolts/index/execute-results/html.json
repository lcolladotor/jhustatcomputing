{
  "hash": "fcc4435141f0c3e4abe9c6fa9dc1fe31",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"14 - R Nuts and Bolts\"\nauthor:\n  - name: Leonardo Collado Torres\n    url: http://lcolladotor.github.io/\n    affiliations:\n      - id: libd\n        name: Lieber Institute for Brain Development\n        url: https://libd.org/\n      - id: jhsph\n        name: Johns Hopkins Bloomberg School of Public Health Department of Biostatistics\n        url: https://publichealth.jhu.edu/departments/biostatistics\ndescription: \"Introduction to data types and objects in R\"\ncategories: [module 4, week 4, R, programming]\n---\n\n\n*This lecture, as the rest of the course, is adapted from the version [Stephanie C. Hicks](https://www.stephaniehicks.com/) designed and maintained in 2021 and 2022. Check the recent changes to this file through the [GitHub history](https://github.com/lcolladotor/jhustatcomputing/commits/main/posts/14-r-nuts-and-bolts/index.qmd).*\n\n<!-- Add interesting quote -->\n\n# Interacting with LLMs in RStudio IDE / Positron\n\n> Can we use ChatGPT or other LLMs to help us write R code in this class?\n\nOr what about outside of this class? After all, it'll be done sooner rather than later.\n\nYes you can! Though I think that using GitHub Copilot is likely the most efficient option, I want to highlight a new package called `chattr` that allows you to use LLMs like GPT-4.1 directly from RStudio IDE / Positron. `chattr` is documented at <https://mlverse.github.io/chattr/>. At this point, hopefully your application to use GitHub Copilot has been approved. If you haven't completed this application, see [our first lecture](../01-welcome/#how-to-apply-for-github-education-and-configure-github-copilot) for the details.\n\nIn general, you might want to follow the news from the _Posit AI newsletter_ which was launched last month: <https://posit.co/blog/2025-08-29-ai-newsletter/>. You might want to follow both [Simon P. Couch](https://bsky.app/profile/simonpcouch.com) and [Sara Altman](https://bsky.app/profile/sara-altman.bsky.social) on Bluesky or on LinkedIn: [Simon P. Couch](https://www.linkedin.com/in/simonpcouch/) and [Sara Altman](https://www.linkedin.com/in/sarakaltman/).\n\nBelow is a demo of how to use `chattr` with the GitHub Copilot LLM model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Install ellmer and chattr\ninstall.packages(c(\"ellmer\", \"chattr\"))\n\n## Load both packages\nlibrary(\"ellmer\")\nlibrary(\"chattr\")\n\n## Specify that you'll use the GitHub Copilot model\nmy_chat <- ellmer::chat_github()\nchattr::chattr_use(my_chat)\n\n## Load some packages for analysis\nlibrary(\"tidyverse\")\n\n## Load the penguins dataset to have something we can\n## explore with\nlibrary(\"palmerpenguins\")\nglimpse(penguins)\n\n## You can now either interact with the LLM through\n## commands like this one:\nmy_chat$chat(\"Explore the relationship between bill_length_mm and bill_depth_mm across species and island using ggplot2 color aesthetics and facets.\")\nmy_chat$chat(\"What do we know the variables in the penguins dataset?\")\nmy_chat$chat(\"Please provide me a more detailed description and code for exploring this dataset\")\n\n## or launch the chattr app\nchattr::chattr_app()\n\n## Edit the option to include at least 1 data frame.\n## Then type the following prompt:\n## Explore the relationship between bill_length_mm and bill_depth_mm across species and island using ggplot2 color aesthetics and facets.\n\n## This was my answer by the gpt-4.1 model:\nlibrary(tidyverse)\npenguins <- readr::read_csv('https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins.csv')\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point(na.rm = TRUE) +\n  facet_wrap(~ island) +\n  theme_minimal()\n## Notice how it used a \"theme_minimal()\" although I didn't ask for it!\n\n## If you open the chattr chat again, you'll see \n## your full chat history there too. Now you can\n## use the option to also send your chat history\n## when sending prompts to the LLM.\n\n## Try:\n## Now make the graph interactive using plotly.\n\n## Here was my answer from the LLM:\nlibrary(tidyverse)\nlibrary(plotly)\n\npenguins <- readr::read_csv('https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins.csv')\n\np <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point(na.rm = TRUE) +\n  facet_wrap(~ island) +\n  theme_minimal()\n\nggplotly(p)\n```\n:::\n\n\nSee `chattr::chatter_defaults()` for more options on how to customize your experience with `chattr` <https://mlverse.github.io/chattr/reference/chattr_defaults.html>.\n\nFor more about AI and R, you might want to check the LIBD RStats club 2025-01-31 session on [\"R coding using GitHub Copilot with RStudio and related R packages\"](https://docs.google.com/document/d/16VP6nWsuXvskyQ6askViEx21e1hhMjK3xKVFWC3SfKY/edit?usp=sharing).\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/qWuoVQG5BZw?si=zcJIKn09AvqvF_gs\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1.  <https://rafalab.github.io/dsbook/r-basics>\n2.  <https://r4ds.had.co.nz/vectors.html?q=typeof#vectors>\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n-   <https://rdpeng.github.io/Biostat776/lecture-r-nuts-and-bolts>\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Know the 5 basic built-in data types (or classes) of objects in R\n-   Know the types of attributes (or metadata) R objects can have\n-   Be able to create a vector, matrix, data frame, factor, and list in R\n-   Recognize missing values in R\n:::\n\n# R Nuts and Bolts\n\n## Entering Input\n\nAt the R prompt we type expressions. The `<-` symbol is the assignment operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\nmsg <- \"hello\"\n```\n:::\n\n\nThe grammar of the language determines **whether an expression is complete or not**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <-  ## Incomplete expression\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in parse(text = input): <text>:2:0: unexpected end of input\n1: x <-  ## Incomplete expression\n   ^\n```\n\n\n:::\n:::\n\n\nThe `#` character indicates a **comment**.\n\nAnything to the right of the `#` (including the `#` itself) is ignored. **This is the only comment character in R**.\n\nUnlike some other languages, R does not support multi-line comments or comment blocks.\n\n## Evaluation\n\nWhen a complete expression is entered at the prompt, **it is evaluated and the result of the evaluated expression is returned**.\n\nThe result may be **auto-printed**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 5  ## nothing printed\nx       ## auto-printing occurs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(x)  ## explicit printing\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\nThe `[1]` shown in the output indicates that `x` is a vector and `5` is its first element.\n\nTypically with **interactive work**, we **do not explicitly print objects** with the `print()` function; it is much easier to just auto-print them by typing the name of the object and hitting return/enter.\n\nHowever, when **writing scripts, functions, or longer programs**, there is sometimes a **need to explicitly print objects** because auto-printing does not work in those settings.\n\nWhen an R vector is printed you will notice that an index for the vector is printed in square brackets `[]` on the side. For example, see this integer sequence of length 20.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 11:30\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 11 12 13 14 15 16 17 18 19 20 21 22\n[13] 23 24 25 26 27 28 29 30\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nThe numbers in the square brackets are not part of the vector itself, they are merely part of the **printed output**.\n\n::: callout-tip\n### Note\n\nWith R, it's important that one understand that **there is a difference between the actual R object and the manner in which that R object is printed to the console**.\n\nOften, the printed output may have additional bells and whistles to make the output more friendly to the users. However, these bells and whistles are not inherently part of the object.\n:::\n\n::: callout-tip\n### Pro-tip\n\nThe `:` operator is used to create integer sequences.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5:0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 4 3 2 1 0\n```\n\n\n:::\n\n```{.r .cell-code}\n-15:15\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -15 -14 -13 -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1   2   3\n[20]   4   5   6   7   8   9  10  11  12  13  14  15\n```\n\n\n:::\n:::\n\n:::\n\n## R Objects\n\nThe most basic type of R object is a **vector**.\n\n### Vectors\n\nThere is really only one rule about vectors in R, which is that\n\n> **A vector can only contain objects of the same class**\n\nTo understand what we mean here, we need to dig a little deeper. We will come back this in just a minute.\n\n#### Types of vectors\n\nThere are [two types of **vectors**](https://r4ds.had.co.nz/vectors.html?q=typeof#vector-basics) in R:\n\n1.  **Atomic vectors**:\n\n    -   **logical**: `FALSE`, `TRUE`, and `NA`\n    -   **integer** (and **doubles**): these are known collectively as **numeric** vectors (or real numbers)\n    -   **complex**: complex numbers\n    -   **character**: the most complex type of atomic vector, because each element of a character vector is a string, and a string can contain an arbitrary amount of data\n    -   **raw**: used to store fixed-length sequences of bytes. These are not commonly used directly in data analysis and I won't cover them here.\n\n2.  **Lists**, which are sometimes called **recursive vectors** because lists can contain other lists.\n\n![](https://d33wubrfki0l68.cloudfront.net/1d1b4e1cf0dc5f6e80f621b0225354b0addb9578/6ee1c/diagrams/data-structures-overview.png){.preview-image}\n\n\\[**Source**: [R 4 Data Science](https://r4ds.had.co.nz/vectors.html?q=typeof#vector-basics)\\]\n\n::: callout-tip\n### Note\n\nThere's one other related object: NULL.\n\n-   NULL is often used to represent the absence of a vector (as opposed to `NA` which is used to represent the absence of a value in a vector).\n-   NULL typically behaves like a vector of length 0.\n:::\n\n#### Create an empty vector\n\nEmpty vectors can be created with the `vector()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector(mode = \"numeric\", length = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 0 0 0\n```\n\n\n:::\n\n```{.r .cell-code}\nvector(mode = \"logical\", length = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nvector(mode = \"character\", length = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"\" \"\" \"\" \"\"\n```\n\n\n:::\n:::\n\n\n#### Creating a non-empty vector\n\nThe `c()` function can be used to **create vectors of objects** by **concatenating** things together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(0.5, 0.6)       ## numeric\nx <- c(TRUE, FALSE)    ## logical\nx <- c(T, F)           ## logical\nx <- c(\"a\", \"b\", \"c\")  ## character\nx <- 9:29              ## integer\nx <- c(1+0i, 2+4i)     ## complex\n```\n:::\n\n\n::: callout-tip\n### Note\n\nIn the above example, `T` and `F` are short-hand ways to specify `TRUE` and `FALSE`.\n\nHowever, in general, one should try to use the explicit `TRUE` and `FALSE` values when indicating logical values.\n\nThe `T` and `F` values are primarily there for when you're feeling lazy.\n:::\n\n#### Lists\n\nSo, I know I said there is one rule about vectors:\n\n> **A vector can only contain objects of the same class**\n\nBut of course, like any good rule, there is an exception, which is a **list** (which we will get to in greater details a bit later).\n\nFor now, just know a **list** is **represented as a vector** but can **contain objects of different classes**. Indeed, that's usually why we use them.\n\n::: callout-tip\n### Note\n\nThe main difference between **atomic vectors** and **lists** is that atomic vectors are **homogeneous**, while lists can be **heterogeneous**.\n:::\n\n### Numerics\n\n**Integer** and **double** vectors are known collectively as **numeric vectors**.\n\nIn R, numbers are doubles by default.\n\nTo make an integer, place an `L` after the number:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(4L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n### Note\n\nThe distinction between integers and doubles is not usually important, but there are two important differences that you should be aware of:\n\n-   **Doubles** are approximations!\n-   **Doubles** represent floating point numbers that can not always be precisely represented with a fixed amount of memory. This means that you should consider all doubles to be approximations.\n:::\n\n::: callout-note\n### Question\n\nLet's explore this. What is square of the square root of two? i.e. $(\\sqrt{2})^2$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- sqrt(2) ^ 2\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\nTry subtracting 2 from `x`? What happened?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## try it here\n```\n:::\n\n:::\n\n### Numbers\n\nNumbers in R are generally treated as **numeric objects** (i.e. double precision real numbers).\n\nThis means that even if you see a number like \"1\" or \"2\" in R, which you might think of as integers, they are likely represented behind the scenes as numeric objects (so something like \"1.00\" or \"2.00\").\n\nThis isn't important most of the time...except when it is!\n\nIf you **explicitly want an integer**, you need to specify the `L` suffix. So entering `1` in R gives you a numeric object; entering `1L` explicitly gives you an integer object.\n\n::: callout-tip\n### Note\n\nThere is also a **special number `Inf` which represents infinity**. This allows us to represent entities like `1 / 0`. This way, `Inf` can be used in ordinary calculations; e.g. `1 / Inf` is 0.\n\nThe value **`NaN` represents an undefined value** (\"not a number\"); e.g. 0 / 0; `NaN` can also be thought of as a missing value (more on that later)\n:::\n\n### Attributes\n\nR objects can have **attributes**, which are like **metadata for the object**.\n\nThese metadata can be very useful in that they **help to describe the object**.\n\nFor example, **column names** on a data frame help to tell us what data are contained in each of the columns. Some examples of R object attributes are\n\n-   names, dimnames\n-   dimensions (e.g. matrices, arrays)\n-   class (e.g. integer, numeric)\n-   length\n-   other user-defined attributes/metadata\n\nAttributes of an object (if any) can be accessed using the `attributes()` function. Not all R objects contain attributes, in which case the `attributes()` function returns `NULL`.\n\nHowever, every **vector** has two key properties:\n\n1.  Its **type**, which you can determine with `typeof()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nletters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\n1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n2.  Its **length**, which you can determine with `length()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(\"a\", \"b\", 1:10)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"a\"\n\n[[2]]\n[1] \"b\"\n\n[[3]]\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n## Mixing Objects\n\nThere are occasions when **different classes of R objects get mixed together**.\n\nSometimes this happens by accident but it can also happen on purpose.\n\n::: callout-note\n### Question\n\nLet's use `typeof()` to ask what happens when we mix different classes of R objects together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c(1.7, \"a\")\ny <- c(TRUE, 2)\ny <- c(\"a\", TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## try it here\n```\n:::\n\n:::\n\nWhy is this happening?\n\nIn each case above, we are **mixing objects of two different classes** in a vector.\n\nBut remember that the only rule about vectors says this is not allowed?\n\nWhen different objects are mixed in a vector, **coercion** occurs so that **every element in the vector is of the same class**.\n\nIn the example above, we see the effect of **implicit coercion**.\n\nWhat R tries to do is find a way to represent all of the objects in the vector in a reasonable fashion. Sometimes this does exactly what you want and...sometimes not.\n\nFor example, combining a numeric object with a character object will create a character vector, because numbers can usually be easily represented as strings.\n\n## Explicit Coercion\n\nObjects can be explicitly coerced from one class to another using the `as.*()` functions, if available.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0:6\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\nas.numeric(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 1 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\nas.logical(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nas.character(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\n```\n\n\n:::\n:::\n\n\nSometimes, **R can't figure out how to coerce an object** and this can result in `NA`s being produced.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"a\", \"b\", \"c\")\nas.numeric(x)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: NAs introduced by coercion\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA NA NA\n```\n\n\n:::\n\n```{.r .cell-code}\nas.logical(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA NA NA\n```\n\n\n:::\n:::\n\n\n::: callout-note\n### Question\n\nLet's try to convert the `x` vector above into integers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## try it here \n```\n:::\n\n:::\n\nWhen nonsensical coercion takes place, you will usually get a warning from R.\n\n## Matrices\n\n**Matrices** are **vectors with a dimension attribute**.\n\n-   The **dimension attribute** is **itself an integer vector** of length 2 (number of rows, number of columns)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(nrow = 2, ncol = 3) \nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]   NA   NA   NA\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$dim\n[1] 2 3\n```\n\n\n:::\n:::\n\n\nMatrices are **constructed column-wise**, so entries can be thought of starting in the \"upper left\" corner and running down the columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(1:6, nrow = 2, ncol = 3) \nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n:::\n\n\n::: callout-note\n### Question\n\nLet's try to use `attributes()` function to look at the attributes of the `m` object\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## try it here \n```\n:::\n\n:::\n\nMatrices can also be created directly from vectors by adding a dimension attribute.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- 1:10 \nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(m) <- c(2, 5)\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n```\n\n\n:::\n:::\n\n\nMatrices can be created by **column-binding** or **row-binding** with the `cbind()` and `rbind()` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:3\ny <- 10:12\ncbind(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     x  y\n[1,] 1 10\n[2,] 2 11\n[3,] 3 12\n```\n\n\n:::\n:::\n\n\n::: callout-note\n### Question\n\nLet's try to use `rbind()` to row bind `x` and `y` above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## try it here \n```\n:::\n\n:::\n\n## Lists\n\nLists are a special type of **vector** that **can contain elements of different classes**. Lists are a very important data type in R and you should get to know them well.\n\n::: callout-tip\n### Pro-tip\n\nLists, in combination with the various base R \"apply\" or `tidyverse` functions from `purrr` discussed later, make for a powerful combination.\n:::\n\nLists can be explicitly created using the `list()` function, which takes an arbitrary number of arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(1, \"a\", TRUE, 1 + 4i) \nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"a\"\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] 1+4i\n```\n\n\n:::\n:::\n\n\nWe can also create an empty list of a prespecified length with the `vector()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- vector(\"list\", length = 5)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n\n[[4]]\nNULL\n\n[[5]]\nNULL\n```\n\n\n:::\n:::\n\n\n## Factors\n\n**Factors** are used to represent **categorical data** and can be unordered or ordered. One can think of a factor as an integer vector where each integer has a **label**.\n\n::: callout-tip\n### Pro-tip\n\nFactors are important in statistical modeling and are treated specially by modelling functions like `lm()` and `glm()`.\n:::\n\nUsing factors with labels is **better** than using integers because factors are self-describing.\n\n::: callout-tip\n### Pro-tip\n\nHaving a variable that has values \"Yes\" and \"No\" or \"Smoker\" and \"Non-Smoker\" is better than a variable that has values 1 and 2.\n:::\n\nFactor objects can be created with the `factor()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- factor(c(\"yes\", \"yes\", \"no\", \"yes\", \"no\")) \nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] yes yes no  yes no \nLevels: no yes\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(x) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nx\n no yes \n  2   3 \n```\n\n\n:::\n\n```{.r .cell-code}\n## See the underlying representation of factor\nunclass(x)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 2 1 2 1\nattr(,\"levels\")\n[1] \"no\"  \"yes\"\n```\n\n\n:::\n:::\n\n\n::: callout-note\n### Question\n\nLet's try to use `attributes()` function to look at the attributes of the `x` object\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## try it here \n```\n:::\n\n:::\n\nOften factors will be automatically created for you when you read in a dataset using a function like `read.table()`.\n\n-   Those functions often **default to creating factors when they encounter data that look like characters or strings**.\n\nThe order of the levels of a factor can be set using the `levels` argument to `factor()`. This can be important in linear modeling because the first level is used as the baseline level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- factor(c(\"yes\", \"yes\", \"no\", \"yes\", \"no\"))\nx  ## Levels are put in alphabetical order\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] yes yes no  yes no \nLevels: no yes\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- factor(c(\"yes\", \"yes\", \"no\", \"yes\", \"no\"),\n            levels = c(\"yes\", \"no\"))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] yes yes no  yes no \nLevels: yes no\n```\n\n\n:::\n:::\n\n\n## Missing Values\n\n**Missing values** are denoted by `NA` or `NaN` for undefined mathematical operations.\n\n-   `is.na()` is used to test objects if they are `NA`\n\n-   `is.nan()` is used to test for `NaN`\n\n-   `NA` values have a class also, so there are integer `NA`, character `NA`, etc.\n\n-   A `NaN` value is also `NA` but the converse is not true\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create a vector with NAs in it\nx <- c(1, 2, NA, 10, 3)  \n## Return a logical vector indicating which elements are NA\nis.na(x)    \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n## Return a logical vector indicating which elements are NaN\nis.nan(x)   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Now create a vector with both NA and NaN values\nx <- c(1, 2, NaN, NA, 4)\nis.na(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nis.nan(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n## Data Frames\n\n**Data frames** are used to store **tabular data** in R. They are an important type of object in R and are used in a variety of statistical modeling applications. Hadley Wickham's package [dplyr](https://github.com/hadley/dplyr) has an optimized set of functions designed to work efficiently with data frames.\n\nData frames are **represented as a special type of list** where **every element of the list has to have the same length**.\n\n-   Each element of the list can be thought of as a column\n-   The length of each element of the list is the number of rows\n\nUnlike matrices, **data frames can store different classes of objects in each column**. Matrices must have every element be the same class (e.g. all integers or all numeric).\n\nIn addition to column names, indicating the names of the variables or predictors, data frames have a special attribute called `row.names` which indicate information about each row of the data frame.\n\nData frames are usually created by reading in a dataset using the `read.table()` or `read.csv()`. However, data frames can also be created explicitly with the `data.frame()` function or they can be coerced from other types of objects like lists.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- data.frame(foo = 1:4, bar = c(T, T, F, F)) \nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  foo   bar\n1   1  TRUE\n2   2  TRUE\n3   3 FALSE\n4   4 FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$names\n[1] \"foo\" \"bar\"\n\n$class\n[1] \"data.frame\"\n\n$row.names\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n\nData frames can be converted to a matrix by calling `data.matrix()`. While it might seem that the `as.matrix()` function should be used to coerce a data frame to a matrix, almost always, what you want is the result of `data.matrix()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.matrix(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     foo bar\n[1,]   1   1\n[2,]   2   1\n[3,]   3   0\n[4,]   4   0\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(data.matrix(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$dim\n[1] 4 2\n\n$dimnames\n$dimnames[[1]]\nNULL\n\n$dimnames[[2]]\n[1] \"foo\" \"bar\"\n```\n\n\n:::\n:::\n\n\n### Example\n\n::: callout-note\n### Question\n\nLet's use the `palmerpenguins` dataset.\n\n1.  What attributes does `penguins` have?\n2.  What class is the `penguins` R object?\n3.  What are the levels in the `species` column in the `penguins` dataset?\n4.  Create a logical vector for all the penguins measured from 2008.\n5.  Create a matrix with just the columns `bill_length_mm`, `bill_depth_mm`, `flipper_length_mm`, and `body_mass_g`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# try it yourself\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\npenguins \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n:::\n\n## Names\n\nR objects can have **names**, which is very useful for writing readable code and self-describing objects.\n\nHere is an example of assigning names to an integer vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:3\nnames(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(x) <- c(\"New York\", \"Seattle\", \"Los Angeles\") \nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   New York     Seattle Los Angeles \n          1           2           3 \n```\n\n\n:::\n\n```{.r .cell-code}\nnames(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"New York\"    \"Seattle\"     \"Los Angeles\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$names\n[1] \"New York\"    \"Seattle\"     \"Los Angeles\"\n```\n\n\n:::\n:::\n\n\n**Lists can also have names**, which is often very useful.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(\"Los Angeles\" = 1, Boston = 2, London = 3) \nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`Los Angeles`\n[1] 1\n\n$Boston\n[1] 2\n\n$London\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Los Angeles\" \"Boston\"      \"London\"     \n```\n\n\n:::\n:::\n\n\n**Matrices can have both column and row names**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(1:4, nrow = 2, ncol = 2)\ndimnames(m) <- list(c(\"a\", \"b\"), c(\"c\", \"d\")) \nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  c d\na 1 3\nb 2 4\n```\n\n\n:::\n:::\n\n\nColumn names and row names can be set separately using the `colnames()` and `rownames()` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(m) <- c(\"h\", \"f\")\nrownames(m) <- c(\"x\", \"z\")\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  h f\nx 1 3\nz 2 4\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n### Note\n\nFor data frames, there is a separate function for setting the row names, the `row.names()` function.\n\nAlso, data frames do not have column names, they just have names (like lists).\n\nSo to set the column names of a data frame just use the `names()` function. Yes, I know its confusing.\n\nHere's a quick summary:\n\n| Object     | Set column names | Set row names |\n|------------|------------------|---------------|\n| data frame | `names()`        | `row.names()` |\n| matrix     | `colnames()`     | `rownames()`  |\n:::\n\n# Summary\n\nThere are a variety of different builtin-data types in R. In this chapter we have reviewed the following\n\n-   atomic classes: numeric, logical, character, integer, complex\n-   vectors, lists\n-   factors\n-   missing values\n-   data frames and matrices\n\nAll R objects can have attributes that help to describe what is in the object. Perhaps the most useful attribute is names, such as column and row names in a data frame, or simply names in a vector or list. Attributes like dimensions are also important as they can modify the behavior of objects, like turning a vector into a matrix.\n\n# Post-lecture materials\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1.  Describe the difference between is.finite(x) and !is.infinite(x).\n\n2.  A logical vector can take 3 possible values. How many possible values can an integer vector take? How many possible values can a double take? Use google to do some research.\n\n3.  What functions from the readr package allow you to turn a string into logical, integer, and double vector?\n\n4.  Try and make a tibble that has columns with different lengths. What happens?\n:::\n\n### Additional Resources\n\n::: callout-tip\n-   <https://rdpeng.github.io/Biostat776/lecture-r-nuts-and-bolts>\n-   <https://rafalab.github.io/dsbook/r-basics>\n-   <https://r4ds.had.co.nz/vectors.html?q=typeof#vectors>\n:::\n\n# R session information\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(width = 120)\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.5.1 (2025-06-13)\n os       macOS Sequoia 15.6.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/New_York\n date     2025-09-15\n pandoc   3.7.0.2 @ /opt/homebrew/bin/ (via rmarkdown)\n quarto   1.4.550 @ /Applications/quarto/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n package        * version date (UTC) lib source\n cli              3.6.5   2025-04-23 [1] CRAN (R 4.5.0)\n colorout       * 1.3-2   2025-05-09 [1] Github (jalvesaq/colorout@572ab10)\n dichromat        2.0-0.1 2022-05-02 [1] CRAN (R 4.5.0)\n digest           0.6.37  2024-08-19 [1] CRAN (R 4.5.0)\n dplyr          * 1.1.4   2023-11-17 [1] CRAN (R 4.5.0)\n evaluate         1.0.5   2025-08-27 [1] CRAN (R 4.5.0)\n farver           2.1.2   2024-05-13 [1] CRAN (R 4.5.0)\n fastmap          1.2.0   2024-05-15 [1] CRAN (R 4.5.0)\n forcats        * 1.0.0   2023-01-29 [1] CRAN (R 4.5.0)\n generics         0.1.4   2025-05-09 [1] CRAN (R 4.5.0)\n ggplot2        * 4.0.0   2025-09-11 [1] CRAN (R 4.5.0)\n glue             1.8.0   2024-09-30 [1] CRAN (R 4.5.0)\n gtable           0.3.6   2024-10-25 [1] CRAN (R 4.5.0)\n hms              1.1.3   2023-03-21 [1] CRAN (R 4.5.0)\n htmltools        0.5.8.1 2024-04-04 [1] CRAN (R 4.5.0)\n htmlwidgets      1.6.4   2023-12-06 [1] CRAN (R 4.5.0)\n jsonlite         2.0.0   2025-03-27 [1] CRAN (R 4.5.0)\n knitr            1.50    2025-03-16 [1] CRAN (R 4.5.0)\n lifecycle        1.0.4   2023-11-07 [1] CRAN (R 4.5.0)\n lubridate      * 1.9.4   2024-12-08 [1] CRAN (R 4.5.0)\n magrittr         2.0.4   2025-09-12 [1] CRAN (R 4.5.0)\n palmerpenguins * 0.1.1   2022-08-15 [1] CRAN (R 4.5.0)\n pillar           1.11.0  2025-07-04 [1] CRAN (R 4.5.0)\n pkgconfig        2.0.3   2019-09-22 [1] CRAN (R 4.5.0)\n purrr          * 1.1.0   2025-07-10 [1] CRAN (R 4.5.0)\n R6               2.6.1   2025-02-15 [1] CRAN (R 4.5.0)\n RColorBrewer     1.1-3   2022-04-03 [1] CRAN (R 4.5.0)\n readr          * 2.1.5   2024-01-10 [1] CRAN (R 4.5.0)\n rlang            1.1.6   2025-04-11 [1] CRAN (R 4.5.0)\n rmarkdown        2.29    2024-11-04 [1] CRAN (R 4.5.0)\n S7               0.2.0   2024-11-07 [1] CRAN (R 4.5.0)\n scales           1.4.0   2025-04-24 [1] CRAN (R 4.5.0)\n sessioninfo      1.2.3   2025-02-05 [1] CRAN (R 4.5.0)\n stringi          1.8.7   2025-03-27 [1] CRAN (R 4.5.0)\n stringr        * 1.5.2   2025-09-08 [1] CRAN (R 4.5.0)\n tibble         * 3.3.0   2025-06-08 [1] CRAN (R 4.5.0)\n tidyr          * 1.3.1   2024-01-24 [1] CRAN (R 4.5.0)\n tidyselect       1.2.1   2024-03-11 [1] CRAN (R 4.5.0)\n tidyverse      * 2.0.0   2023-02-22 [1] CRAN (R 4.5.0)\n timechange       0.3.0   2024-01-18 [1] CRAN (R 4.5.0)\n tzdb             0.5.0   2025-03-15 [1] CRAN (R 4.5.0)\n utf8             1.2.6   2025-06-08 [1] CRAN (R 4.5.0)\n vctrs            0.6.5   2023-12-01 [1] CRAN (R 4.5.0)\n withr            3.0.2   2024-10-28 [1] CRAN (R 4.5.0)\n xfun             0.53    2025-08-19 [1] CRAN (R 4.5.0)\n yaml             2.3.10  2024-07-26 [1] CRAN (R 4.5.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}