{
  "hash": "91f082182b22dbb7c60712105be8b774",
  "result": {
    "markdown": "---\ntitle: \"18 - Debugging R Code\"\nauthor:\n  - name: Leonardo Collado Torres\n    url: http://lcolladotor.github.io/\n    affiliations:\n      - id: libd\n        name: Lieber Institute for Brain Development\n        url: https://libd.org/\n      - id: jhsph\n        name: Johns Hopkins Bloomberg School of Public Health Department of Biostatistics\n        url: https://publichealth.jhu.edu/departments/biostatistics\ndescription: \"Help! What's wrong with my code???\"\ncategories: [module 4, week 5, programming, debugging]\n---\n\n\n*This lecture, as the rest of the course, is adapted from the version [Stephanie C. Hicks](https://www.stephaniehicks.com/) designed and maintained in 2021 and 2022. Check the recent changes to this file through the [GitHub history](https://github.com/lcolladotor/jhustatcomputing2023/commits/main/posts/18-debugging-r-code/index.qmd).*\n\n<!-- Add interesting quote -->\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1.  <https://adv-r.hadley.nz/debugging>\n2.  <https://rstats.wtf/debugging-r-code>\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n-   <https://rdpeng.github.io/Biostat776/lecture-debugging-r-code>\n-   <https://adv-r.hadley.nz/debugging>\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Discuss an overall approach to debugging code in R\n-   Recognize the three main indications of a problem/condition (`message`, `warning`, `error`) and a fatal problem (`error`)\n-   Understand the importance of reproducing the problem when debugging a function or piece of code\n-   Learn how to use interactive debugging tools `traceback`, `debug`, `recover`, `browser`, and `trace` can be used to find problematic code in functions\n:::\n\n# Debugging R Code\n\n## Overall approach\n\nFinding the **root cause of a problem is always challenging**.\n\nMost bugs are subtle and hard to find because if they were obvious, you would have avoided them in the first place.\n\nA good strategy helps. Below I outline a five step process that I have found useful:\n\n### 1. See it!\n\nOne of my favorite packages is [`colorout`](https://github.com/jalvesaq/colorout). It doesn't work on winOS though 😢. Anyways, a very common mistake I see is that people don't notice an earlier warning / error, which is actually more informative than the last error they get down the road. That can send people into a rabbit hole that doesn't contain the relevant solution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"jalvesaq/colorout\")\n```\n:::\n\n\nIt works best if you load it automatically, which we can do by editing the configuration file called `.Rprofile`. It typically lives at `~/.Rprofile`, but it's best to access it with `usethis::edit_r_profile()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Open your .Rprofile file\nusethis::edit_r_profile()\n\n## Copy paste the following code taken from\n## https://lcolladotor.github.io/bioc_team_ds/config-files.html#rprofile\n\n## Change colors\n# Source https://github.com/jalvesaq/colorout\nif(Sys.getenv('TERM') %in% c(\"term\", \"xterm-256color\", \"cygwin\", \"screen\")) {\n    if (!requireNamespace(\"colorout\", quietly = TRUE) & .Platform$OS.type != 'windows') {\n        cat('To install colorout use: remotes::install_github(\"jalvesaq/colorout\")\\n')\n    }\n}\n```\n:::\n\n\nLet's give it a test.\n\n[![](https://raw.githubusercontent.com/jalvesaq/colorout/master/man/figures/screenshot.png){fig-alt=\"Example colorout output.\" fig-align=\"center\"}](https://github.com/jalvesaq/colorout)\n\nI re-typed part of the code shown in the screenshot above. Compare how it looks in our RStudio window (if you are not on winOS) compared to how it looks on the HTML file for this lesson. Which one do you prefer?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(\"colorout\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: colorout\n```\n:::\n\n```{.r .cell-code}\n## From colorout's README documentation\nx <- data.frame(\n    logic = c(TRUE, TRUE, FALSE),\n    factor = factor(c(\"abc\", \"def\", \"ghi\")),\n    string = c(\"ABC\", \"DEF\", \"GHI\"),\n    real = c(1.23, -4.56, 7.89),\n    cien.not = c(1.234e-23, -4.56+45, 7.89e78),\n    date = as.Date(c(\"2012-02-21\", \"2013-02-12\", \"2014-03-04\"))\n)\nrownames(x) <- seq_len(3)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  logic factor string  real  cien.not       date\n1  TRUE    abc    ABC  1.23 1.234e-23 2012-02-21\n2  TRUE    def    DEF -4.56 4.044e+01 2013-02-12\n3 FALSE    ghi    GHI  7.89 7.890e+78 2014-03-04\n```\n:::\n\n```{.r .cell-code}\nsummary(x[, c(1, 2, 4, 6)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   logic         factor       real             date           \n Mode :logical   abc:1   Min.   :-4.560   Min.   :2012-02-21  \n FALSE:1         def:1   1st Qu.:-1.665   1st Qu.:2012-08-17  \n TRUE :2         ghi:1   Median : 1.230   Median :2013-02-12  \n                         Mean   : 1.520   Mean   :2013-02-21  \n                         3rd Qu.: 4.560   3rd Qu.:2013-08-23  \n                         Max.   : 7.890   Max.   :2014-03-04  \n```\n:::\n\n```{.r .cell-code}\nwarning(\"This is an example of a warning.\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: This is an example of a warning.\n```\n:::\n\n```{.r .cell-code}\nexample.of.error\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'example.of.error' not found\n```\n:::\n\n```{.r .cell-code}\nlibrary(\"KernSmooth\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nKernSmooth 2.23 loaded\nCopyright M. P. Wand 1997-2009\n```\n:::\n\n```{.r .cell-code}\ncolorout::setOutputColors()\n```\n:::\n\n\nIf you want to, use `colorout::setOutputColors()` to edit the colors.\n\n### 2. Google!\n\nWhenever you see an error message, **start by googling it**.\n\nIf you are lucky, you will discover that it's a common error with a known solution.\n\n::: callout-tip\n### Pro-tip\n\nWhen searching on Google or your preferred search browse, improve your chances of a good match by removing any variable names or values that are specific to your problem.\n:::\n\n### 3. Make it repeatable\n\nTo find the root cause of an error, you are going to need to execute the code many times as you consider and reject hypotheses.\n\n**To make that iteration as quick possible**, it's worth some upfront investment to **make the problem both easy and fast to reproduce**.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8bBo3B7N8YQ?si=7M-t_sa0YZBjRnJJ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\n\n</iframe>\n\nStart by creating a **rep**roducible **ex**ample (reprex).\n\n-   This will help others help you, and **often leads to a solution without asking others**, because in the course of making the problem reproducible you often figure out the root cause.\n\nMake the **example minimal by removing code and simplifying data**.\n\n-   As you do this, you may discover inputs that do not trigger the error. - Make note of them: they will be helpful when diagnosing the root cause.\n\n::: callout-tip\n### Example\n\nLet's try making a **reprex** [using the `reprex` package](https://www.tidyverse.org/help) (installed with the `tidyverse`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"reprex\")\n```\n:::\n\n\nWrite a bit of code and copy it to the clipboard:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(y <- 1:4)\nmean(y)\n```\n:::\n\n\nEnter `reprex()` in the R Console. In RStudio, you'll see a preview of your rendered reprex.\n\nIt is now ready and waiting on your clipboard, so you can paste it into, say, a GitHub issue.\n\nOne last step. Let's go here and open up an issue on the course website or respond to our practice issue from earlier in the course:\n\n-   <https://github.com/lcolladotor/jhustatcomputing2023/issues/2>\n\nWe will paste in the code from our reprex.\n\nNotice that if you are asking about code in this class, you might need to use the `wd` argument and set it to `here::here()`, that is `reprex::reprex(wd = here::here())` as showcased at <https://github.com/lcolladotor/jhustatcomputing2023/issues/5>.\n:::\n\nIn RStudio, you can access `reprex` from the addins menu, which makes it even easier to point out your code and select the output format.\n\nSeveral times in the process of building a `reprex` and then simplifying it as much as possible, I have found the source of my error.\n\n::: callout-note\nRemember that we configured our RStudio's global options such that:\n\n-   *Workspace: restore .RData into workspace at startup* is turned **off**\n\n-   *Save workspace to .RData on exit* is set to **Never**\n\nThose two settings will save us many headaches!\n:::\n\n### 4. Figure out where it is\n\nIt's a great idea to adopt the scientific method here.\n\n-   Generate hypotheses\n-   Design experiments to test them\n-   Record your results\n\nThis may seem like a lot of work, but **a systematic approach** will end up saving you time.\n\nOften **a lot of time can be wasted relying on my intuition to solve a bug** (\"oh, it must be an off-by-one error, so I'll just subtract 1 here\"), when I would have been better off taking a systematic approach.\n\nIf this fails, you **might need to ask help from someone else**.\n\nIf you have followed the previous step, you will have a small example that is easy to share with others. That makes it much easier for other people to look at the problem, and more likely to help you find a solution.\n\n### 5. Fix it and test it\n\nOnce you have found the bug, you need to **figure out how to fix it** and to **check that the fix actually worked**.\n\nAgain, it is very useful to have automated tests in place, which you can implement with `testthat` as showcased in the previous class.\n\n-   Not only does this help to ensure that you **have actually fixed the bug**, it also **helps to ensure you have not introduced any new bugs** in the process.\n-   In the absence of automated tests, make sure to **carefully record the correct output**, and check against the inputs that previously failed.\n\nAs a package developer, you might want to use simple `reprex` cases users report to you as sources for new unit tests in your package. Make sure to recognize the author(s) of the `reprex` and give them credit!\n\n## Something's Wrong!\n\nOnce you have made the error repeatable, the next step is to figure out where it comes from.\n\nR has a number of **ways to indicate to you that something is not right**.\n\nThere are **different levels of indication** that can be used, ranging from mere notification to fatal error. Executing any function in R may result in the following **conditions**.\n\n-   `message`: A **generic notification/diagnostic message** produced by the `message()` function; execution of the function continues\n-   `warning`: An indication that **something is wrong but not necessarily fatal**; execution of the function continues. Warnings are generated by the `warning()` function\n-   `error`: An indication that **a fatal problem has occurred** and execution of the function stops. Errors are produced by the `stop()` or `stopifnot()` functions.\n-   `condition`: A generic concept for indicating that **something unexpected has occurred**; programmers can create their own custom conditions if they want.\n\n::: callout-tip\n### Example\n\nHere is an example of a warning that you might receive in the course of using R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(-1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in log(-1): NaNs produced\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NaN\n```\n:::\n:::\n\n\nThis warning lets you know that taking the log of a negative number results in a `NaN` value because you **can't take the log of negative numbers**.\n:::\n\nNevertheless, R doesn't give an error, because it has a useful value that it can return, the **`NaN` value**.\n\nThe **warning is just there** to let you know that **something unexpected happen**.\n\nDepending on what you are programming, you may have intentionally taken the log of a negative number in order to move on to another section of code.\n\n### Cases with `NA`s\n\n::: callout-tip\n### Example\n\nHere is another function that is designed to print a message to the console depending on the nature of its input.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message <- function(x) {\n    if (x > 0) {\n        print(\"x is greater than zero\")\n    } else {\n        print(\"x is less than or equal to zero\")\n    }\n    invisible(x)\n}\n```\n:::\n\n\nThis function is simple:\n\n-   It **prints a message** telling you whether `x` is greater than zero or less than or equal to zero.\n-   It also returns its input **invisibly**, which is a common practice with \"print\" functions.\n\n**Returning an object invisibly** means that the **return value does not get auto-printed** when the function is called.\n\nTake a hard look at the function above and see if you can identify any bugs or problems.\n\nWe can execute the function as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x is greater than zero\"\n```\n:::\n:::\n\n\nThe function seems to work fine at this point. No errors, warnings, or messages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message(NA)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in if (x > 0) {: missing value where TRUE/FALSE needed\n```\n:::\n:::\n\n:::\n\nWhat happened?\n\n-   Well, the first thing the function does is test if `x > 0`.\n-   But you can't do that test if `x` is a `NA` or `NaN` value.\n-   R **doesn't know what to do in this case** so it **stops with a fatal error**.\n\nWe can **fix this problem** by anticipating the possibility of `NA` values and checking to see if the input is `NA` with the `is.na()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message2 <- function(x) {\n    if (is.na(x)) {\n        print(\"x is a missing value!\")\n    } else if (x > 0) {\n        print(\"x is greater than zero\")\n    } else {\n        print(\"x is less than or equal to zero\")\n    }\n    invisible(x)\n}\n```\n:::\n\n\nNow we can run the following.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message2(NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x is a missing value!\"\n```\n:::\n:::\n\n\nAnd all is fine.\n\n### Cases with longer inputs than expected\n\nNow what about the following situation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- log(c(-1, 2))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in log(c(-1, 2)): NaNs produced\n```\n:::\n\n```{.r .cell-code}\nprint_message2(x)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in if (is.na(x)) {: the condition has length > 1\n```\n:::\n:::\n\n\nNow what?? Why are we getting this warning?\n\nThe **warning** says \"the condition has length \\> 1 and only the first element will be used\".\n\nThe **problem here** is that I passed `print_message2()` a vector `x` that was of length 2 rather then length 1.\n\nInside the body of `print_message2()` the expression `is.na(x)` returns a vector that is tested in the `if` statement.\n\nHowever, `if` cannot take vector arguments, so you get a warning.\n\nThe fundamental problem here is that `print_message2()` is not **vectorized**.\n\nWe can **solve this problem** two ways.\n\n1.  Simply **not allow vector arguments**.\n2.  The other way is to **vectorize** the `print_message2()` function to allow it to take vector arguments.\n\nFor the **first way**, we simply need to check the length of the input.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message3 <- function(x) {\n    if (length(x) > 1L) {\n        stop(\"'x' has length > 1\")\n    }\n    if (is.na(x)) {\n        print(\"x is a missing value!\")\n    } else if (x > 0) {\n        print(\"x is greater than zero\")\n    } else {\n        print(\"x is less than or equal to zero\")\n    }\n    invisible(x)\n}\n```\n:::\n\n\nNow when we pass `print_message3()` a vector, we should get an **error**.\n\n### Don't show users the `call` to help them and you too!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message3(1:2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in print_message3(1:2): 'x' has length > 1\n```\n:::\n:::\n\n\nI have learned that using that setting `call. = FALSE` when using `stop()` and/or `warning()` helps your users by providing them less information that could confuse them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message3_no_call <- function(x) {\n    if (length(x) > 1L) {\n        stop(\"'x' has length > 1\", call. = FALSE)\n    }\n    if (is.na(x)) {\n        print(\"x is a missing value!\")\n    } else if (x > 0) {\n        print(\"x is greater than zero\")\n    } else {\n        print(\"x is less than or equal to zero\")\n    }\n    invisible(x)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message3_no_call(99:100)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: 'x' has length > 1\n```\n:::\n\n```{.r .cell-code}\nprint_message3(99:100)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in print_message3(99:100): 'x' has length > 1\n```\n:::\n:::\n\n\nIf we compare the error output from `print_message3()` against `print_message3_no_call()` we can see that the second scenario doesn't include information that only we (as the user) have. That's information that users will copy-paste on their Google searches, which makes finding the right information much harder. As the person trying to help users, knowing how the users called our function is very likely not useful enough information. A `reprex` is 💯 \\* ♾️ much better!!!!!\n\n### Errors à la `tidyverse`\n\nIf you want to write error messages similar to those you are used to seeing with `tidyverse` packages, use `rlang`. Specifically, switch:\n\n-   `base::stop()` with `rlang::abort()`\n\n-   `base::warning()` with `rlang::warn()`\n\n-   `base::message()` with `rlang::inform()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message3_tidyverse <- function(x) {\n    if (length(x) > 1L) {\n        rlang::abort(\"'x' has length > 1\")\n    }\n    if (is.na(x)) {\n        rlang::warn(\"x is a missing value!\")\n    } else if (x > 0) {\n        rlang::inform(\"x is greater than zero\")\n    } else {\n        rlang::inform(\"x is less than or equal to zero\")\n    }\n    invisible(x)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message3_tidyverse(99:100)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `print_message3_tidyverse()`:\n! 'x' has length > 1\n```\n:::\n\n```{.r .cell-code}\nprint_message3_tidyverse(NA)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: x is a missing value!\n```\n:::\n\n```{.r .cell-code}\nprint_message3_tidyverse(1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nx is greater than zero\n```\n:::\n\n```{.r .cell-code}\nprint_message3_tidyverse(-1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nx is less than or equal to zero\n```\n:::\n:::\n\n\nNote how `rlang` by default doesn't show the function call. The `tidyverse` style guide has a whole chapter on how to format error messages: <https://style.tidyverse.org/error-messages.html>. That is how all the R developers in the `tidyverse` team have been able to provide consistent looking messages to users of all these packages. They also use `cli` to make their error messages super pretty to read <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.\n\nIn this next example, I:\n\n-   use `cli::cli_abort()` instead of `rlang::abort()`\n\n-   define `len` so I can use it in a message with `{len}`\n\n-   use `{.code something}` for inline-markup <https://cli.r-lib.org/reference/inline-markup.html>\n\n-   use several of the `cli` bullets, see <https://cli.r-lib.org/reference/cli_bullets.html> for the full list\n\n-   use `praise::praise()` to get some fun messages to praise our user and lift up their spirits =)\n\n    -   See also `praiseMX` <https://github.com/ComunidadBioInfo/praiseMX> which [CDSB](https://comunidadbioinfo.github.io/) students built in a course I co-instructed in 2019.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message3_cli <- function(x) {\n    if (length(x) > 1L) {\n        len <- length(x)\n        \n        ## Avoid the print() calls from\n        ## https://github.com/ComunidadBioInfo/praiseMX/blob/master/R/praise_crear_emi.R\n        praise_mx_log <- capture.output({\n            praise_mx <- praiseMX:::praise_bien()\n        })\n        cli::cli_abort(\n            c(\n                \"This function is not vectorized:\",\n                \"i\" = \"{.var x} has length {len}.\",\n                \"x\" = \"{.var x} must have length 1.\",\n                \">\" = \"Try using {.code purrr::map(x, print_message3_cli)} to loop your input {.var x} on this function.\",\n                \"v\" = praise::praise(),\n                \"v\" = praise_mx\n            )\n        )\n    }\n    if (is.na(x)) {\n        rlang::warn(\"x is a missing value!\")\n    } else if (x > 0) {\n        rlang::inform(\"x is greater than zero\")\n    } else {\n        rlang::inform(\"x is less than or equal to zero\")\n    }\n    invisible(x)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(20230928)\nprint_message3_cli(-1:1)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `print_message3_cli()`:\n! This function is not vectorized:\nℹ `x` has length 3.\n✖ `x` must have length 1.\n→ Try using `purrr::map(x, print_message3_cli)` to loop your input `x` on this\n  function.\n✔ You are neat!\n✔ ¡Ah chingá! Programas bien perrón.\n```\n:::\n\n```{.r .cell-code}\npurrr::map(-1:1, print_message3_cli)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nx is less than or equal to zero\nx is less than or equal to zero\nx is greater than zero\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] -1\n\n[[2]]\n[1] 0\n\n[[3]]\n[1] 1\n```\n:::\n:::\n\n\n### Vectorizing\n\nVectorizing the function can be accomplished easily with the `Vectorize()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_message4 <- Vectorize(print_message2)\nout <- print_message4(c(-1, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x is less than or equal to zero\"\n[1] \"x is greater than zero\"\n```\n:::\n:::\n\n\nYou can see now that the **correct messages are printed without any warning or error**.\n\n::: callout-tip\n### Note\n\nI stored the return value of `print_message4()` in a separate R object called `out`.\n\nThis is because when I use the `Vectorize()` function it no longer preserves the invisibility of the return value.\n:::\n\n::: callout-tip\n### Helpful tips\n\nThe **primary task of debugging** any R code is **correctly diagnosing what the problem is**.\n\nWhen diagnosing a problem with your code (or somebody else's), it's important **first understand what you were expecting to occur**.\n\nThen you need to **idenfity what did occur** and **how did it deviate from your expectations**.\n\nSome basic questions you need to ask are\n\n-   What was your input? How did you call the function?\n-   What were you expecting? Output, messages, other results?\n-   What did you get?\n-   How does what you get differ from what you were expecting?\n-   Were your expectations correct in the first place?\n-   Can you reproduce the problem (exactly)?\n:::\n\nBeing able to answer these questions is important not just for your own sake, but in situations where you may need to ask someone else for help with debugging the problem.\n\nSeasoned programmers will be asking you these exact questions.\n\n::: callout-note\nThink about the person who is going to receive your question. At <https://lcolladotor.github.io/bioc_team_ds/how-to-ask-for-help.html> I showcase some examples by Jim Hester and other information you might want to think about when asking for help.\n:::\n\n# Debugging Tools in R\n\nR provides a number of tools to help you with debugging your code. The primary tools for debugging functions in R are\n\n-   `traceback()`: **prints out the function call stack** after an error occurs; does nothing if there's no error\n    -   The `tidyverse` version of this base R function is `rlang::last_error()` <https://rlang.r-lib.org/reference/last_error.html>. For base R, you will need to enable tracing with `rlang` with `rlang::global_entrace()` <https://rlang.r-lib.org/reference/global_entrace.html>. It can provide much more user-friendly output.\n-   `debug()`: **flags a function for \"debug\" mode** which allows you to step through execution of a function one line at a time\n-   `browser()`: **suspends the execution of a function** wherever it is called and puts the function in debug mode\n-   `trace()`: allows you to **insert debugging code into a function** at specific places\n-   `recover()`: allows you to **modify the error behavior** so that you can browse the function call stack\n\nThese functions are interactive tools specifically designed to allow you to pick through a function. There is also the more blunt technique of inserting `print()` or `cat()` statements in the function.\n\n## Using `traceback()`\n\nThe `traceback()` function **prints out the function call stack** after an error has occurred.\n\nThe **function call stack** is the **sequence of functions that was called before the error occurred**.\n\nFor example, you may have a function `a()` which subsequently calls function `b()` which calls `c()` and then `d()`.\n\nIf an error occurs, it may not be immediately clear in which function the error occurred.\n\nThe `traceback()` function **shows you how many levels deep** you were when the error occurred.\n\n::: callout-tip\n### Example\n\nLet's use the `mean()` function on a vector `z` that does not exist in our R environment\n\n``` r\n> mean(z)\nError in mean(z) : object 'z' not found\n> traceback()\n1: mean(z)\n```\n\nHere, it's **clear that the error occurred** inside the `mean()` function because the object `z` does not exist.\n:::\n\nThe `traceback()` function **must be called immediately after an error** occurs. Once another function is called, you lose the traceback.\n\n::: callout-tip\n### Example\n\nHere is a slightly more complicated example using the `lm()` function for linear modeling.\n\n``` r\n> lm(y ~ x)\nError in eval(expr, envir, enclos) : object ’y’ not found\n> traceback()\n7: eval(expr, envir, enclos)\n6: eval(predvars, data, env)\n5: model.frame.default(formula = y ~ x, drop.unused.levels = TRUE)\n4: model.frame(formula = y ~ x, drop.unused.levels = TRUE)\n3: eval(expr, envir, enclos)\n2: eval(mf, parent.frame())\n1: lm(y ~ x)\n```\n\nYou can see now that the **error did not get thrown until the 7th level of the function call stack**, in which case the `eval()` function tried to evaluate the formula `y ~ x` and **realized the object `y` did not exist**.\n\nWith `rlang`, this is how it look:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(y ~ x)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(predvars, data, env): object 'y' not found\n```\n:::\n\n```{.r .cell-code}\nrlang::last_error()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: Can't show last error because no error was recorded yet\n```\n:::\n:::\n\n\nNote that we need to use `rlang::global_entrace()` first since `lm()` is a base R function. If we do so, then `rlang::last_error()` does work.\n\n``` r\n> rlang::global_entrace()\n> lm(y ~ x)\nError:\n! object 'y' not found\nRun `rlang::last_trace()` to see where the error occurred.\n> rlang::last_error()\n<error/rlang_error>\nError:\n! object 'y' not found\n---\nBacktrace:\n    ▆\n 1. └─stats::lm(y ~ x)\n 2.   └─base::eval(mf, parent.frame())\n 3.     └─base::eval(mf, parent.frame())\n```\n:::\n\nLooking at the traceback is useful for figuring out roughly where an error occurred but it's not useful for more detailed debugging. For that you might turn to the `debug()` function.\n\n## Using `debug()`\n\n<details>\n\n<summary>Click here for how to use `debug()` with an interactive browser.</summary>\n\nThe `debug()` function initiates an interactive debugger (also known as the \"browser\" in R) for a function. With the debugger, you can step through an R function one expression at a time to pinpoint exactly where an error occurs.\n\nThe `debug()` function takes a function as its first argument. Here is an example of debugging the `lm()` function.\n\n``` r\n> debug(lm)      ## Flag the 'lm()' function for interactive debugging\n> lm(y ~ x)\ndebugging in: lm(y ~ x)\ndebug: {\n    ret.x <- x\n    ret.y <- y\n    cl <- match.call()\n    ...\n    if (!qr)\n        z$qr <- NULL \n    z\n} \nBrowse[2]>\n```\n\nNow, every time you call the `lm()` function it will launch the interactive debugger. To turn this behavior off you need to call the `undebug()` function.\n\nThe debugger calls the browser at the very top level of the function body. From there you can step through each expression in the body. There are a few special commands you can call in the browser:\n\n-   `n` executes the current expression and moves to the next expression\n-   `c` continues execution of the function and does not stop until either an error or the function exits\n-   `Q` quits the browser\n\nHere's an example of a browser session with the `lm()` function.\n\n``` r\nBrowse[2]> n   ## Evalute this expression and move to the next one\ndebug: ret.x <- x\nBrowse[2]> n\ndebug: ret.y <- y\nBrowse[2]> n\ndebug: cl <- match.call()\nBrowse[2]> n\ndebug: mf <- match.call(expand.dots = FALSE)\nBrowse[2]> n\ndebug: m <- match(c(\"formula\", \"data\", \"subset\", \"weights\", \"na.action\",\n    \"offset\"), names(mf), 0L)\n```\n\nWhile you are in the browser you can execute any other R function that might be available to you in a regular session. In particular, you can use `ls()` to see what is in your current environment (the function environment) and `print()` to print out the values of R objects in the function environment.\n\nYou can turn off interactive debugging with the `undebug()` function.\n\n``` r\nundebug(lm)    ## Unflag the 'lm()' function for debugging\n```\n\n</details>\n\n## Using `recover()`\n\n<details>\n\n<summary>Click here for how to use `recover()` with an interactive browser.</summary>\n\nThe `recover()` function can be used to modify the error behavior of R when an error occurs. Normally, when an error occurs in a function, R will print out an error message, exit out of the function, and return you to your workspace to await further commands.\n\nWith `recover()` you can tell R that when an error occurs, it should halt execution at the exact point at which the error occurred. That can give you the opportunity to poke around in the environment in which the error occurred. This can be useful to see if there are any R objects or data that have been corrupted or mistakenly modified.\n\n``` r\n> options(error = recover)    ## Change default R error behavior\n> read.csv(\"nosuchfile\")      ## This code doesn't work\nError in file(file, \"rt\") : cannot open the connection\nIn addition: Warning message:\nIn file(file, \"rt\") :\n  cannot open file ’nosuchfile’: No such file or directory\n  \nEnter a frame number, or 0 to exit\n\n1: read.csv(\"nosuchfile\")\n2: read.table(file = file, header = header, sep = sep, quote = quote, dec =\n3: file(file, \"rt\")\n\nSelection:\n```\n\nThe `recover()` function will first print out the function call stack when an error occurrs. Then, you can choose to jump around the call stack and investigate the problem. When you choose a frame number, you will be put in the browser (just like the interactive debugger triggered with `debug()`) and will have the ability to poke around.\n\n</details>\n\n# Summary\n\n-   There are three main indications of a problem/condition: `message`, `warning`, `error`; only an `error` is fatal\n    -   We saw how to trigger them with base R functions such as `stop()`, and `tidyverse` functions `rlang::abort()` and `cli::cli_abort()`.\n-   When analyzing a function with a problem, make sure you can reproduce the problem, clearly state your expectations and how the output differs from your expectation\n-   Interactive debugging tools `traceback`, `debug`, `recover`, `browser`, and `trace` can be used to find problematic code in functions\n-   Debugging tools are not a substitute for thinking!\n\n# Post-lecture materials\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1.  Try using `traceback()` to debug this piece of code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(a) g(a)\ng <- function(b) h(b)\nh <- function(c) i(c)\ni <- function(d) {\n    if (!is.numeric(d)) {\n        stop(\"`d` must be numeric\", call. = FALSE)\n    }\n    d + 10\n}\nf(\"a\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: `d` must be numeric\n```\n:::\n:::\n\n\nDescribe in words what is happening above?\n:::\n\n### Additional Resources\n\n::: callout-tip\n-   <https://rdpeng.github.io/Biostat776/lecture-debugging-r-code>\n-   <https://adv-r.hadley.nz/debugging>\n-   <https://rstats.wtf/debugging-r-code>\n:::\n\n# R session information\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(width = 120)\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.6\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/New_York\n date     2023-09-27\n pandoc   3.1.5 @ /opt/homebrew/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n cli           3.6.1      2023-03-23 [1] CRAN (R 4.3.0)\n colorout    * 1.3-0      2023-09-28 [1] Github (jalvesaq/colorout@8384882)\n digest        0.6.33     2023-07-07 [1] CRAN (R 4.3.0)\n evaluate      0.21       2023-05-05 [1] CRAN (R 4.3.0)\n fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n fs            1.6.3      2023-07-20 [1] CRAN (R 4.3.0)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n htmltools     0.5.6      2023-08-10 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2      2023-03-17 [1] CRAN (R 4.3.0)\n jsonlite      1.8.7      2023-06-29 [1] CRAN (R 4.3.0)\n KernSmooth  * 2.23-22    2023-07-10 [1] CRAN (R 4.3.0)\n knitr         1.44       2023-09-11 [1] CRAN (R 4.3.0)\n lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.3.0)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n praise        1.0.0      2015-08-11 [1] CRAN (R 4.3.0)\n praiseMX      0.0.0.9000 2023-09-28 [1] Github (ComunidadBioInfo/praiseMX@9d26399)\n purrr         1.0.2      2023-08-10 [1] CRAN (R 4.3.0)\n reprex      * 2.0.2      2022-08-17 [1] CRAN (R 4.3.0)\n rlang         1.1.1      2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.24       2023-08-14 [1] CRAN (R 4.3.1)\n rstudioapi    0.15.0     2023-07-07 [1] CRAN (R 4.3.0)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n vctrs         0.6.3      2023-06-14 [1] CRAN (R 4.3.0)\n withr         2.5.0      2022-03-03 [1] CRAN (R 4.3.0)\n xfun          0.40       2023-08-09 [1] CRAN (R 4.3.0)\n yaml          2.3.7      2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}