---
title: "17 - Vectorization and loop functionals"
author:
  - name: Leonardo Collado Torres
    url: http://lcolladotor.github.io/
    affiliations:
      - id: libd
        name: Lieber Institute for Brain Development
        url: https://libd.org/
      - id: jhsph
        name: Johns Hopkins Bloomberg School of Public Health Department of Biostatistics
        url: https://publichealth.jhu.edu/departments/biostatistics
description: "Introduction to vectorization and loop functionals"
categories: [module 4, week 5, R, programming, functions]
---

*This lecture, as the rest of the course, is adapted from the version [Stephanie C. Hicks](https://www.stephaniehicks.com/) designed and maintained in 2021 and 2022. Check the recent changes to this file through the `r paste0("[GitHub history](https://github.com/lcolladotor/jhustatcomputing/commits/main/", basename(dirname(getwd())), "/", basename(getwd()), "/index.qmd)")`.*

<!-- Add interesting quote -->

# Pre-lecture materials

### Read ahead

::: callout-note
## Read ahead

**Before class, you can prepare by reading the following materials:**

1.  <https://rafalab.github.io/dsbook/programming-basics.html#vectorization>
:::

### Acknowledgements

Material for this lecture was borrowed and adopted from

-   <https://rdpeng.github.io/Biostat776/lecture-loop-functions>
-   <https://rafalab.github.io/dsbook/programming-basics.html#vectorization>

# Learning objectives

::: callout-note
# Learning objectives

**At the end of this lesson you will:**

-   Understand how to perform vector arithmetics in R
-   Implement the 5 functional loops in R (vs e.g. for loops) in R
:::

# Vectorization

Writing `for` and `while` loops are useful and easy to understand, but in R we rarely use them.

As you learn more R, you will realize that **vectorization** is preferred over for-loops since it results in shorter and clearer code.

## Vector arithmetics

### Rescaling a vector

In R, arithmetic operations on **vectors occur element-wise**. For a quick example, suppose we have height in inches:

```{r}
inches <- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)
```

and want to convert to centimeters.

Notice what happens when we multiply inches by 2.54:

```{r}
inches * 2.54
```

In the line above, we **multiplied each element** by 2.54.

Similarly, if for each entry we want to compute how many inches taller or shorter than 69 inches (the average height for males), we can subtract it from every entry like this:

```{r}
inches - 69
```

### Two vectors

If we have **two vectors of the same length**, and we sum them in R, they will be **added entry by entry** as follows:

```{r}
x <- 1:10
y <- 1:10
x + y
```

The same holds for other mathematical operations, such as `-`, `*` and `/`.

```{r}
x <- 1:10
sqrt(x)
```

```{r}
y <- 1:10
x * y
```

That is, we don't write a `for` loop that takes each element of `x` and each element of `y`, adds, them up, then puts them all in a single vector.

```{r}
## Check that x and y have the same length
stopifnot(length(x) == length(y))
## Create our result object
result <- vector(mode = "integer", length = length(x))
## Loop through each element of x and y, calculate the sum,
## then store it on 'result'
for (i in seq_along(x)) {
    result[i] <- x[i] + y[i]
}
## Check that we got the same answer
identical(result, x + y)
```

# Functional loops

While `for` loops are perfectly valid, when you use vectorization in an element-wise fashion, there is no need for `for` loops because we can apply what are called functional loops.

**Functional loops** are functions that help us apply the same function to each entry in a vector, matrix, data frame, or list. Here are a list of them in base R:

-   `lapply()`: Loop over a list and evaluate a function on each element

-   `sapply()`: Same as `lapply` but try to simplify the result

-   `apply()`: Apply a function over the margins of an array

-   `tapply()`: Apply a function over subsets of a vector

-   `mapply()`: Multivariate version of `lapply` (won't cover)

An auxiliary function `split()` is also useful, particularly in conjunction with `lapply()`.

## Define a function

```{r}
my_sum <- function(a, b) {
    a + b
}

## Same but with an extra check to make sure that 'a' and 'b'
## have the same lengths.
my_sum <- function(a, b) {
    ## Check that a and b are of the same length
    stopifnot(length(a) == length(b))
    a + b
}
```

## Extra material: document + test + share functions

### Document your function with `roxygen2`

Extra: document your function with `roxygen2` syntax. `Code` (or magic wand) -\> `Insert Roxygen skeleton` . For more details about `roxygen2` check <https://r-pkgs.org/man.html> and <https://cran.r-project.org/web/packages/roxygen2/vignettes/roxygen2.html>.

```{r}
#' Title
#'
#' @param a
#' @param b
#'
#' @return
#' @export
#'
#' @examples
my_sum <- function(a, b) {
    ## Check that a and b are of the same length
    stopifnot(length(a) == length(b))
    a + b
}
```

```{r}
#' Title
#'
#' Description
#'
#' Details
#'
#' @param a What is `a`?
#' @param b What is `b`?
#'
#' @return What does the function return?
#' @export ## Do we want to share this function? yes!
#'
#' @examples
#' ## How do you use this function?
my_sum <- function(a, b) {
    ## Check that a and b are of the same length
    stopifnot(length(a) == length(b))
    a + b
}
```

Here is a full example

```{r}
#' Sum two vectors
#'
#' This function does the element wise sum of two vectors.
#'
#' It really is just an example function that is powered by the `+` operator
#' from [base::Arithmetic].
#'
#' @param a An `integer()` or `numeric()` vector of length `L`.
#' @param b An `integer()` or `numeric()` vector of length `L`.
#'
#' @return An `integer()` or `numeric()` vector of length `L` with
#' the element-wise sum of `a` and `b`.
#' @export
#'
#' @examples
#' ## Generate some input data
#' x <- 1:10
#' y <- 1:10
#'
#' ## Perform the element wise sum
#' my_sum(x, y)
my_sum <- function(a, b) {
    ## Check that a and b are of the same length
    stopifnot(length(a) == length(b))
    a + b
}
```

### Test your function with `testthat`

Below will use two `expect_*()` functions from `testthat`. For more details, check <https://r-pkgs.org/testing-basics.html>.

```{r}
library("testthat")
test_that("my_sum works", {
    x <- seq_len(10)
    expect_equal(my_sum(x, x), x + x)

    expect_error(my_sum(x, seq_len(5)))
})
```

### Share your function in an R package

What even more? Make an R package to share this function.

```{r}
#| eval: false
## Install biocthis if you don't have it
if (!require("BiocManager", quietly = TRUE)) {
    install.packages("BiocManager")
}

BiocManager::install("biocthis")

## Create an empty R package that is also an
## RStudio project
usethis::create_package("~/Desktop/sum776")

## On the new RStudio window, create the
## scripts that will guide you into making a package
biocthis::use_bioc_pkg_templates()
```

See my example at <https://github.com/lcolladotor/sum776> with its documentation website <https://lcolladotor.github.io/sum776/>. The documentation we wrote for our function is shown at <https://lcolladotor.github.io/sum776/reference/my_sum.html>.

As this package is fully functional and tested (see <https://github.com/lcolladotor/sum776/actions> and in particular <https://github.com/lcolladotor/sum776/actions/runs/6305876152/job/17120052804#step:20:27>), we can install it from GitHub as any other R package on GitHub.

```{r}
#| eval: false
remotes::install_github("lcolladotor/sum776")
```

### Build your own R package with your custom-made `ggplot2` theme

As you can see from <https://github.com/MatthewBJane/ThemePark/blob/main/R/theme_barbie.R>, it doesn't take a lot of R code to write a custom theme. See the following video for more on custom `ggplot2` themes.

<iframe width="560" height="315" src="https://www.youtube.com/embed/7GqXssfzQYE?si=cxBbtCCjIs1t21qS" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

## Apply your function

Here since we have two input vectors, we need to use `mapply()` which is one of the more complex functions. Note the weird order of the arguments where the function we will `mapply()` over comes before the inputs to said function.

```{r}
## Check the arguments to mapply()
args(mapply)

## Apply mapply() to our function my_sum() with the inputs 'x' and 'y'
mapply(sum776::my_sum, x, y)

## Or write an anynymous function that is:
## * not documented
## * not tested
## * not shared
##
## :(
mapply(function(a, b) {
    a + b
}, x, y)
```

# `purrr` alternative

The [`purrr`](https://purrr.tidyverse.org/) package, which is part of the `tidyverse`, provides an alternative framework to the `apply` family of functions in base R.

[![Three green fuzzy monsters in chef hats frosting cupcakes with the same vanilla frosting. A purple fuzzy monster to the side holds a recipe book containing code that would automate the cupcake frosting process. By Allison Horst.](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/66ad455b-a0fc-4c61-8a5c-fb091f8b7f36_rw_3840.png?h=b4d401a70fe73cc06ad53aeae285981f)](https://allisonhorst.com/wickham-tidy-bakers)

```{r}
#| message: false
library("purrr") ## part of tidyverse
```

```{r}
## Check the arguments of map2_int()
args(purrr::map2_int)

## Apply our function my_sum() to our inputs
purrr::map2_int(x, y, sum776::my_sum)

## You can also use anonymous functions
purrr::map2_int(x, y, function(a, b) {
    a + b
})

## purrr even has a super short formula-like syntax
## where .x is the first input and .y is the second one
purrr::map2_int(x, y, ~ .x + .y)

## This formula syntax has nothing to do with the objects 'x' and 'y'
purrr::map2_int(1:2, 3:4, ~ .x + .y)
```

[![Three green fuzzy monsters in chef hats frosting cupcakes with three different frostings. A purple fuzzy monster to the side holds a recipe book containing code that would automate the cupcake frosting process. By Allison Horst.](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/07bae254-62c4-4fd9-a165-acdeff1667de_rw_3840.png?h=f3abf97961c21249eb4de47a98540b4c){fig-align="center"}](https://allisonhorst.com/wickham-tidy-bakers)

# Base R loops

## `lapply()`

The `lapply()` function does the following simple series of operations:

1.  it loops over a list, iterating over each element in that list
2.  it applies a *function* to each element of the list (a function that you specify)
3.  and returns a list (the `l` in `lapply()` is for "list").

This function takes three arguments: (1) a list `X`; (2) a function (or the name of a function) `FUN`; (3) other arguments via its `...` argument. If `X` is not a list, it will be coerced to a list using `as.list()`.

The body of the `lapply()` function can be seen here.

```{r}
lapply
```

::: callout-tip
### Note

The actual looping is done internally in C code for efficiency reasons.
:::

It is important to remember that `lapply()` always returns a list, regardless of the class of the input.

::: callout-tip
### Example

Here's an example of applying the `mean()` function to all elements of a list. If the original list has names, the the names will be preserved in the output.

```{r}
x <- list(a = 1:5, b = rnorm(10))
x
lapply(x, mean)
```

Notice that here we are passing the `mean()` function as an argument to the `lapply()` function.

```{r}
purrr::map_dbl(x, mean)
```

What difference do you notice in terms of the output of `lapply()` and `purrr::map_dbl()`?

```{r}
purrr::map(x, mean)
```
:::

**Functions in R can be** used this way and can be **passed back and forth as arguments** just like any other object in R.

When you pass a function to another function, you do not need to include the open and closed parentheses `()` like you do when you are **calling** a function.

::: callout-tip
### Example

Here is another example of using `lapply()`.

```{r}
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
```
:::

You can use `lapply()` to evaluate a function multiple times each with a different argument.

Next is an example where I call the `runif()` function (to generate uniformly distributed random variables) four times, each time generating a different number of random numbers.

```{r}
x <- 1:4
lapply(x, runif)
```

::: callout-tip
### What happened?

When you pass a function to `lapply()`, `lapply()` takes elements of the list and passes them as the *first argument* of the function you are applying.

In the above example, the first argument of `runif()` is `n`, and so the elements of the sequence `1:4` all got passed to the `n` argument of `runif()`.

This also works with `purrr` functions.

```{r}
purrr::map(x, runif)
```
:::

Functions that you pass to `lapply()` may have other arguments. For example, the `runif()` function has a `min` and `max` argument too.

::: callout-note
### Question

In the example above I used the default values for `min` and `max`.

-   How would you be able to specify different values for that in the context of `lapply()`?
:::

Here is where the `...` argument to `lapply()` comes into play. Any arguments that you place in the `...` argument will get passed down to the function being applied to the elements of the list.

Here, the `min = 0` and `max = 10` arguments are passed down to `runif()` every time it gets called.

```{r}
x <- 1:4
lapply(x, runif, min = 0, max = 10)
```

So now, instead of the random numbers being between 0 and 1 (the default), the are all between 0 and 10. Again, this also works with `purrr` functions.

```{r}
purrr::map(x, runif, min = 0, max = 10)
```

The `lapply()` function (and its friends) makes heavy use of *anonymous* functions. Anonymous functions are like members of [Project Mayhem](http://en.wikipedia.org/wiki/Fight_Club)---they have no names. These functions are generated "on the fly" as you are using `lapply()`. Once the call to `lapply()` is finished, the function disappears and does not appear in the workspace.

::: callout-tip
### Example

Here I am creating a list that contains two matrices.

```{r}
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
```

Suppose I wanted to extract the first column of each matrix in the list. I could write an anonymous function for extracting the first column of each matrix.

```{r}
lapply(x, function(elt) {
    elt[, 1]
})
```

Notice that I put the `function()` definition right in the call to `lapply()`.
:::

This is perfectly legal and acceptable. You can put an arbitrarily complicated function definition inside `lapply()`, but if it's going to be more complicated, it's probably a better idea to define the function separately.

For example, I could have done the following.

```{r}
f <- function(elt) {
    elt[, 1]
}
lapply(x, f)
```

::: callout-tip
### Note

Now the function is no longer anonymous; its name is `f`.
:::

Whether you use an anonymous function or you define a function first depends on your context. If you think the function `f` is something you are going to need a lot in other parts of your code, you might want to define it separately. But if you are just going to use it for this call to `lapply()`, then it is probably simpler to use an anonymous function.

## `sapply()`

The `sapply()` function behaves similarly to `lapply()`; the only real difference is in the return value. `sapply()` will try to simplify the result of `lapply()` if possible. Essentially, `sapply()` calls `lapply()` on its input and then applies the following algorithm:

-   If the result is a list where every element is length 1, then a vector is returned

-   If the result is a list where every element is a vector of the same length (\> 1), a matrix is returned.

-   If it can't figure things out, a list is returned

    -   This can be a source of many headaches and one of the main motivations behind the `purrr` package. With `purrr` you know exactly what type of output you are getting!

Here's the result of calling `lapply()`.

```{r}
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
```

Notice that `lapply()` returns a list (as usual), but that each element of the list has length 1.

Here's the result of calling `sapply()` on the same list.

```{r}
sapply(x, mean)
```

Because the result of `lapply()` was a list where each element had length 1, `sapply()` collapsed the output into a numeric vector, which is often more useful than a list.

With `purrr`, if I want a list output, I use `map()`. If I want a double (numeric) output, we can use `map_dbl()`.

```{r}
purrr::map(x, mean)
purrr::map_dbl(x, mean)
```

## `split()`

The `split()` function takes a vector or other objects and splits it into groups determined by a factor or list of factors.

The arguments to `split()` are

```{r}
str(split)
```

where

-   `x` is a vector (or list) or data frame
-   `f` is a factor (or coerced to one) or a list of factors
-   `drop` indicates whether empty factors levels should be dropped

The combination of `split()` and a function like `lapply()` or `sapply()` is a common paradigm in R. The basic idea is that you can take a data structure, split it into subsets defined by another variable, and apply a function over those subsets. The results of applying that function over the subsets are then collated and returned as an object. This sequence of operations is sometimes referred to as "map-reduce" in other contexts.

Here we simulate some data and split it according to a factor variable. Note that we use the `gl()` function to "generate levels" in a factor variable.

```{r}
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10) # generate factor levels
f
```

```{r}
split(x, f)
```

A common idiom is `split` followed by an `lapply`.

```{r}
lapply(split(x, f), mean)
```

### Splitting a Data Frame

```{r}
library("datasets")
head(airquality)
```

We can split the `airquality` data frame by the `Month` variable so that we have separate sub-data frames for each month.

```{r}
s <- split(airquality, airquality$Month)
str(s)
```

Then we can take the column means for `Ozone`, `Solar.R`, and `Wind` for each sub-data frame.

```{r}
lapply(s, function(x) {
    colMeans(x[, c("Ozone", "Solar.R", "Wind")])
})
```

Using `sapply()` might be better here for a more readable output.

```{r}
sapply(s, function(x) {
    colMeans(x[, c("Ozone", "Solar.R", "Wind")])
})
```

Unfortunately, there are `NA`s in the data so we cannot simply take the means of those variables. However, we can tell the `colMeans` function to remove the `NA`s before computing the mean.

```{r}
sapply(s, function(x) {
    colMeans(x[, c("Ozone", "Solar.R", "Wind")],
        na.rm = TRUE
    )
})
```

We can also do this with `purrr` as shown below.

```{r}
purrr::map(s, function(x) {
    colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)
})
```

The above is not as condensed as the `sapply()` output. We can use the *superseded* (aka no longer supported) function `map_dfc()`:

```{r}
purrr::map_dfc(s, function(x) {
    colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)
})
```

Or use the currently supported function `purrr::list_cbind()`. Though we also need to do a bit more work behind the scenes.

```{r}
## Make sure we get data.frame / tibble outputs for each element
## of the list
purrr:::map(s, function(x) {
    tibble::as_tibble(colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
})

## Now we can combine them with list_cbind()
purrr:::map(s, function(x) {
    tibble::as_tibble(colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
}) %>% purrr::list_cbind()

## And we can then add the actual variable it came from with mutate()
purrr:::map(s, function(x) {
    tibble::as_tibble(colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
}) %>%
    purrr::list_cbind() %>%
    dplyr::mutate(Variable = c("Ozone", "Solar.R", "Wind"))
```

As we know, the above output is not *tidy*.

[![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/6e297111-efb7-4555-93d2-085071d1853c_rw_1920.jpg?h=f1951b118eaddaaab8a572422bc16566){fig-align="center"}](https://allisonhorst.com/other-r-fun)

So below we repeat the steps using similar functions. First we use the superseded `map_dfr()` function. At <https://purrr.tidyverse.org/reference/map_dfr.html> we can find more details about why this function was superseded and what that means.

```{r}
## Sadly map_dfr() is now superseded (aka not recommended)
purrr:::map_dfr(s, function(x) {
    colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)
})

## This is how we would have added back the Month variable
purrr:::map_dfr(s, function(x) {
    colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)
}) %>%
    dplyr:::mutate(Month = as.integer(names(s)))
```

Instead, we'll use the `t()` function for transposing a vector and `purrr:list_rbind()`.

```{r}
## Get data.frame / tibble outputs, but with each variable as a separate
## column. Here we used the t() or transpose() function.
purrr:::map(s, function(x) {
    tibble::as_tibble(t(colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)))
})

## Now we can row bind each of these data.frames / tibbles into a
## single one
purrr:::map(s, function(x) {
    tibble::as_tibble(t(colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)))
}) %>% purrr::list_rbind()

## Then with mutate, we can add the Month back
purrr:::map(s, function(x) {
    tibble::as_tibble(t(colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)))
}) %>%
    purrr::list_rbind() %>%
    dplyr:::mutate(Month = as.integer(names(s)))
```

For the above task though, we might prefer to use `dplyr` functions.

```{r}
## group_by() is in a way splitting our input data.frame / tibble by
## our variable of interest. Then summarize() helps us specify how we
## want to use that data, before it's all put back together into a
## tidy tibble.
airquality %>%
    dplyr::group_by(Month) %>%
    dplyr::summarize(
        Ozone = mean(Ozone, na.rm = TRUE),
        Solar.R = mean(Solar.R, na.rm = TRUE),
        Wind = mean(Wind, na.rm = TRUE)
    )
```

## tapply

`tapply()` is used to apply a function over subsets of a vector. It can be thought of as a combination of `split()` and `sapply()` for vectors only. I've been told that the "t" in `tapply()` refers to "table", but that is unconfirmed.

```{r}
str(tapply)
```

The arguments to `tapply()` are as follows:

-   `X` is a vector
-   `INDEX` is a factor or a list of factors (or else they are coerced to factors)
-   `FUN` is a function to be applied
-   ... contains other arguments to be passed `FUN`
-   `simplify`, should we simplify the result?

::: callout-tip
### Example

Given a vector of numbers, one simple operation is to take group means.

```{r}
## Simulate some data
x <- c(rnorm(10), runif(10), rnorm(10, 1))
## Define some groups with a factor variable
f <- gl(3, 10)
f
tapply(x, f, mean)
```
:::

We can also apply functions that return more than a single value. In this case, `tapply()` will not simplify the result and will return a list. Here's an example of finding the `range()` (min and max) of each sub-group.

```{r}
tapply(x, f, range)
```

With `purrr`, we don't have a `tapply()` direct equivalent but we can still get similar results thanks to the `split()` function.

```{r}
split(x, f) %>% purrr::map_dbl(mean)
split(x, f) %>% purrr::map(range)
```

## `apply()`

The `apply()` function is used to a evaluate a function (often an anonymous one) over the margins of an array. It is most often used to apply a function to the rows or columns of a matrix (which is just a 2-dimensional array). However, it can be used with general arrays, for example, to take the average of an array of matrices. Using `apply()` is not really faster than writing a loop, but it works in one line and is highly compact.

```{r}
str(apply)
```

The arguments to `apply()` are

-   `X` is an array
-   `MARGIN` is an integer vector indicating which margins should be "retained".
-   `FUN` is a function to be applied
-   `...` is for other arguments to be passed to `FUN`

::: callout-tip
### Example

Here I create a 20 by 10 matrix of Normal random numbers. I then compute the mean of each column.

```{r}
x <- matrix(rnorm(200), 20, 10)
head(x)
apply(x, 2, mean) ## Take the mean of each column
```
:::

::: callout-tip
### Example

I can also compute the sum of each row.

```{r}
apply(x, 1, sum) ## Take the mean of each row
```
:::

::: callout-tip
### Note

In both calls to `apply()`, the return value was a vector of numbers.
:::

You've probably noticed that the second argument is either a 1 or a 2, depending on whether we want row statistics or column statistics. What exactly *is* the second argument to `apply()`?

The `MARGIN` argument essentially indicates to `apply()` which dimension of the array you want to preserve or retain.

So when taking the mean of each column, I specify

```{r}
#| eval: false
apply(x, 2, mean)
```

because I want to collapse the first dimension (the rows) by taking the mean and I want to preserve the number of columns. Similarly, when I want the row sums, I run

```{r}
#| eval: false
apply(x, 1, sum)
```

because I want to collapse the columns (the second dimension) and preserve the number of rows (the first dimension).

With `purrr` this is a bit more complicated as it has been generalized. Matrices are arrays with 2 dimensions (margins), but they can have more. Here we use the `array_branch()` function to change `x` into a list, then use regular `map_*()` functions to compute what we want.

```{r}
array_branch(x, 2) %>% map_dbl(mean)
array_branch(x, 1) %>% map_dbl(sum)
```

### Col/Row Sums and Means

::: callout-tip
### Pro-tip

For the special case of column/row sums and column/row means of matrices, we have some useful shortcuts.

-   `rowSums` = `apply(x, 1, sum)`
-   `rowMeans` = `apply(x, 1, mean)`
-   `colSums` = `apply(x, 2, sum)`
-   `colMeans` = `apply(x, 2, mean)`
:::

The shortcut functions are heavily optimized and hence are **much** faster, but you probably won't notice unless you're using a large matrix.

Another nice aspect of these functions is that they are a bit more descriptive. It's arguably more clear to write `colMeans(x)` in your code than `apply(x, 2, mean)`.

### Other Ways to Apply

You can do more than take sums and means with the `apply()` function.

::: callout-tip
### Example

For example, you can compute quantiles of the rows of a matrix using the `quantile()` function.

```{r}
x <- matrix(rnorm(200), 20, 10)
head(x)

## Get row quantiles
apply(x, 1, quantile, probs = c(0.25, 0.75))
```

Notice that I had to pass the `probs = c(0.25, 0.75)` argument to `quantile()` via the `...` argument to `apply()`.

```{r}
array_branch(x, 1) %>%
    map(quantile, probs = c(0.25, 0.75)) %>%
    map(~ as.data.frame(t(.x))) %>%
    list_rbind()
```
:::

## Vectorizing a Function

Let's talk about how we can **"vectorize" a function**.

What this means is that we can write function that typically only takes single arguments and create a new function that can take vector arguments.

This is often needed when you want to plot functions.

::: callout-tip
### Example

Here's an example of a function that computes the sum of squares given some data, a mean parameter and a standard deviation. The formula is $\sum_{i=1}^n(x_i-\mu)^2/\sigma^2$.

```{r}
sumsq <- function(mu, sigma, x) {
    sum(((x - mu) / sigma)^2)
}
```

This function takes a mean `mu`, a standard deviation `sigma`, and some data in a vector `x`.

In many statistical applications, we want to minimize the sum of squares to find the optimal `mu` and `sigma`. Before we do that, we may want to evaluate or plot the function for many different values of `mu` or `sigma`.

```{r}
x <- rnorm(100) ## Generate some data
sumsq(mu = 1, sigma = 1, x) ## This works (returns one value)
```

However, passing a vector of `mu`s or `sigma`s won't work with this function because it's not vectorized.

```{r}
sumsq(1:10, 1:10, x) ## This is not what we want
```
:::

There's even a function in R called `Vectorize()` that **automatically can create a vectorized version of your function**.

So we could create a `vsumsq()` function that is fully vectorized as follows.

```{r}
vsumsq <- Vectorize(sumsq, c("mu", "sigma"))
vsumsq(1:10, 1:10, x)

## The details are a bit complicated though
## as we can see below
vsumsq
```

Pretty cool, right?

# Parallelize your functions

We don't have time to dive into the details, but with `furrr` we can parallelize `purrr` functions thanks to the `future` package. More details at <https://furrr.futureverse.org/>.

Similarly, with `BiocParallel::bplapply()` we can parallelize `lapply()` commands. Details at <https://bioconductor.org/packages/release/bioc/vignettes/BiocParallel/inst/doc/Introduction_To_BiocParallel.html> and more generally at <https://bioconductor.org/packages/BiocParallel/>.

# Summary

-   The loop functions in R are very powerful because they allow you to conduct a series of operations on data using a compact form

-   The operation of a loop function involves iterating over an R object (e.g. a list or vector or matrix), applying a function to each element of the object, and the collating the results and returning the collated results.

-   Loop functions make heavy use of anonymous functions, which exist for the life of the loop function but are not stored anywhere

-   The `split()` function can be used to divide an R object in to subsets determined by another variable which can subsequently be looped over using loop functions.

-   With `purrr` you have very tight control on the expected output, unlike with base R.

# Post-lecture materials

### Final Questions

Here are some post-lecture questions to help you think about the material discussed.

::: callout-note
### Questions

1.  Write a function `compute_s_n()` that for any given `n` computes the sum

$$
S_n = 1^2 + 2^2 + 3^2 + \ldots + n^2
$$

Report the value of the sum when $n$ = 10.

2.  Define an empty numerical vector `s_n` of size 25 using `s_n <- vector("numeric", 25)` and store in the results of $S_1, S_2, \ldots, S_n$ using a for-loop.

3.  Repeat Q3, but this time use `sapply() or functions from`purrr`.`

4.  Plot `s_n` versus `n`. Use points defined by $n= 1, \ldots, 25$
:::

### Additional Resources

::: callout-tip
-   <https://rdpeng.github.io/Biostat776/lecture-loop-functions>
-   <https://rafalab.github.io/dsbook/programming-basics.html#vectorization>
:::

# R session information

```{r}
options(width = 120)
sessioninfo::session_info()
```
