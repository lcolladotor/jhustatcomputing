---
title: "19 - Error Handling and Generation"
author:
  - name: Leonardo Collado Torres
    url: http://lcolladotor.github.io/
    affiliations:
      - id: libd
        name: Lieber Institute for Brain Development
        url: https://libd.org/
      - id: jhsph
        name: Johns Hopkins Bloomberg School of Public Health Department of Biostatistics
        url: https://publichealth.jhu.edu/departments/biostatistics
description: "Implement exception handling routines in R functions"
categories: [module 4, week 5, programming, debugging]
---

*This lecture, as the rest of the course, is adapted from the version [Stephanie C. Hicks](https://www.stephaniehicks.com/) designed and maintained in 2021 and 2022. Check the recent changes to this file through the `r paste0("[GitHub history](https://github.com/lcolladotor/jhustatcomputing/commits/main/", basename(dirname(getwd())), "/", basename(getwd()), "/index.qmd)")`.*

# Pre-lecture materials

### Read ahead

::: callout-note
## Read ahead

**Before class, you can prepare by reading the following materials:**

1.  <https://adv-r.hadley.nz/debugging>
:::

### Acknowledgements

Material for this lecture was borrowed and adopted from

-   <https://rdpeng.github.io/Biostat776/lecture-error-handling-and-generation>
-   <https://adv-r.hadley.nz/debugging>

# Learning objectives

::: callout-note
# Learning objectives

**At the end of this lesson you will:**

-   Create errors, warnings, and messages in R functions using the functions `stop`, `stopifnot`, `warning`, and `message`.
-   Understand the importance of providing useful error messaging to improve user experience with functions. However, these can also slow down code substantially.
:::

# Error Handling and Generation

## What is an error?

**Errors most often occur** when code is used in a way that **it is not intended to be used**.

::: callout-tip
### Example

For example adding two strings together produces the following error:

```{r}
#| error: true
"hello" + "world"
```
:::

The `+` operator is essentially a **function** that takes two numbers as arguments and finds their sum.

Since neither `"hello"` nor `"world"` are numbers, the R interpreter produces an error.

**Errors will stop the execution of your program**, and they will (hopefully) print an error message to the R console.

In R there are two other constructs which are related to errors:

1.  Warnings
2.  Messages

**Warnings** are meant to indicate that **something seems to have gone wrong** in your program that should be inspected.

::: callout-tip
### Example

Here's a simple example of a warning being generated:

```{r}
#| warning: true
as.numeric(c("5", "6", "seven"))
```

The `as.numeric()` function attempts to **convert each string** in `c("5", "6", "seven")` into a number, however it is impossible to convert `"seven"`, so a warning is generated.

Execution of the code is not halted, and an `NA` is produced for `"seven"` instead of a number.
:::

**Messages** simply **print to the R console**, though they are generated by an underlying mechanism that is similar to how errors and warning are generated.

::: callout-tip
### Example

Here's a small function that will generate a message:

```{r}
#| message: true
f <- function() {
    message("This is a message.")
}

f()
```
:::

Note that using `message()` is better than `print()` because users can suppress (censor) the messages if they want to with `suppressMessages()` as shown below. There's super easy equivalent for `print()` as `capture.output()` is more complicated to use.

```{r}
suppressMessages(f())
```

Also, something I like to do with messages is take advantage of the fact that it uses `paste0()` inside. That is, it is easy to combine our message with more information, such as the current time. Note the extra space before `T` from `This`.

```{r}
#| message: true
f2 <- function() {
    message(Sys.time(), " This is a message.")
}

f2()
```

See <https://research.libd.org/spatialLIBD/reference/registration_wrapper.html> for example.

## Generating Errors

There are a few essential functions for **generating** errors, warnings, and messages in R.

The `stop()` function will generate an error.

::: callout-tip
### Example

Let's generate an error:

```{r}
#| error: true
stop("Something erroneous has occurred!")
```

:::

If an error occurs inside of a function, then the **name of that function will appear in the error message**:

```{r}
#| error: true
name_of_function <- function() {
    stop("Something bad happened.")
}

name_of_function()
```

As we saw in the previous lesson, we can combine `stop()` with an `if()` if we want to provide our users a more informative error message than the one they would get otherwise. For example, see <https://github.com/LieberInstitute/qsvaR/blob/feb9a9e4f8a499baba76271de37ca39a9969f400/R/k_qsvs.R#L30-L32>.

The `stopifnot()` function takes a series of logical expressions as arguments and if any of them are false an error is generated specifying which expression is false.

::: callout-tip
### Example

Let's take a look at an example:

```{r}
#| error: true
error_if_n_is_greater_than_zero <- function(n) {
    stopifnot(n <= 0)
    n
}

error_if_n_is_greater_than_zero(5)
```
:::

::: callout-note

I recommend using `stopifnot()` only with objects that are arguments to your function. Otherwise, users will get confusing error messages involving objects that they do not know how they were created.

```{r}
#| error: true
error_if_n_squared <- function(n) {
    ## Ok use
    stopifnot(n <= 0)

    ## Create an internal object
    n_squared <- n^2

    ## Not ok, since we are using the internal object n_squared
    stopifnot(n_squared <= 10)
    n
}

error_if_n_squared(-2)

## This generates a confusing error message to our users
error_if_n_squared(-4)
```

:::

`stopifnot()` is mostly used at the beginning of functions to check our inputs. You might also want to use `rlang::arg_match()` <https://rlang.r-lib.org/reference/arg_match.html> to provide error messages that include hints when we have a set of allowed options.

```{r}
#| error: true
fn <- function(x = c("foo", "bar")) {
    x <- rlang::arg_match(x)

    ## Known scenario 1
    if (x == "foo") {
        print("I know what to do here with 'x = foo'")
    }

    ## Known scenario 2
    if (x == "bar") {
        print("I know what to do here with 'x = bar'")
    }
}
fn("foo")
fn("zoo")
```


The `warning()` function creates a warning, and the function itself is very similar to the `stop()` function. Remember that a warning does not stop the execution of a program (unlike an error.)

::: callout-tip
### Example

```{r}
#| warning: true
warning("Consider yourself warned!")
```
:::

Just like errors, a warning generated inside of a function will include the name of the function in which it was generated:

```{r}
#| warning: true
make_NA <- function(x) {
    warning("Generating an NA.")
    NA
}

make_NA("Sodium")
```

Messages are simpler than errors or warnings; they just print strings to the R console.

You can issue a message with the `message()` function:

::: callout-tip
### Example

```{r}
message("In a bottle.")
```
:::

## When to generate errors or warnings

Stopping the execution of your program with `stop()` should only happen in the event of a catastrophe - meaning only if it is impossible for your program to continue.

-   If there are **conditions that you can anticipate** that would cause your program to create an error, then you **should document those conditions** so whoever uses your software is aware.

An example includes:

-   Providing invalid arguments to a function. You could check this at the beginning of your program using `stopifnot()` so that the user can quickly realize something has gone wrong.

You can think of a function as kind of contract between you and the user:

-   if the user provides specified arguments, your program will provide predictable results.

Of course it's **impossible for you to anticipate** all of the potential uses of your program.

It's **appropriate to create a warning** when this contract between you and the user is violated.

A perfect example of this situation is the result of

```{r}
as.numeric(c("5", "6", "seven"))
```

The user expects a vector of numbers to be returned as the result of `as.numeric()` but `"seven"` is coerced into being NA, which is not completely intuitive.

R has largely been developed according to the [Unix Philosophy](https://en.wikipedia.org/wiki/Unix_philosophy), which generally **discourages printing text to the console unless something unexpected has occurred**.

Languages that commonly run on Unix systems like C and C++ are rarely used interactively, meaning that they usually underpin computer infrastructure (computers "talking" to other computers).

**Messages printed to the console** are therefore not very useful since nobody will ever read them and it's not straightforward for other programs to capture and interpret them.

In contrast, R code is frequently executed by human beings in the R console, which serves as an interactive environment between the computer and person at the keyboard.

If you **think your program should produce a message**, make sure that the **output of the message is primarily meant for a human to read**.

You should avoid signaling a condition or the result of your program to another program by creating a message.

## How should errors be handled?

Imagine writing a program that will take a long time to complete because of a complex calculation or because you're handling a large amount of data. If an error occurs during this computation then you're liable to lose all of the results that were calculated before the error, or your program may not finish a critical task that a program further down your pipeline is depending on. If you anticipate the possibility of errors occurring during the execution of your program, then you can design your program to handle them appropriately.

The `tryCatch()` function is the workhorse of handling errors and warnings in R. The first argument of this function is any R expression, followed by conditions which specify how to handle an error or a warning. The last argument, `finally`, specifies a function or expression that will be executed after the expression no matter what, even in the event of an error or a warning.

Let's construct a simple function I'm going to call [`beera`](https://en.wikipedia.org/wiki/Yogi_Berra) that catches errors and warnings gracefully.

```{r}
beera <- function(expr) {
    tryCatch(expr,
        error = function(e) {
            message("An error occurred:\n", e)
        },
        warning = function(w) {
            message("A warning occured:\n", w)
        },
        finally = {
            message("Finally done!")
        }
    )
}
```

This function takes an expression as an argument and tries to evaluate it. If the expression can be evaluated without any errors or warnings then the result of the expression is returned and the message `Finally done!` is printed to the R console. If an error or warning is generated, then the functions that are provided to the `error` or `warning` arguments are printed. Let's try this function out with a few examples.

```{r}
beera({
    2 + 2
})

beera({
    "two" + 2
})

beera({
    as.numeric(c(1, "two", 3))
})
```

Notice that we've effectively transformed errors and warnings into messages.

As a real use case of `tryCatch()` check <https://github.com/leekgroup/recount/blob/742c5ea7cc321729d6b3f03412d5829dd55e023e/R/download_retry.R#L40> which is based on the Bioconductor guidelines for querying data from the web <https://contributions.bioconductor.org/querying-web-resources.html>.

Now that you know the basics of generating and catching errors you'll need to decide when your program should generate an error. My advice to you is to limit the number of errors your program generates as much as possible. Even if you design your program so that it's able to catch and handle errors, the error handling process slows down your program by orders of magnitude. Imagine you wanted to write a simple function that checks if an argument is an even number. You might write the following:

```{r, error=TRUE}
is_even <- function(n) {
    n %% 2 == 0
}

is_even(768)

is_even("two")
```

You can see that providing a string causes this function to raise an error. You could imagine though that you want to use this function across a list of different data types, and you only want to know which elements of that list are even numbers. You might think to write the following:

```{r}
is_even_error <- function(n) {
    tryCatch(n %% 2 == 0,
        error = function(e) {
            FALSE
        }
    )
}

is_even_error(714)

is_even_error("eight")
```

This appears to be working the way you intended, however when applied to more data this function will be seriously slow compared to alternatives. For example I could check that `n` is numeric before treating `n` like a number:

```{r}
is_even_check <- function(n) {
    is.numeric(n) && n %% 2 == 0
}

is_even_check(1876)

is_even_check("twelve")
```

::: keyideas
Notice that by using `is.numeric()` before the "AND" operator (`&&`), the expression `n %% 2 == 0` is never evaluated. This is a programming language design feature called "short circuiting." The expression can never evaluate to `TRUE` if the left hand side of `&&` evaluates to `FALSE`, so the right hand side is ignored.
:::

To demonstrate the difference in the speed of the code, we will use the `microbenchmark` package to measure how long it takes for each function to be applied to the same data.

```{r}
#| eval: false
library(microbenchmark)
microbenchmark(sapply(letters, is_even_check))
```

```         
Unit: microseconds
                           expr    min      lq     mean  median      uq     max neval
 sapply(letters, is_even_check) 46.224 47.7975 61.43616 48.6445 58.4755 167.091   100
```

```{r, eval=FALSE}
microbenchmark(sapply(letters, is_even_error))
```

```         
Unit: microseconds
                           expr     min       lq     mean   median       uq      max neval
 sapply(letters, is_even_error) 640.067 678.0285 906.3037 784.4315 1044.501 2308.931   100
```

The error catching approach is nearly 15 times slower!

Proper error handling is an essential tool for any software developer so that you can design programs that are error tolerant. Creating clear and informative error messages is essential for building quality software.

::: callout-tip
### Pro-tip

One closing tip I recommend is to put documentation for your software online, including the meaning of the errors that your software can potentially throw. Often a user's first instinct when encountering an error is to search online for that error message, which should lead them to your documentation!
:::

# Summary

-   Errors, warnings, and messages can be generated within R code using the functions `stop`, `stopifnot`, `warning`, and `message`.

-   Catching errors, and providing useful error messaging, can improve user experience with functions but can also slow down code substantially.

# Post-lecture materials

### Additional Resources

::: callout-tip
-   <https://rdpeng.github.io/Biostat776/lecture-error-handling-and-generation>
-   <https://adv-r.hadley.nz/debugging>
:::

# R session information

```{r}
options(width = 120)
sessioninfo::session_info()
```
